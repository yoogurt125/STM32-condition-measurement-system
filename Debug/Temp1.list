
Temp1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000386c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08003a3c  08003a3c  00013a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003ac0  08003ac0  00013ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003ac8  08003ac8  00013ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003acc  08003acc  00013acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  20000000  08003ad0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000421c  20000078  08003b48  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20004294  08003b48  00024294  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001be48  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000429c  00000000  00000000  0003bef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000ac6a  00000000  00000000  0004018c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001100  00000000  00000000  0004adf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001490  00000000  00000000  0004bef8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000a4cd  00000000  00000000  0004d388  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000d7e23  00000000  00000000  00057855  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      000000f7  00000000  00000000  0012f678  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000033b8  00000000  00000000  0012f770  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  00021e36  00000000  00000000  00132b28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003a24 	.word	0x08003a24

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08003a24 	.word	0x08003a24

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005c0:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005c2:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <HAL_Init+0x30>)
 80005c4:	681a      	ldr	r2, [r3, #0]
 80005c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005ca:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005d2:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005da:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005dc:	2003      	movs	r0, #3
 80005de:	f000 f809 	bl	80005f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005e2:	2000      	movs	r0, #0
 80005e4:	f002 f8b6 	bl	8002754 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005e8:	f002 f83a 	bl	8002660 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80005ec:	2000      	movs	r0, #0
 80005ee:	bd08      	pop	{r3, pc}
 80005f0:	40023c00 	.word	0x40023c00

080005f4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005f4:	4a07      	ldr	r2, [pc, #28]	; (8000614 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005f6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005f8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005fc:	041b      	lsls	r3, r3, #16
 80005fe:	0c1b      	lsrs	r3, r3, #16
 8000600:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000604:	0200      	lsls	r0, r0, #8
 8000606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800060a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800060e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000610:	60d3      	str	r3, [r2, #12]
 8000612:	4770      	bx	lr
 8000614:	e000ed00 	.word	0xe000ed00

08000618 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000618:	4b17      	ldr	r3, [pc, #92]	; (8000678 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800061a:	b530      	push	{r4, r5, lr}
 800061c:	68dc      	ldr	r4, [r3, #12]
 800061e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000622:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000626:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000628:	2b04      	cmp	r3, #4
 800062a:	bf28      	it	cs
 800062c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800062e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000630:	f04f 0501 	mov.w	r5, #1
 8000634:	fa05 f303 	lsl.w	r3, r5, r3
 8000638:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800063c:	bf8c      	ite	hi
 800063e:	3c03      	subhi	r4, #3
 8000640:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000642:	4019      	ands	r1, r3
 8000644:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000646:	fa05 f404 	lsl.w	r4, r5, r4
 800064a:	3c01      	subs	r4, #1
 800064c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800064e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000650:	ea42 0201 	orr.w	r2, r2, r1
 8000654:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000658:	bfad      	iteet	ge
 800065a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065e:	f000 000f 	andlt.w	r0, r0, #15
 8000662:	4b06      	ldrlt	r3, [pc, #24]	; (800067c <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000664:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000668:	bfb5      	itete	lt
 800066a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000670:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	bf00      	nop
 8000678:	e000ed00 	.word	0xe000ed00
 800067c:	e000ed14 	.word	0xe000ed14

08000680 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000680:	2800      	cmp	r0, #0
 8000682:	db08      	blt.n	8000696 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000684:	0942      	lsrs	r2, r0, #5
 8000686:	2301      	movs	r3, #1
 8000688:	f000 001f 	and.w	r0, r0, #31
 800068c:	fa03 f000 	lsl.w	r0, r3, r0
 8000690:	4b01      	ldr	r3, [pc, #4]	; (8000698 <HAL_NVIC_EnableIRQ+0x18>)
 8000692:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000696:	4770      	bx	lr
 8000698:	e000e100 	.word	0xe000e100

0800069c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800069c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006a0:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006a2:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006a4:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8000848 <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006a8:	4a65      	ldr	r2, [pc, #404]	; (8000840 <HAL_GPIO_Init+0x1a4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006aa:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 800084c <HAL_GPIO_Init+0x1b0>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006ae:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80006b0:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80006b2:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006b6:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 80006b8:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006bc:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 80006c0:	45b6      	cmp	lr, r6
 80006c2:	f040 80aa 	bne.w	800081a <HAL_GPIO_Init+0x17e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006c6:	684c      	ldr	r4, [r1, #4]
 80006c8:	f024 0710 	bic.w	r7, r4, #16
 80006cc:	2f02      	cmp	r7, #2
 80006ce:	d116      	bne.n	80006fe <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 80006d0:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80006d4:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006d8:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80006dc:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006e0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80006e4:	f04f 0c0f 	mov.w	ip, #15
 80006e8:	fa0c fc0b 	lsl.w	ip, ip, fp
 80006ec:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80006f0:	690d      	ldr	r5, [r1, #16]
 80006f2:	fa05 f50b 	lsl.w	r5, r5, fp
 80006f6:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 80006fa:	f8ca 5020 	str.w	r5, [sl, #32]
 80006fe:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000702:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000704:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000708:	fa05 f50a 	lsl.w	r5, r5, sl
 800070c:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800070e:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000712:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000716:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800071a:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800071c:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000720:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000722:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000726:	d811      	bhi.n	800074c <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000728:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800072a:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800072e:	68cf      	ldr	r7, [r1, #12]
 8000730:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000734:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000738:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800073a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800073c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000740:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000744:	409f      	lsls	r7, r3
 8000746:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800074a:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800074c:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800074e:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000750:	688f      	ldr	r7, [r1, #8]
 8000752:	fa07 f70a 	lsl.w	r7, r7, sl
 8000756:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000758:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800075a:	00e5      	lsls	r5, r4, #3
 800075c:	d55d      	bpl.n	800081a <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800075e:	f04f 0b00 	mov.w	fp, #0
 8000762:	f8cd b00c 	str.w	fp, [sp, #12]
 8000766:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800076a:	4d36      	ldr	r5, [pc, #216]	; (8000844 <HAL_GPIO_Init+0x1a8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800076c:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000770:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000774:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000778:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800077c:	9703      	str	r7, [sp, #12]
 800077e:	9f03      	ldr	r7, [sp, #12]
 8000780:	f023 0703 	bic.w	r7, r3, #3
 8000784:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000788:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800078c:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000790:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000794:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000798:	f04f 0e0f 	mov.w	lr, #15
 800079c:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007a0:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007a2:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007a6:	d03f      	beq.n	8000828 <HAL_GPIO_Init+0x18c>
 80007a8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007ac:	42a8      	cmp	r0, r5
 80007ae:	d03d      	beq.n	800082c <HAL_GPIO_Init+0x190>
 80007b0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007b4:	42a8      	cmp	r0, r5
 80007b6:	d03b      	beq.n	8000830 <HAL_GPIO_Init+0x194>
 80007b8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007bc:	42a8      	cmp	r0, r5
 80007be:	d039      	beq.n	8000834 <HAL_GPIO_Init+0x198>
 80007c0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007c4:	42a8      	cmp	r0, r5
 80007c6:	d037      	beq.n	8000838 <HAL_GPIO_Init+0x19c>
 80007c8:	4548      	cmp	r0, r9
 80007ca:	d037      	beq.n	800083c <HAL_GPIO_Init+0x1a0>
 80007cc:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80007d0:	42a8      	cmp	r0, r5
 80007d2:	bf14      	ite	ne
 80007d4:	2507      	movne	r5, #7
 80007d6:	2506      	moveq	r5, #6
 80007d8:	fa05 f50c 	lsl.w	r5, r5, ip
 80007dc:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80007e0:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80007e2:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80007e4:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007e6:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80007ea:	bf0c      	ite	eq
 80007ec:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007ee:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80007f0:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80007f2:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007f4:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80007f8:	bf0c      	ite	eq
 80007fa:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007fc:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80007fe:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000800:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000802:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000806:	bf0c      	ite	eq
 8000808:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800080a:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 800080c:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 800080e:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000810:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000812:	bf54      	ite	pl
 8000814:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000816:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000818:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800081a:	3301      	adds	r3, #1
 800081c:	2b10      	cmp	r3, #16
 800081e:	f47f af48 	bne.w	80006b2 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000822:	b005      	add	sp, #20
 8000824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000828:	465d      	mov	r5, fp
 800082a:	e7d5      	b.n	80007d8 <HAL_GPIO_Init+0x13c>
 800082c:	2501      	movs	r5, #1
 800082e:	e7d3      	b.n	80007d8 <HAL_GPIO_Init+0x13c>
 8000830:	2502      	movs	r5, #2
 8000832:	e7d1      	b.n	80007d8 <HAL_GPIO_Init+0x13c>
 8000834:	2503      	movs	r5, #3
 8000836:	e7cf      	b.n	80007d8 <HAL_GPIO_Init+0x13c>
 8000838:	2504      	movs	r5, #4
 800083a:	e7cd      	b.n	80007d8 <HAL_GPIO_Init+0x13c>
 800083c:	2505      	movs	r5, #5
 800083e:	e7cb      	b.n	80007d8 <HAL_GPIO_Init+0x13c>
 8000840:	40013c00 	.word	0x40013c00
 8000844:	40020000 	.word	0x40020000
 8000848:	40023800 	.word	0x40023800
 800084c:	40021400 	.word	0x40021400

08000850 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000850:	6903      	ldr	r3, [r0, #16]
 8000852:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000854:	bf14      	ite	ne
 8000856:	2001      	movne	r0, #1
 8000858:	2000      	moveq	r0, #0
 800085a:	4770      	bx	lr

0800085c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800085c:	b10a      	cbz	r2, 8000862 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800085e:	6181      	str	r1, [r0, #24]
 8000860:	4770      	bx	lr
 8000862:	0409      	lsls	r1, r1, #16
 8000864:	e7fb      	b.n	800085e <HAL_GPIO_WritePin+0x2>
	...

08000868 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000868:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	9301      	str	r3, [sp, #4]
 800086e:	4b18      	ldr	r3, [pc, #96]	; (80008d0 <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000870:	4c18      	ldr	r4, [pc, #96]	; (80008d4 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000872:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000874:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000878:	641a      	str	r2, [r3, #64]	; 0x40
 800087a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000880:	9301      	str	r3, [sp, #4]
 8000882:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000884:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <HAL_PWREx_EnableOverDrive+0x70>)
 8000886:	2201      	movs	r2, #1
 8000888:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800088a:	f002 f84b 	bl	8002924 <HAL_GetTick>
 800088e:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000890:	6863      	ldr	r3, [r4, #4]
 8000892:	03da      	lsls	r2, r3, #15
 8000894:	d50b      	bpl.n	80008ae <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <HAL_PWREx_EnableOverDrive+0x74>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000898:	4c0e      	ldr	r4, [pc, #56]	; (80008d4 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800089a:	2201      	movs	r2, #1
 800089c:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800089e:	f002 f841 	bl	8002924 <HAL_GetTick>
 80008a2:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80008a4:	6863      	ldr	r3, [r4, #4]
 80008a6:	039b      	lsls	r3, r3, #14
 80008a8:	d50a      	bpl.n	80008c0 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80008aa:	2000      	movs	r0, #0
 80008ac:	e006      	b.n	80008bc <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80008ae:	f002 f839 	bl	8002924 <HAL_GetTick>
 80008b2:	1b40      	subs	r0, r0, r5
 80008b4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80008b8:	d9ea      	bls.n	8000890 <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 80008ba:	2003      	movs	r0, #3
}
 80008bc:	b003      	add	sp, #12
 80008be:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80008c0:	f002 f830 	bl	8002924 <HAL_GetTick>
 80008c4:	1b40      	subs	r0, r0, r5
 80008c6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80008ca:	d9eb      	bls.n	80008a4 <HAL_PWREx_EnableOverDrive+0x3c>
 80008cc:	e7f5      	b.n	80008ba <HAL_PWREx_EnableOverDrive+0x52>
 80008ce:	bf00      	nop
 80008d0:	40023800 	.word	0x40023800
 80008d4:	40007000 	.word	0x40007000
 80008d8:	420e0040 	.word	0x420e0040
 80008dc:	420e0044 	.word	0x420e0044

080008e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80008e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008e4:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80008e6:	4604      	mov	r4, r0
 80008e8:	b910      	cbnz	r0, 80008f0 <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 80008ea:	2001      	movs	r0, #1
 80008ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80008f0:	4b44      	ldr	r3, [pc, #272]	; (8000a04 <HAL_RCC_ClockConfig+0x124>)
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	f002 020f 	and.w	r2, r2, #15
 80008f8:	428a      	cmp	r2, r1
 80008fa:	d328      	bcc.n	800094e <HAL_RCC_ClockConfig+0x6e>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80008fc:	6821      	ldr	r1, [r4, #0]
 80008fe:	078f      	lsls	r7, r1, #30
 8000900:	d42d      	bmi.n	800095e <HAL_RCC_ClockConfig+0x7e>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000902:	07c8      	lsls	r0, r1, #31
 8000904:	d440      	bmi.n	8000988 <HAL_RCC_ClockConfig+0xa8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000906:	4b3f      	ldr	r3, [pc, #252]	; (8000a04 <HAL_RCC_ClockConfig+0x124>)
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	f002 020f 	and.w	r2, r2, #15
 800090e:	4295      	cmp	r5, r2
 8000910:	d366      	bcc.n	80009e0 <HAL_RCC_ClockConfig+0x100>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000912:	6822      	ldr	r2, [r4, #0]
 8000914:	0751      	lsls	r1, r2, #29
 8000916:	d46c      	bmi.n	80009f2 <HAL_RCC_ClockConfig+0x112>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000918:	0713      	lsls	r3, r2, #28
 800091a:	d507      	bpl.n	800092c <HAL_RCC_ClockConfig+0x4c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800091c:	4a3a      	ldr	r2, [pc, #232]	; (8000a08 <HAL_RCC_ClockConfig+0x128>)
 800091e:	6921      	ldr	r1, [r4, #16]
 8000920:	6893      	ldr	r3, [r2, #8]
 8000922:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000926:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800092a:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800092c:	f000 f8b6 	bl	8000a9c <HAL_RCC_GetSysClockFreq>
 8000930:	4b35      	ldr	r3, [pc, #212]	; (8000a08 <HAL_RCC_ClockConfig+0x128>)
 8000932:	4a36      	ldr	r2, [pc, #216]	; (8000a0c <HAL_RCC_ClockConfig+0x12c>)
 8000934:	689b      	ldr	r3, [r3, #8]
 8000936:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800093a:	5cd3      	ldrb	r3, [r2, r3]
 800093c:	40d8      	lsrs	r0, r3
 800093e:	4b34      	ldr	r3, [pc, #208]	; (8000a10 <HAL_RCC_ClockConfig+0x130>)
 8000940:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8000942:	2000      	movs	r0, #0
 8000944:	f001 ff06 	bl	8002754 <HAL_InitTick>

  return HAL_OK;
 8000948:	2000      	movs	r0, #0
 800094a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800094e:	b2ca      	uxtb	r2, r1
 8000950:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f003 030f 	and.w	r3, r3, #15
 8000958:	4299      	cmp	r1, r3
 800095a:	d1c6      	bne.n	80008ea <HAL_RCC_ClockConfig+0xa>
 800095c:	e7ce      	b.n	80008fc <HAL_RCC_ClockConfig+0x1c>
 800095e:	4b2a      	ldr	r3, [pc, #168]	; (8000a08 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000960:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000964:	bf1e      	ittt	ne
 8000966:	689a      	ldrne	r2, [r3, #8]
 8000968:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 800096c:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800096e:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000970:	bf42      	ittt	mi
 8000972:	689a      	ldrmi	r2, [r3, #8]
 8000974:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000978:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800097a:	689a      	ldr	r2, [r3, #8]
 800097c:	68a0      	ldr	r0, [r4, #8]
 800097e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000982:	4302      	orrs	r2, r0
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	e7bc      	b.n	8000902 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000988:	6862      	ldr	r2, [r4, #4]
 800098a:	4b1f      	ldr	r3, [pc, #124]	; (8000a08 <HAL_RCC_ClockConfig+0x128>)
 800098c:	2a01      	cmp	r2, #1
 800098e:	d11d      	bne.n	80009cc <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000996:	d0a8      	beq.n	80008ea <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000998:	4e1b      	ldr	r6, [pc, #108]	; (8000a08 <HAL_RCC_ClockConfig+0x128>)
 800099a:	68b3      	ldr	r3, [r6, #8]
 800099c:	f023 0303 	bic.w	r3, r3, #3
 80009a0:	4313      	orrs	r3, r2
 80009a2:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80009a4:	f001 ffbe 	bl	8002924 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009a8:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80009ac:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80009ae:	68b3      	ldr	r3, [r6, #8]
 80009b0:	6862      	ldr	r2, [r4, #4]
 80009b2:	f003 030c 	and.w	r3, r3, #12
 80009b6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80009ba:	d0a4      	beq.n	8000906 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009bc:	f001 ffb2 	bl	8002924 <HAL_GetTick>
 80009c0:	1bc0      	subs	r0, r0, r7
 80009c2:	4540      	cmp	r0, r8
 80009c4:	d9f3      	bls.n	80009ae <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 80009c6:	2003      	movs	r0, #3
}
 80009c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80009cc:	1e91      	subs	r1, r2, #2
 80009ce:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80009d0:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80009d2:	d802      	bhi.n	80009da <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80009d4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80009d8:	e7dd      	b.n	8000996 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009da:	f013 0f02 	tst.w	r3, #2
 80009de:	e7da      	b.n	8000996 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80009e0:	b2ea      	uxtb	r2, r5
 80009e2:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f003 030f 	and.w	r3, r3, #15
 80009ea:	429d      	cmp	r5, r3
 80009ec:	f47f af7d 	bne.w	80008ea <HAL_RCC_ClockConfig+0xa>
 80009f0:	e78f      	b.n	8000912 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80009f2:	4905      	ldr	r1, [pc, #20]	; (8000a08 <HAL_RCC_ClockConfig+0x128>)
 80009f4:	68e0      	ldr	r0, [r4, #12]
 80009f6:	688b      	ldr	r3, [r1, #8]
 80009f8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80009fc:	4303      	orrs	r3, r0
 80009fe:	608b      	str	r3, [r1, #8]
 8000a00:	e78a      	b.n	8000918 <HAL_RCC_ClockConfig+0x38>
 8000a02:	bf00      	nop
 8000a04:	40023c00 	.word	0x40023c00
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	08003a74 	.word	0x08003a74
 8000a10:	20000010 	.word	0x20000010

08000a14 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000a14:	4b01      	ldr	r3, [pc, #4]	; (8000a1c <HAL_RCC_GetHCLKFreq+0x8>)
 8000a16:	6818      	ldr	r0, [r3, #0]
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	20000010 	.word	0x20000010

08000a20 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000a20:	4b04      	ldr	r3, [pc, #16]	; (8000a34 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000a22:	4a05      	ldr	r2, [pc, #20]	; (8000a38 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000a24:	689b      	ldr	r3, [r3, #8]
 8000a26:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000a2a:	5cd3      	ldrb	r3, [r2, r3]
 8000a2c:	4a03      	ldr	r2, [pc, #12]	; (8000a3c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000a2e:	6810      	ldr	r0, [r2, #0]
}
 8000a30:	40d8      	lsrs	r0, r3
 8000a32:	4770      	bx	lr
 8000a34:	40023800 	.word	0x40023800
 8000a38:	08003a84 	.word	0x08003a84
 8000a3c:	20000010 	.word	0x20000010

08000a40 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000a40:	4b04      	ldr	r3, [pc, #16]	; (8000a54 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000a42:	4a05      	ldr	r2, [pc, #20]	; (8000a58 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000a44:	689b      	ldr	r3, [r3, #8]
 8000a46:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000a4a:	5cd3      	ldrb	r3, [r2, r3]
 8000a4c:	4a03      	ldr	r2, [pc, #12]	; (8000a5c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000a4e:	6810      	ldr	r0, [r2, #0]
}
 8000a50:	40d8      	lsrs	r0, r3
 8000a52:	4770      	bx	lr
 8000a54:	40023800 	.word	0x40023800
 8000a58:	08003a84 	.word	0x08003a84
 8000a5c:	20000010 	.word	0x20000010

08000a60 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000a60:	230f      	movs	r3, #15
 8000a62:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000a64:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <HAL_RCC_GetClockConfig+0x34>)
 8000a66:	689a      	ldr	r2, [r3, #8]
 8000a68:	f002 0203 	and.w	r2, r2, #3
 8000a6c:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8000a6e:	689a      	ldr	r2, [r3, #8]
 8000a70:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8000a74:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8000a76:	689a      	ldr	r2, [r3, #8]
 8000a78:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8000a7c:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8000a7e:	689b      	ldr	r3, [r3, #8]
 8000a80:	08db      	lsrs	r3, r3, #3
 8000a82:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000a86:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000a88:	4b03      	ldr	r3, [pc, #12]	; (8000a98 <HAL_RCC_GetClockConfig+0x38>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f003 030f 	and.w	r3, r3, #15
 8000a90:	600b      	str	r3, [r1, #0]
 8000a92:	4770      	bx	lr
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40023c00 	.word	0x40023c00

08000a9c <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000a9c:	4920      	ldr	r1, [pc, #128]	; (8000b20 <HAL_RCC_GetSysClockFreq+0x84>)
{
 8000a9e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000aa0:	688b      	ldr	r3, [r1, #8]
 8000aa2:	f003 030c 	and.w	r3, r3, #12
 8000aa6:	2b08      	cmp	r3, #8
 8000aa8:	d007      	beq.n	8000aba <HAL_RCC_GetSysClockFreq+0x1e>
 8000aaa:	2b0c      	cmp	r3, #12
 8000aac:	d020      	beq.n	8000af0 <HAL_RCC_GetSysClockFreq+0x54>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000aae:	4a1d      	ldr	r2, [pc, #116]	; (8000b24 <HAL_RCC_GetSysClockFreq+0x88>)
 8000ab0:	481d      	ldr	r0, [pc, #116]	; (8000b28 <HAL_RCC_GetSysClockFreq+0x8c>)
 8000ab2:	2b04      	cmp	r3, #4
 8000ab4:	bf18      	it	ne
 8000ab6:	4610      	movne	r0, r2
 8000ab8:	bd08      	pop	{r3, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000aba:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000abc:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000abe:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000ac0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ac4:	bf14      	ite	ne
 8000ac6:	4818      	ldrne	r0, [pc, #96]	; (8000b28 <HAL_RCC_GetSysClockFreq+0x8c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ac8:	4816      	ldreq	r0, [pc, #88]	; (8000b24 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000aca:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000ace:	bf18      	it	ne
 8000ad0:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000ad2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ad6:	fba1 0100 	umull	r0, r1, r1, r0
 8000ada:	f7ff fbf1 	bl	80002c0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000ade:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <HAL_RCC_GetSysClockFreq+0x84>)
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	005b      	lsls	r3, r3, #1
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);

      sysclockfreq = pllvco/pllr;
 8000aea:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000aee:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000af0:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000af2:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000af4:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000af6:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000afa:	bf14      	ite	ne
 8000afc:	480a      	ldrne	r0, [pc, #40]	; (8000b28 <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000afe:	4809      	ldreq	r0, [pc, #36]	; (8000b24 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b00:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000b04:	bf18      	it	ne
 8000b06:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b08:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b0c:	fba1 0100 	umull	r0, r1, r1, r0
 8000b10:	f7ff fbd6 	bl	80002c0 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8000b14:	4b02      	ldr	r3, [pc, #8]	; (8000b20 <HAL_RCC_GetSysClockFreq+0x84>)
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8000b1c:	e7e5      	b.n	8000aea <HAL_RCC_GetSysClockFreq+0x4e>
 8000b1e:	bf00      	nop
 8000b20:	40023800 	.word	0x40023800
 8000b24:	00f42400 	.word	0x00f42400
 8000b28:	007a1200 	.word	0x007a1200

08000b2c <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b2c:	6803      	ldr	r3, [r0, #0]
{
 8000b2e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b32:	07df      	lsls	r7, r3, #31
{
 8000b34:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b36:	d410      	bmi.n	8000b5a <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b38:	6823      	ldr	r3, [r4, #0]
 8000b3a:	079e      	lsls	r6, r3, #30
 8000b3c:	d467      	bmi.n	8000c0e <HAL_RCC_OscConfig+0xe2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b3e:	6823      	ldr	r3, [r4, #0]
 8000b40:	071a      	lsls	r2, r3, #28
 8000b42:	f100 80b2 	bmi.w	8000caa <HAL_RCC_OscConfig+0x17e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b46:	6823      	ldr	r3, [r4, #0]
 8000b48:	075b      	lsls	r3, r3, #29
 8000b4a:	f100 80d0 	bmi.w	8000cee <HAL_RCC_OscConfig+0x1c2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b4e:	69a2      	ldr	r2, [r4, #24]
 8000b50:	2a00      	cmp	r2, #0
 8000b52:	f040 8139 	bne.w	8000dc8 <HAL_RCC_OscConfig+0x29c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000b56:	2000      	movs	r0, #0
 8000b58:	e01e      	b.n	8000b98 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000b5a:	4b97      	ldr	r3, [pc, #604]	; (8000db8 <HAL_RCC_OscConfig+0x28c>)
 8000b5c:	689a      	ldr	r2, [r3, #8]
 8000b5e:	f002 020c 	and.w	r2, r2, #12
 8000b62:	2a04      	cmp	r2, #4
 8000b64:	d010      	beq.n	8000b88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000b66:	689a      	ldr	r2, [r3, #8]
 8000b68:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000b6c:	2a08      	cmp	r2, #8
 8000b6e:	d102      	bne.n	8000b76 <HAL_RCC_OscConfig+0x4a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	025d      	lsls	r5, r3, #9
 8000b74:	d408      	bmi.n	8000b88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b76:	4b90      	ldr	r3, [pc, #576]	; (8000db8 <HAL_RCC_OscConfig+0x28c>)
 8000b78:	689a      	ldr	r2, [r3, #8]
 8000b7a:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000b7e:	2a0c      	cmp	r2, #12
 8000b80:	d10d      	bne.n	8000b9e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b82:	685a      	ldr	r2, [r3, #4]
 8000b84:	0250      	lsls	r0, r2, #9
 8000b86:	d50a      	bpl.n	8000b9e <HAL_RCC_OscConfig+0x72>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b88:	4b8b      	ldr	r3, [pc, #556]	; (8000db8 <HAL_RCC_OscConfig+0x28c>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	0399      	lsls	r1, r3, #14
 8000b8e:	d5d3      	bpl.n	8000b38 <HAL_RCC_OscConfig+0xc>
 8000b90:	6863      	ldr	r3, [r4, #4]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d1d0      	bne.n	8000b38 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000b96:	2001      	movs	r0, #1
}
 8000b98:	b002      	add	sp, #8
 8000b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b9e:	6862      	ldr	r2, [r4, #4]
 8000ba0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000ba4:	d111      	bne.n	8000bca <HAL_RCC_OscConfig+0x9e>
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000bac:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000bae:	f001 feb9 	bl	8002924 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bb2:	4d81      	ldr	r5, [pc, #516]	; (8000db8 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8000bb4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bb6:	682b      	ldr	r3, [r5, #0]
 8000bb8:	039a      	lsls	r2, r3, #14
 8000bba:	d4bd      	bmi.n	8000b38 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bbc:	f001 feb2 	bl	8002924 <HAL_GetTick>
 8000bc0:	1b80      	subs	r0, r0, r6
 8000bc2:	2864      	cmp	r0, #100	; 0x64
 8000bc4:	d9f7      	bls.n	8000bb6 <HAL_RCC_OscConfig+0x8a>
            return HAL_TIMEOUT;
 8000bc6:	2003      	movs	r0, #3
 8000bc8:	e7e6      	b.n	8000b98 <HAL_RCC_OscConfig+0x6c>
 8000bca:	4d7b      	ldr	r5, [pc, #492]	; (8000db8 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bcc:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000bd0:	682b      	ldr	r3, [r5, #0]
 8000bd2:	d107      	bne.n	8000be4 <HAL_RCC_OscConfig+0xb8>
 8000bd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bd8:	602b      	str	r3, [r5, #0]
 8000bda:	682b      	ldr	r3, [r5, #0]
 8000bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000be0:	602b      	str	r3, [r5, #0]
 8000be2:	e7e4      	b.n	8000bae <HAL_RCC_OscConfig+0x82>
 8000be4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000be8:	602b      	str	r3, [r5, #0]
 8000bea:	682b      	ldr	r3, [r5, #0]
 8000bec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bf0:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000bf2:	2a00      	cmp	r2, #0
 8000bf4:	d1db      	bne.n	8000bae <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8000bf6:	f001 fe95 	bl	8002924 <HAL_GetTick>
 8000bfa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bfc:	682b      	ldr	r3, [r5, #0]
 8000bfe:	039b      	lsls	r3, r3, #14
 8000c00:	d59a      	bpl.n	8000b38 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c02:	f001 fe8f 	bl	8002924 <HAL_GetTick>
 8000c06:	1b80      	subs	r0, r0, r6
 8000c08:	2864      	cmp	r0, #100	; 0x64
 8000c0a:	d9f7      	bls.n	8000bfc <HAL_RCC_OscConfig+0xd0>
 8000c0c:	e7db      	b.n	8000bc6 <HAL_RCC_OscConfig+0x9a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8000c0e:	4b6a      	ldr	r3, [pc, #424]	; (8000db8 <HAL_RCC_OscConfig+0x28c>)
 8000c10:	689a      	ldr	r2, [r3, #8]
 8000c12:	f012 0f0c 	tst.w	r2, #12
 8000c16:	d010      	beq.n	8000c3a <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000c18:	689a      	ldr	r2, [r3, #8]
 8000c1a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8000c1e:	2a08      	cmp	r2, #8
 8000c20:	d102      	bne.n	8000c28 <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	025f      	lsls	r7, r3, #9
 8000c26:	d508      	bpl.n	8000c3a <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c28:	4a63      	ldr	r2, [pc, #396]	; (8000db8 <HAL_RCC_OscConfig+0x28c>)
 8000c2a:	6893      	ldr	r3, [r2, #8]
 8000c2c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000c30:	2b0c      	cmp	r3, #12
 8000c32:	d111      	bne.n	8000c58 <HAL_RCC_OscConfig+0x12c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c34:	6853      	ldr	r3, [r2, #4]
 8000c36:	025e      	lsls	r6, r3, #9
 8000c38:	d40e      	bmi.n	8000c58 <HAL_RCC_OscConfig+0x12c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c3a:	4b5f      	ldr	r3, [pc, #380]	; (8000db8 <HAL_RCC_OscConfig+0x28c>)
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	0795      	lsls	r5, r2, #30
 8000c40:	d502      	bpl.n	8000c48 <HAL_RCC_OscConfig+0x11c>
 8000c42:	68e2      	ldr	r2, [r4, #12]
 8000c44:	2a01      	cmp	r2, #1
 8000c46:	d1a6      	bne.n	8000b96 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	6921      	ldr	r1, [r4, #16]
 8000c4c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000c50:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000c54:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c56:	e772      	b.n	8000b3e <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000c58:	68e2      	ldr	r2, [r4, #12]
 8000c5a:	4b58      	ldr	r3, [pc, #352]	; (8000dbc <HAL_RCC_OscConfig+0x290>)
 8000c5c:	b1b2      	cbz	r2, 8000c8c <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_ENABLE();
 8000c5e:	2201      	movs	r2, #1
 8000c60:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000c62:	f001 fe5f 	bl	8002924 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c66:	4d54      	ldr	r5, [pc, #336]	; (8000db8 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8000c68:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c6a:	682b      	ldr	r3, [r5, #0]
 8000c6c:	0798      	lsls	r0, r3, #30
 8000c6e:	d507      	bpl.n	8000c80 <HAL_RCC_OscConfig+0x154>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c70:	682b      	ldr	r3, [r5, #0]
 8000c72:	6922      	ldr	r2, [r4, #16]
 8000c74:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000c78:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000c7c:	602b      	str	r3, [r5, #0]
 8000c7e:	e75e      	b.n	8000b3e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c80:	f001 fe50 	bl	8002924 <HAL_GetTick>
 8000c84:	1b80      	subs	r0, r0, r6
 8000c86:	2802      	cmp	r0, #2
 8000c88:	d9ef      	bls.n	8000c6a <HAL_RCC_OscConfig+0x13e>
 8000c8a:	e79c      	b.n	8000bc6 <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_HSI_DISABLE();
 8000c8c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000c8e:	f001 fe49 	bl	8002924 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c92:	4d49      	ldr	r5, [pc, #292]	; (8000db8 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8000c94:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c96:	682b      	ldr	r3, [r5, #0]
 8000c98:	0799      	lsls	r1, r3, #30
 8000c9a:	f57f af50 	bpl.w	8000b3e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c9e:	f001 fe41 	bl	8002924 <HAL_GetTick>
 8000ca2:	1b80      	subs	r0, r0, r6
 8000ca4:	2802      	cmp	r0, #2
 8000ca6:	d9f6      	bls.n	8000c96 <HAL_RCC_OscConfig+0x16a>
 8000ca8:	e78d      	b.n	8000bc6 <HAL_RCC_OscConfig+0x9a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000caa:	6962      	ldr	r2, [r4, #20]
 8000cac:	4b44      	ldr	r3, [pc, #272]	; (8000dc0 <HAL_RCC_OscConfig+0x294>)
 8000cae:	b17a      	cbz	r2, 8000cd0 <HAL_RCC_OscConfig+0x1a4>
      __HAL_RCC_LSI_ENABLE();
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000cb4:	f001 fe36 	bl	8002924 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cb8:	4d3f      	ldr	r5, [pc, #252]	; (8000db8 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8000cba:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cbc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000cbe:	079f      	lsls	r7, r3, #30
 8000cc0:	f53f af41 	bmi.w	8000b46 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000cc4:	f001 fe2e 	bl	8002924 <HAL_GetTick>
 8000cc8:	1b80      	subs	r0, r0, r6
 8000cca:	2802      	cmp	r0, #2
 8000ccc:	d9f6      	bls.n	8000cbc <HAL_RCC_OscConfig+0x190>
 8000cce:	e77a      	b.n	8000bc6 <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_LSI_DISABLE();
 8000cd0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000cd2:	f001 fe27 	bl	8002924 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cd6:	4d38      	ldr	r5, [pc, #224]	; (8000db8 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8000cd8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cda:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000cdc:	0798      	lsls	r0, r3, #30
 8000cde:	f57f af32 	bpl.w	8000b46 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ce2:	f001 fe1f 	bl	8002924 <HAL_GetTick>
 8000ce6:	1b80      	subs	r0, r0, r6
 8000ce8:	2802      	cmp	r0, #2
 8000cea:	d9f6      	bls.n	8000cda <HAL_RCC_OscConfig+0x1ae>
 8000cec:	e76b      	b.n	8000bc6 <HAL_RCC_OscConfig+0x9a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cee:	4b32      	ldr	r3, [pc, #200]	; (8000db8 <HAL_RCC_OscConfig+0x28c>)
 8000cf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cf2:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000cf6:	d128      	bne.n	8000d4a <HAL_RCC_OscConfig+0x21e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000cf8:	9201      	str	r2, [sp, #4]
 8000cfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cfc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d00:	641a      	str	r2, [r3, #64]	; 0x40
 8000d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d08:	9301      	str	r3, [sp, #4]
 8000d0a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000d0c:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d0e:	4d2d      	ldr	r5, [pc, #180]	; (8000dc4 <HAL_RCC_OscConfig+0x298>)
 8000d10:	682b      	ldr	r3, [r5, #0]
 8000d12:	05d9      	lsls	r1, r3, #23
 8000d14:	d51b      	bpl.n	8000d4e <HAL_RCC_OscConfig+0x222>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d16:	68a3      	ldr	r3, [r4, #8]
 8000d18:	4d27      	ldr	r5, [pc, #156]	; (8000db8 <HAL_RCC_OscConfig+0x28c>)
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d127      	bne.n	8000d6e <HAL_RCC_OscConfig+0x242>
 8000d1e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000d26:	f001 fdfd 	bl	8002924 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d2a:	4d23      	ldr	r5, [pc, #140]	; (8000db8 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8000d2c:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d2e:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d32:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000d34:	079b      	lsls	r3, r3, #30
 8000d36:	d539      	bpl.n	8000dac <HAL_RCC_OscConfig+0x280>
    if(pwrclkchanged == SET)
 8000d38:	2e00      	cmp	r6, #0
 8000d3a:	f43f af08 	beq.w	8000b4e <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d3e:	4a1e      	ldr	r2, [pc, #120]	; (8000db8 <HAL_RCC_OscConfig+0x28c>)
 8000d40:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000d42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d46:	6413      	str	r3, [r2, #64]	; 0x40
 8000d48:	e701      	b.n	8000b4e <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000d4a:	2600      	movs	r6, #0
 8000d4c:	e7df      	b.n	8000d0e <HAL_RCC_OscConfig+0x1e2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d4e:	682b      	ldr	r3, [r5, #0]
 8000d50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d54:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000d56:	f001 fde5 	bl	8002924 <HAL_GetTick>
 8000d5a:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d5c:	682b      	ldr	r3, [r5, #0]
 8000d5e:	05da      	lsls	r2, r3, #23
 8000d60:	d4d9      	bmi.n	8000d16 <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d62:	f001 fddf 	bl	8002924 <HAL_GetTick>
 8000d66:	1bc0      	subs	r0, r0, r7
 8000d68:	2802      	cmp	r0, #2
 8000d6a:	d9f7      	bls.n	8000d5c <HAL_RCC_OscConfig+0x230>
 8000d6c:	e72b      	b.n	8000bc6 <HAL_RCC_OscConfig+0x9a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d6e:	2b05      	cmp	r3, #5
 8000d70:	d104      	bne.n	8000d7c <HAL_RCC_OscConfig+0x250>
 8000d72:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000d74:	f043 0304 	orr.w	r3, r3, #4
 8000d78:	672b      	str	r3, [r5, #112]	; 0x70
 8000d7a:	e7d0      	b.n	8000d1e <HAL_RCC_OscConfig+0x1f2>
 8000d7c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000d7e:	f022 0201 	bic.w	r2, r2, #1
 8000d82:	672a      	str	r2, [r5, #112]	; 0x70
 8000d84:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000d86:	f022 0204 	bic.w	r2, r2, #4
 8000d8a:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d1ca      	bne.n	8000d26 <HAL_RCC_OscConfig+0x1fa>
      tickstart = HAL_GetTick();
 8000d90:	f001 fdc8 	bl	8002924 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d94:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000d98:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d9a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000d9c:	0798      	lsls	r0, r3, #30
 8000d9e:	d5cb      	bpl.n	8000d38 <HAL_RCC_OscConfig+0x20c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000da0:	f001 fdc0 	bl	8002924 <HAL_GetTick>
 8000da4:	1bc0      	subs	r0, r0, r7
 8000da6:	4540      	cmp	r0, r8
 8000da8:	d9f7      	bls.n	8000d9a <HAL_RCC_OscConfig+0x26e>
 8000daa:	e70c      	b.n	8000bc6 <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000dac:	f001 fdba 	bl	8002924 <HAL_GetTick>
 8000db0:	1bc0      	subs	r0, r0, r7
 8000db2:	4540      	cmp	r0, r8
 8000db4:	d9bd      	bls.n	8000d32 <HAL_RCC_OscConfig+0x206>
 8000db6:	e706      	b.n	8000bc6 <HAL_RCC_OscConfig+0x9a>
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	42470000 	.word	0x42470000
 8000dc0:	42470e80 	.word	0x42470e80
 8000dc4:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000dc8:	4d23      	ldr	r5, [pc, #140]	; (8000e58 <HAL_RCC_OscConfig+0x32c>)
 8000dca:	68ab      	ldr	r3, [r5, #8]
 8000dcc:	f003 030c 	and.w	r3, r3, #12
 8000dd0:	2b08      	cmp	r3, #8
 8000dd2:	f43f aee0 	beq.w	8000b96 <HAL_RCC_OscConfig+0x6a>
 8000dd6:	4e21      	ldr	r6, [pc, #132]	; (8000e5c <HAL_RCC_OscConfig+0x330>)
 8000dd8:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000dda:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000ddc:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000dde:	d12d      	bne.n	8000e3c <HAL_RCC_OscConfig+0x310>
        tickstart = HAL_GetTick();
 8000de0:	f001 fda0 	bl	8002924 <HAL_GetTick>
 8000de4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000de6:	682b      	ldr	r3, [r5, #0]
 8000de8:	0199      	lsls	r1, r3, #6
 8000dea:	d421      	bmi.n	8000e30 <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000dec:	6a22      	ldr	r2, [r4, #32]
 8000dee:	69e3      	ldr	r3, [r4, #28]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000df4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000df8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000dfa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000dfe:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000e00:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8000e04:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e06:	4c14      	ldr	r4, [pc, #80]	; (8000e58 <HAL_RCC_OscConfig+0x32c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e08:	0852      	lsrs	r2, r2, #1
 8000e0a:	3a01      	subs	r2, #1
 8000e0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e10:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000e12:	2301      	movs	r3, #1
 8000e14:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000e16:	f001 fd85 	bl	8002924 <HAL_GetTick>
 8000e1a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e1c:	6823      	ldr	r3, [r4, #0]
 8000e1e:	019a      	lsls	r2, r3, #6
 8000e20:	f53f ae99 	bmi.w	8000b56 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e24:	f001 fd7e 	bl	8002924 <HAL_GetTick>
 8000e28:	1b40      	subs	r0, r0, r5
 8000e2a:	2802      	cmp	r0, #2
 8000e2c:	d9f6      	bls.n	8000e1c <HAL_RCC_OscConfig+0x2f0>
 8000e2e:	e6ca      	b.n	8000bc6 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e30:	f001 fd78 	bl	8002924 <HAL_GetTick>
 8000e34:	1bc0      	subs	r0, r0, r7
 8000e36:	2802      	cmp	r0, #2
 8000e38:	d9d5      	bls.n	8000de6 <HAL_RCC_OscConfig+0x2ba>
 8000e3a:	e6c4      	b.n	8000bc6 <HAL_RCC_OscConfig+0x9a>
        tickstart = HAL_GetTick();
 8000e3c:	f001 fd72 	bl	8002924 <HAL_GetTick>
 8000e40:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e42:	682b      	ldr	r3, [r5, #0]
 8000e44:	019b      	lsls	r3, r3, #6
 8000e46:	f57f ae86 	bpl.w	8000b56 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e4a:	f001 fd6b 	bl	8002924 <HAL_GetTick>
 8000e4e:	1b00      	subs	r0, r0, r4
 8000e50:	2802      	cmp	r0, #2
 8000e52:	d9f6      	bls.n	8000e42 <HAL_RCC_OscConfig+0x316>
 8000e54:	e6b7      	b.n	8000bc6 <HAL_RCC_OscConfig+0x9a>
 8000e56:	bf00      	nop
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	42470060 	.word	0x42470060

08000e60 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000e60:	6803      	ldr	r3, [r0, #0]
 8000e62:	68da      	ldr	r2, [r3, #12]
 8000e64:	f042 0201 	orr.w	r2, r2, #1
 8000e68:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000e6a:	689a      	ldr	r2, [r3, #8]
 8000e6c:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000e70:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 8000e72:	bf1e      	ittt	ne
 8000e74:	681a      	ldrne	r2, [r3, #0]
 8000e76:	f042 0201 	orrne.w	r2, r2, #1
 8000e7a:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8000e7c:	2000      	movs	r0, #0
 8000e7e:	4770      	bx	lr

08000e80 <HAL_TIM_OC_DelayElapsedCallback>:
 8000e80:	4770      	bx	lr

08000e82 <HAL_TIM_IC_CaptureCallback>:
 8000e82:	4770      	bx	lr

08000e84 <HAL_TIM_PWM_PulseFinishedCallback>:
 8000e84:	4770      	bx	lr

08000e86 <HAL_TIM_TriggerCallback>:
 8000e86:	4770      	bx	lr

08000e88 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000e88:	6803      	ldr	r3, [r0, #0]
 8000e8a:	691a      	ldr	r2, [r3, #16]
 8000e8c:	0791      	lsls	r1, r2, #30
{
 8000e8e:	b510      	push	{r4, lr}
 8000e90:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000e92:	d50e      	bpl.n	8000eb2 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8000e94:	68da      	ldr	r2, [r3, #12]
 8000e96:	0792      	lsls	r2, r2, #30
 8000e98:	d50b      	bpl.n	8000eb2 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000e9a:	f06f 0202 	mvn.w	r2, #2
 8000e9e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000ea0:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000ea2:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000ea4:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000ea6:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000ea8:	d077      	beq.n	8000f9a <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8000eaa:	f7ff ffea 	bl	8000e82 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000eb2:	6823      	ldr	r3, [r4, #0]
 8000eb4:	691a      	ldr	r2, [r3, #16]
 8000eb6:	0750      	lsls	r0, r2, #29
 8000eb8:	d510      	bpl.n	8000edc <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8000eba:	68da      	ldr	r2, [r3, #12]
 8000ebc:	0751      	lsls	r1, r2, #29
 8000ebe:	d50d      	bpl.n	8000edc <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000ec0:	f06f 0204 	mvn.w	r2, #4
 8000ec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000ec6:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000ec8:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000eca:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000ece:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000ed0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000ed2:	d068      	beq.n	8000fa6 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8000ed4:	f7ff ffd5 	bl	8000e82 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000edc:	6823      	ldr	r3, [r4, #0]
 8000ede:	691a      	ldr	r2, [r3, #16]
 8000ee0:	0712      	lsls	r2, r2, #28
 8000ee2:	d50f      	bpl.n	8000f04 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8000ee4:	68da      	ldr	r2, [r3, #12]
 8000ee6:	0710      	lsls	r0, r2, #28
 8000ee8:	d50c      	bpl.n	8000f04 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000eea:	f06f 0208 	mvn.w	r2, #8
 8000eee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000ef0:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000ef2:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000ef4:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000ef6:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000ef8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000efa:	d05a      	beq.n	8000fb2 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000efc:	f7ff ffc1 	bl	8000e82 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000f00:	2300      	movs	r3, #0
 8000f02:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000f04:	6823      	ldr	r3, [r4, #0]
 8000f06:	691a      	ldr	r2, [r3, #16]
 8000f08:	06d2      	lsls	r2, r2, #27
 8000f0a:	d510      	bpl.n	8000f2e <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8000f0c:	68da      	ldr	r2, [r3, #12]
 8000f0e:	06d0      	lsls	r0, r2, #27
 8000f10:	d50d      	bpl.n	8000f2e <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000f12:	f06f 0210 	mvn.w	r2, #16
 8000f16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000f18:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000f1a:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000f1c:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000f20:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000f22:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000f24:	d04b      	beq.n	8000fbe <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8000f26:	f7ff ffac 	bl	8000e82 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000f2e:	6823      	ldr	r3, [r4, #0]
 8000f30:	691a      	ldr	r2, [r3, #16]
 8000f32:	07d1      	lsls	r1, r2, #31
 8000f34:	d508      	bpl.n	8000f48 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8000f36:	68da      	ldr	r2, [r3, #12]
 8000f38:	07d2      	lsls	r2, r2, #31
 8000f3a:	d505      	bpl.n	8000f48 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000f3c:	f06f 0201 	mvn.w	r2, #1
 8000f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8000f42:	4620      	mov	r0, r4
 8000f44:	f001 fb6c 	bl	8002620 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000f48:	6823      	ldr	r3, [r4, #0]
 8000f4a:	691a      	ldr	r2, [r3, #16]
 8000f4c:	0610      	lsls	r0, r2, #24
 8000f4e:	d508      	bpl.n	8000f62 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8000f50:	68da      	ldr	r2, [r3, #12]
 8000f52:	0611      	lsls	r1, r2, #24
 8000f54:	d505      	bpl.n	8000f62 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000f56:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000f5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8000f5c:	4620      	mov	r0, r4
 8000f5e:	f000 f8d4 	bl	800110a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000f62:	6823      	ldr	r3, [r4, #0]
 8000f64:	691a      	ldr	r2, [r3, #16]
 8000f66:	0652      	lsls	r2, r2, #25
 8000f68:	d508      	bpl.n	8000f7c <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8000f6a:	68da      	ldr	r2, [r3, #12]
 8000f6c:	0650      	lsls	r0, r2, #25
 8000f6e:	d505      	bpl.n	8000f7c <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000f70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8000f76:	4620      	mov	r0, r4
 8000f78:	f7ff ff85 	bl	8000e86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000f7c:	6823      	ldr	r3, [r4, #0]
 8000f7e:	691a      	ldr	r2, [r3, #16]
 8000f80:	0691      	lsls	r1, r2, #26
 8000f82:	d522      	bpl.n	8000fca <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8000f84:	68da      	ldr	r2, [r3, #12]
 8000f86:	0692      	lsls	r2, r2, #26
 8000f88:	d51f      	bpl.n	8000fca <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000f8a:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8000f8e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000f90:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8000f92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8000f96:	f000 b8b7 	b.w	8001108 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000f9a:	f7ff ff71 	bl	8000e80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000f9e:	4620      	mov	r0, r4
 8000fa0:	f7ff ff70 	bl	8000e84 <HAL_TIM_PWM_PulseFinishedCallback>
 8000fa4:	e783      	b.n	8000eae <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000fa6:	f7ff ff6b 	bl	8000e80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000faa:	4620      	mov	r0, r4
 8000fac:	f7ff ff6a 	bl	8000e84 <HAL_TIM_PWM_PulseFinishedCallback>
 8000fb0:	e792      	b.n	8000ed8 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000fb2:	f7ff ff65 	bl	8000e80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000fb6:	4620      	mov	r0, r4
 8000fb8:	f7ff ff64 	bl	8000e84 <HAL_TIM_PWM_PulseFinishedCallback>
 8000fbc:	e7a0      	b.n	8000f00 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000fbe:	f7ff ff5f 	bl	8000e80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000fc2:	4620      	mov	r0, r4
 8000fc4:	f7ff ff5e 	bl	8000e84 <HAL_TIM_PWM_PulseFinishedCallback>
 8000fc8:	e7af      	b.n	8000f2a <HAL_TIM_IRQHandler+0xa2>
 8000fca:	bd10      	pop	{r4, pc}

08000fcc <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000fcc:	4a30      	ldr	r2, [pc, #192]	; (8001090 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8000fce:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000fd0:	4290      	cmp	r0, r2
 8000fd2:	d012      	beq.n	8000ffa <TIM_Base_SetConfig+0x2e>
 8000fd4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000fd8:	d00f      	beq.n	8000ffa <TIM_Base_SetConfig+0x2e>
 8000fda:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000fde:	4290      	cmp	r0, r2
 8000fe0:	d00b      	beq.n	8000ffa <TIM_Base_SetConfig+0x2e>
 8000fe2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000fe6:	4290      	cmp	r0, r2
 8000fe8:	d007      	beq.n	8000ffa <TIM_Base_SetConfig+0x2e>
 8000fea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000fee:	4290      	cmp	r0, r2
 8000ff0:	d003      	beq.n	8000ffa <TIM_Base_SetConfig+0x2e>
 8000ff2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000ff6:	4290      	cmp	r0, r2
 8000ff8:	d119      	bne.n	800102e <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000ffa:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000ffc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001000:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001002:	4a23      	ldr	r2, [pc, #140]	; (8001090 <TIM_Base_SetConfig+0xc4>)
 8001004:	4290      	cmp	r0, r2
 8001006:	d029      	beq.n	800105c <TIM_Base_SetConfig+0x90>
 8001008:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800100c:	d026      	beq.n	800105c <TIM_Base_SetConfig+0x90>
 800100e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001012:	4290      	cmp	r0, r2
 8001014:	d022      	beq.n	800105c <TIM_Base_SetConfig+0x90>
 8001016:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800101a:	4290      	cmp	r0, r2
 800101c:	d01e      	beq.n	800105c <TIM_Base_SetConfig+0x90>
 800101e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001022:	4290      	cmp	r0, r2
 8001024:	d01a      	beq.n	800105c <TIM_Base_SetConfig+0x90>
 8001026:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800102a:	4290      	cmp	r0, r2
 800102c:	d016      	beq.n	800105c <TIM_Base_SetConfig+0x90>
 800102e:	4a19      	ldr	r2, [pc, #100]	; (8001094 <TIM_Base_SetConfig+0xc8>)
 8001030:	4290      	cmp	r0, r2
 8001032:	d013      	beq.n	800105c <TIM_Base_SetConfig+0x90>
 8001034:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001038:	4290      	cmp	r0, r2
 800103a:	d00f      	beq.n	800105c <TIM_Base_SetConfig+0x90>
 800103c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001040:	4290      	cmp	r0, r2
 8001042:	d00b      	beq.n	800105c <TIM_Base_SetConfig+0x90>
 8001044:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001048:	4290      	cmp	r0, r2
 800104a:	d007      	beq.n	800105c <TIM_Base_SetConfig+0x90>
 800104c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001050:	4290      	cmp	r0, r2
 8001052:	d003      	beq.n	800105c <TIM_Base_SetConfig+0x90>
 8001054:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001058:	4290      	cmp	r0, r2
 800105a:	d103      	bne.n	8001064 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800105c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800105e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001062:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001064:	694a      	ldr	r2, [r1, #20]
 8001066:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800106a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800106c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800106e:	688b      	ldr	r3, [r1, #8]
 8001070:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001072:	680b      	ldr	r3, [r1, #0]
 8001074:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001076:	4b06      	ldr	r3, [pc, #24]	; (8001090 <TIM_Base_SetConfig+0xc4>)
 8001078:	4298      	cmp	r0, r3
 800107a:	d003      	beq.n	8001084 <TIM_Base_SetConfig+0xb8>
 800107c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001080:	4298      	cmp	r0, r3
 8001082:	d101      	bne.n	8001088 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001084:	690b      	ldr	r3, [r1, #16]
 8001086:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001088:	2301      	movs	r3, #1
 800108a:	6143      	str	r3, [r0, #20]
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	40010000 	.word	0x40010000
 8001094:	40014000 	.word	0x40014000

08001098 <HAL_TIM_Base_Init>:
{
 8001098:	b510      	push	{r4, lr}
  if (htim == NULL)
 800109a:	4604      	mov	r4, r0
 800109c:	b1a0      	cbz	r0, 80010c8 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800109e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80010a2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80010a6:	b91b      	cbnz	r3, 80010b0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80010a8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80010ac:	f001 faf8 	bl	80026a0 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80010b0:	2302      	movs	r3, #2
 80010b2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80010b6:	6820      	ldr	r0, [r4, #0]
 80010b8:	1d21      	adds	r1, r4, #4
 80010ba:	f7ff ff87 	bl	8000fcc <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80010be:	2301      	movs	r3, #1
 80010c0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80010c4:	2000      	movs	r0, #0
 80010c6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80010c8:	2001      	movs	r0, #1
}
 80010ca:	bd10      	pop	{r4, pc}

080010cc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80010cc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80010d0:	2b01      	cmp	r3, #1
{
 80010d2:	b530      	push	{r4, r5, lr}
 80010d4:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80010d8:	d014      	beq.n	8001104 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80010da:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80010dc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80010e0:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80010e2:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80010e4:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80010e6:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 80010e8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 80010ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80010f0:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80010f2:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80010f4:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80010f6:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80010f8:	2301      	movs	r3, #1
 80010fa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80010fe:	2300      	movs	r3, #0
 8001100:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001104:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001106:	bd30      	pop	{r4, r5, pc}

08001108 <HAL_TIMEx_CommutCallback>:
 8001108:	4770      	bx	lr

0800110a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800110a:	4770      	bx	lr

0800110c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800110c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001110:	6806      	ldr	r6, [r0, #0]
 8001112:	68c2      	ldr	r2, [r0, #12]
 8001114:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001116:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001118:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800111c:	4313      	orrs	r3, r2
 800111e:	6133      	str	r3, [r6, #16]
{
 8001120:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001122:	6883      	ldr	r3, [r0, #8]
 8001124:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8001126:	68f2      	ldr	r2, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001128:	4303      	orrs	r3, r0
 800112a:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 800112c:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001130:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8001132:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001136:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1,
 8001138:	4313      	orrs	r3, r2
 800113a:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800113c:	6973      	ldr	r3, [r6, #20]
 800113e:	69a2      	ldr	r2, [r4, #24]
 8001140:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001144:	4313      	orrs	r3, r2

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001146:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800114a:	6173      	str	r3, [r6, #20]
 800114c:	4b7a      	ldr	r3, [pc, #488]	; (8001338 <UART_SetConfig+0x22c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800114e:	d17c      	bne.n	800124a <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001150:	429e      	cmp	r6, r3
 8001152:	d003      	beq.n	800115c <UART_SetConfig+0x50>
 8001154:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001158:	429e      	cmp	r6, r3
 800115a:	d144      	bne.n	80011e6 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800115c:	f7ff fc70 	bl	8000a40 <HAL_RCC_GetPCLK2Freq>
 8001160:	2519      	movs	r5, #25
 8001162:	fb05 f300 	mul.w	r3, r5, r0
 8001166:	6860      	ldr	r0, [r4, #4]
 8001168:	f04f 0964 	mov.w	r9, #100	; 0x64
 800116c:	0040      	lsls	r0, r0, #1
 800116e:	fbb3 f3f0 	udiv	r3, r3, r0
 8001172:	fbb3 f3f9 	udiv	r3, r3, r9
 8001176:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800117a:	f7ff fc61 	bl	8000a40 <HAL_RCC_GetPCLK2Freq>
 800117e:	6863      	ldr	r3, [r4, #4]
 8001180:	4368      	muls	r0, r5
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	fbb0 f7f3 	udiv	r7, r0, r3
 8001188:	f7ff fc5a 	bl	8000a40 <HAL_RCC_GetPCLK2Freq>
 800118c:	6863      	ldr	r3, [r4, #4]
 800118e:	4368      	muls	r0, r5
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	fbb0 f3f3 	udiv	r3, r0, r3
 8001196:	fbb3 f3f9 	udiv	r3, r3, r9
 800119a:	fb09 7313 	mls	r3, r9, r3, r7
 800119e:	00db      	lsls	r3, r3, #3
 80011a0:	3332      	adds	r3, #50	; 0x32
 80011a2:	fbb3 f3f9 	udiv	r3, r3, r9
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80011ac:	f7ff fc48 	bl	8000a40 <HAL_RCC_GetPCLK2Freq>
 80011b0:	6862      	ldr	r2, [r4, #4]
 80011b2:	4368      	muls	r0, r5
 80011b4:	0052      	lsls	r2, r2, #1
 80011b6:	fbb0 faf2 	udiv	sl, r0, r2
 80011ba:	f7ff fc41 	bl	8000a40 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80011be:	6863      	ldr	r3, [r4, #4]
 80011c0:	4368      	muls	r0, r5
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80011c8:	fbb3 f3f9 	udiv	r3, r3, r9
 80011cc:	fb09 a313 	mls	r3, r9, r3, sl
 80011d0:	00db      	lsls	r3, r3, #3
 80011d2:	3332      	adds	r3, #50	; 0x32
 80011d4:	fbb3 f3f9 	udiv	r3, r3, r9
 80011d8:	f003 0307 	and.w	r3, r3, #7
 80011dc:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80011de:	443b      	add	r3, r7
 80011e0:	60b3      	str	r3, [r6, #8]
 80011e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80011e6:	f7ff fc1b 	bl	8000a20 <HAL_RCC_GetPCLK1Freq>
 80011ea:	2519      	movs	r5, #25
 80011ec:	fb05 f300 	mul.w	r3, r5, r0
 80011f0:	6860      	ldr	r0, [r4, #4]
 80011f2:	f04f 0964 	mov.w	r9, #100	; 0x64
 80011f6:	0040      	lsls	r0, r0, #1
 80011f8:	fbb3 f3f0 	udiv	r3, r3, r0
 80011fc:	fbb3 f3f9 	udiv	r3, r3, r9
 8001200:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001204:	f7ff fc0c 	bl	8000a20 <HAL_RCC_GetPCLK1Freq>
 8001208:	6863      	ldr	r3, [r4, #4]
 800120a:	4368      	muls	r0, r5
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	fbb0 f7f3 	udiv	r7, r0, r3
 8001212:	f7ff fc05 	bl	8000a20 <HAL_RCC_GetPCLK1Freq>
 8001216:	6863      	ldr	r3, [r4, #4]
 8001218:	4368      	muls	r0, r5
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001220:	fbb3 f3f9 	udiv	r3, r3, r9
 8001224:	fb09 7313 	mls	r3, r9, r3, r7
 8001228:	00db      	lsls	r3, r3, #3
 800122a:	3332      	adds	r3, #50	; 0x32
 800122c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001236:	f7ff fbf3 	bl	8000a20 <HAL_RCC_GetPCLK1Freq>
 800123a:	6862      	ldr	r2, [r4, #4]
 800123c:	4368      	muls	r0, r5
 800123e:	0052      	lsls	r2, r2, #1
 8001240:	fbb0 faf2 	udiv	sl, r0, r2
 8001244:	f7ff fbec 	bl	8000a20 <HAL_RCC_GetPCLK1Freq>
 8001248:	e7b9      	b.n	80011be <UART_SetConfig+0xb2>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800124a:	429e      	cmp	r6, r3
 800124c:	d002      	beq.n	8001254 <UART_SetConfig+0x148>
 800124e:	4b3b      	ldr	r3, [pc, #236]	; (800133c <UART_SetConfig+0x230>)
 8001250:	429e      	cmp	r6, r3
 8001252:	d140      	bne.n	80012d6 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001254:	f7ff fbf4 	bl	8000a40 <HAL_RCC_GetPCLK2Freq>
 8001258:	6867      	ldr	r7, [r4, #4]
 800125a:	2519      	movs	r5, #25
 800125c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001260:	fb05 f300 	mul.w	r3, r5, r0
 8001264:	00bf      	lsls	r7, r7, #2
 8001266:	fbb3 f3f7 	udiv	r3, r3, r7
 800126a:	fbb3 f3f9 	udiv	r3, r3, r9
 800126e:	011f      	lsls	r7, r3, #4
 8001270:	f7ff fbe6 	bl	8000a40 <HAL_RCC_GetPCLK2Freq>
 8001274:	6863      	ldr	r3, [r4, #4]
 8001276:	4368      	muls	r0, r5
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	fbb0 f8f3 	udiv	r8, r0, r3
 800127e:	f7ff fbdf 	bl	8000a40 <HAL_RCC_GetPCLK2Freq>
 8001282:	6863      	ldr	r3, [r4, #4]
 8001284:	4368      	muls	r0, r5
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	fbb0 f3f3 	udiv	r3, r0, r3
 800128c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001290:	fb09 8313 	mls	r3, r9, r3, r8
 8001294:	011b      	lsls	r3, r3, #4
 8001296:	3332      	adds	r3, #50	; 0x32
 8001298:	fbb3 f3f9 	udiv	r3, r3, r9
 800129c:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80012a0:	f7ff fbce 	bl	8000a40 <HAL_RCC_GetPCLK2Freq>
 80012a4:	6862      	ldr	r2, [r4, #4]
 80012a6:	4368      	muls	r0, r5
 80012a8:	0092      	lsls	r2, r2, #2
 80012aa:	fbb0 faf2 	udiv	sl, r0, r2
 80012ae:	f7ff fbc7 	bl	8000a40 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80012b2:	6863      	ldr	r3, [r4, #4]
 80012b4:	4368      	muls	r0, r5
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80012bc:	fbb3 f3f9 	udiv	r3, r3, r9
 80012c0:	fb09 a313 	mls	r3, r9, r3, sl
 80012c4:	011b      	lsls	r3, r3, #4
 80012c6:	3332      	adds	r3, #50	; 0x32
 80012c8:	fbb3 f3f9 	udiv	r3, r3, r9
 80012cc:	f003 030f 	and.w	r3, r3, #15
 80012d0:	ea43 0308 	orr.w	r3, r3, r8
 80012d4:	e783      	b.n	80011de <UART_SetConfig+0xd2>
 80012d6:	f7ff fba3 	bl	8000a20 <HAL_RCC_GetPCLK1Freq>
 80012da:	6867      	ldr	r7, [r4, #4]
 80012dc:	2519      	movs	r5, #25
 80012de:	f04f 0964 	mov.w	r9, #100	; 0x64
 80012e2:	fb05 f300 	mul.w	r3, r5, r0
 80012e6:	00bf      	lsls	r7, r7, #2
 80012e8:	fbb3 f3f7 	udiv	r3, r3, r7
 80012ec:	fbb3 f3f9 	udiv	r3, r3, r9
 80012f0:	011f      	lsls	r7, r3, #4
 80012f2:	f7ff fb95 	bl	8000a20 <HAL_RCC_GetPCLK1Freq>
 80012f6:	6863      	ldr	r3, [r4, #4]
 80012f8:	4368      	muls	r0, r5
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	fbb0 f8f3 	udiv	r8, r0, r3
 8001300:	f7ff fb8e 	bl	8000a20 <HAL_RCC_GetPCLK1Freq>
 8001304:	6863      	ldr	r3, [r4, #4]
 8001306:	4368      	muls	r0, r5
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	fbb0 f3f3 	udiv	r3, r0, r3
 800130e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001312:	fb09 8313 	mls	r3, r9, r3, r8
 8001316:	011b      	lsls	r3, r3, #4
 8001318:	3332      	adds	r3, #50	; 0x32
 800131a:	fbb3 f3f9 	udiv	r3, r3, r9
 800131e:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001322:	f7ff fb7d 	bl	8000a20 <HAL_RCC_GetPCLK1Freq>
 8001326:	6862      	ldr	r2, [r4, #4]
 8001328:	4368      	muls	r0, r5
 800132a:	0092      	lsls	r2, r2, #2
 800132c:	fbb0 faf2 	udiv	sl, r0, r2
 8001330:	f7ff fb76 	bl	8000a20 <HAL_RCC_GetPCLK1Freq>
 8001334:	e7bd      	b.n	80012b2 <UART_SetConfig+0x1a6>
 8001336:	bf00      	nop
 8001338:	40011000 	.word	0x40011000
 800133c:	40011400 	.word	0x40011400

08001340 <HAL_UART_Init>:
{
 8001340:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001342:	4604      	mov	r4, r0
 8001344:	b340      	cbz	r0, 8001398 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001346:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800134a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800134e:	b91b      	cbnz	r3, 8001358 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001350:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001354:	f001 f9c6 	bl	80026e4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001358:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800135a:	2324      	movs	r3, #36	; 0x24
 800135c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001360:	68d3      	ldr	r3, [r2, #12]
 8001362:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001366:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001368:	4620      	mov	r0, r4
 800136a:	f7ff fecf 	bl	800110c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800136e:	6823      	ldr	r3, [r4, #0]
 8001370:	691a      	ldr	r2, [r3, #16]
 8001372:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001376:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001378:	695a      	ldr	r2, [r3, #20]
 800137a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800137e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001380:	68da      	ldr	r2, [r3, #12]
 8001382:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001386:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001388:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800138a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800138c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800138e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001392:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001396:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001398:	2001      	movs	r0, #1
}
 800139a:	bd10      	pop	{r4, pc}

0800139c <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 800139c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80013a0:	2b20      	cmp	r3, #32
 80013a2:	d118      	bne.n	80013d6 <HAL_UART_Transmit_IT+0x3a>
    if ((pData == NULL) || (Size == 0U))
 80013a4:	b1a9      	cbz	r1, 80013d2 <HAL_UART_Transmit_IT+0x36>
 80013a6:	b1a2      	cbz	r2, 80013d2 <HAL_UART_Transmit_IT+0x36>
    __HAL_LOCK(huart);
 80013a8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d012      	beq.n	80013d6 <HAL_UART_Transmit_IT+0x3a>
    huart->TxXferCount = Size;
 80013b0:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->pTxBuffPtr = pData;
 80013b2:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 80013b4:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013b6:	2300      	movs	r3, #0
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80013b8:	6801      	ldr	r1, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013ba:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80013bc:	2221      	movs	r2, #33	; 0x21
 80013be:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80013c2:	68ca      	ldr	r2, [r1, #12]
    __HAL_UNLOCK(huart);
 80013c4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80013c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013cc:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 80013ce:	4618      	mov	r0, r3
 80013d0:	4770      	bx	lr
      return HAL_ERROR;
 80013d2:	2001      	movs	r0, #1
 80013d4:	4770      	bx	lr
    return HAL_BUSY;
 80013d6:	2002      	movs	r0, #2
}
 80013d8:	4770      	bx	lr

080013da <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80013da:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80013de:	2b20      	cmp	r3, #32
 80013e0:	d120      	bne.n	8001424 <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 80013e2:	b1e9      	cbz	r1, 8001420 <HAL_UART_Receive_IT+0x46>
 80013e4:	b1e2      	cbz	r2, 8001420 <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 80013e6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d01a      	beq.n	8001424 <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 80013ee:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 80013f0:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013f2:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80013f4:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013f6:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80013f8:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80013fc:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 80013fe:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001400:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 8001402:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001406:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800140a:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800140c:	6951      	ldr	r1, [r2, #20]
 800140e:	f041 0101 	orr.w	r1, r1, #1
 8001412:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001414:	68d1      	ldr	r1, [r2, #12]
 8001416:	f041 0120 	orr.w	r1, r1, #32
 800141a:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 800141c:	4618      	mov	r0, r3
 800141e:	4770      	bx	lr
      return HAL_ERROR;
 8001420:	2001      	movs	r0, #1
 8001422:	4770      	bx	lr
    return HAL_BUSY;
 8001424:	2002      	movs	r0, #2
}
 8001426:	4770      	bx	lr

08001428 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001428:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800142a:	f000 fa35 	bl	8001898 <vTaskStartScheduler>
  
  return osOK;
}
 800142e:	2000      	movs	r0, #0
 8001430:	bd08      	pop	{r3, pc}

08001432 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001432:	b570      	push	{r4, r5, r6, lr}
 8001434:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001436:	6946      	ldr	r6, [r0, #20]
 8001438:	692a      	ldr	r2, [r5, #16]
 800143a:	6840      	ldr	r0, [r0, #4]
 800143c:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
{
 8001440:	460b      	mov	r3, r1
 8001442:	b086      	sub	sp, #24
 8001444:	6829      	ldr	r1, [r5, #0]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001446:	b176      	cbz	r6, 8001466 <osThreadCreate+0x34>
 8001448:	69ad      	ldr	r5, [r5, #24]
 800144a:	b165      	cbz	r5, 8001466 <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 800144c:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 800144e:	bf14      	ite	ne
 8001450:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001452:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001454:	9502      	str	r5, [sp, #8]
 8001456:	e88d 0050 	stmia.w	sp, {r4, r6}
 800145a:	f000 f9b9 	bl	80017d0 <xTaskCreateStatic>
 800145e:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001460:	9805      	ldr	r0, [sp, #20]
}
 8001462:	b006      	add	sp, #24
 8001464:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 8001466:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8001468:	bf14      	ite	ne
 800146a:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800146c:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800146e:	ad05      	add	r5, sp, #20
 8001470:	b292      	uxth	r2, r2
 8001472:	e88d 0030 	stmia.w	sp, {r4, r5}
 8001476:	f000 f9e2 	bl	800183e <xTaskCreate>
 800147a:	2801      	cmp	r0, #1
 800147c:	d0f0      	beq.n	8001460 <osThreadCreate+0x2e>
      return NULL;
 800147e:	2000      	movs	r0, #0
 8001480:	e7ef      	b.n	8001462 <osThreadCreate+0x30>

08001482 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001482:	f100 0308 	add.w	r3, r0, #8
 8001486:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001488:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800148c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800148e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001490:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001492:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001494:	6003      	str	r3, [r0, #0]
 8001496:	4770      	bx	lr

08001498 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001498:	2300      	movs	r3, #0
 800149a:	6103      	str	r3, [r0, #16]
 800149c:	4770      	bx	lr

0800149e <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800149e:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80014a0:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80014a2:	689a      	ldr	r2, [r3, #8]
 80014a4:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80014aa:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80014ac:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80014ae:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80014b0:	3301      	adds	r3, #1
 80014b2:	6003      	str	r3, [r0, #0]
 80014b4:	4770      	bx	lr

080014b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80014b6:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80014b8:	1c53      	adds	r3, r2, #1
{
 80014ba:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 80014bc:	d10a      	bne.n	80014d4 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80014be:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80014c0:	685a      	ldr	r2, [r3, #4]
 80014c2:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80014c4:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80014c6:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80014c8:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80014ca:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80014cc:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80014ce:	3301      	adds	r3, #1
 80014d0:	6003      	str	r3, [r0, #0]
 80014d2:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80014d4:	f100 0308 	add.w	r3, r0, #8
 80014d8:	685c      	ldr	r4, [r3, #4]
 80014da:	6825      	ldr	r5, [r4, #0]
 80014dc:	42aa      	cmp	r2, r5
 80014de:	d3ef      	bcc.n	80014c0 <vListInsert+0xa>
 80014e0:	4623      	mov	r3, r4
 80014e2:	e7f9      	b.n	80014d8 <vListInsert+0x22>

080014e4 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80014e4:	6841      	ldr	r1, [r0, #4]
 80014e6:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80014e8:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80014ea:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80014ec:	6882      	ldr	r2, [r0, #8]
 80014ee:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80014f0:	6859      	ldr	r1, [r3, #4]
 80014f2:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80014f4:	bf08      	it	eq
 80014f6:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80014f8:	2200      	movs	r2, #0
 80014fa:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	3a01      	subs	r2, #1
 8001500:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001502:	6818      	ldr	r0, [r3, #0]
}
 8001504:	4770      	bx	lr
	...

08001508 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800150c:	4606      	mov	r6, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800150e:	f000 fbd1 	bl	8001cb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001512:	4b2d      	ldr	r3, [pc, #180]	; (80015c8 <prvAddNewTaskToReadyList+0xc0>)
		if( pxCurrentTCB == NULL )
 8001514:	4c2d      	ldr	r4, [pc, #180]	; (80015cc <prvAddNewTaskToReadyList+0xc4>)
		uxCurrentNumberOfTasks++;
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4f2d      	ldr	r7, [pc, #180]	; (80015d0 <prvAddNewTaskToReadyList+0xc8>)
 800151a:	3201      	adds	r2, #1
 800151c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800151e:	6825      	ldr	r5, [r4, #0]
 8001520:	2d00      	cmp	r5, #0
 8001522:	d145      	bne.n	80015b0 <prvAddNewTaskToReadyList+0xa8>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001524:	6026      	str	r6, [r4, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d11c      	bne.n	8001566 <prvAddNewTaskToReadyList+0x5e>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800152c:	1978      	adds	r0, r7, r5
 800152e:	3514      	adds	r5, #20
 8001530:	f7ff ffa7 	bl	8001482 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001534:	2d8c      	cmp	r5, #140	; 0x8c
 8001536:	d1f9      	bne.n	800152c <prvAddNewTaskToReadyList+0x24>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001538:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 80015fc <prvAddNewTaskToReadyList+0xf4>
	vListInitialise( &xDelayedTaskList2 );
 800153c:	4d25      	ldr	r5, [pc, #148]	; (80015d4 <prvAddNewTaskToReadyList+0xcc>)
	vListInitialise( &xDelayedTaskList1 );
 800153e:	4640      	mov	r0, r8
 8001540:	f7ff ff9f 	bl	8001482 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001544:	4628      	mov	r0, r5
 8001546:	f7ff ff9c 	bl	8001482 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800154a:	4823      	ldr	r0, [pc, #140]	; (80015d8 <prvAddNewTaskToReadyList+0xd0>)
 800154c:	f7ff ff99 	bl	8001482 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001550:	4822      	ldr	r0, [pc, #136]	; (80015dc <prvAddNewTaskToReadyList+0xd4>)
 8001552:	f7ff ff96 	bl	8001482 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001556:	4822      	ldr	r0, [pc, #136]	; (80015e0 <prvAddNewTaskToReadyList+0xd8>)
 8001558:	f7ff ff93 	bl	8001482 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800155c:	4b21      	ldr	r3, [pc, #132]	; (80015e4 <prvAddNewTaskToReadyList+0xdc>)
 800155e:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001562:	4b21      	ldr	r3, [pc, #132]	; (80015e8 <prvAddNewTaskToReadyList+0xe0>)
 8001564:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8001566:	4a21      	ldr	r2, [pc, #132]	; (80015ec <prvAddNewTaskToReadyList+0xe4>)
		prvAddTaskToReadyList( pxNewTCB );
 8001568:	4921      	ldr	r1, [pc, #132]	; (80015f0 <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
 800156a:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800156c:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 800156e:	3301      	adds	r3, #1
 8001570:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001572:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8001574:	2301      	movs	r3, #1
 8001576:	4093      	lsls	r3, r2
 8001578:	4303      	orrs	r3, r0
 800157a:	2014      	movs	r0, #20
 800157c:	600b      	str	r3, [r1, #0]
 800157e:	fb00 7002 	mla	r0, r0, r2, r7
 8001582:	1d31      	adds	r1, r6, #4
 8001584:	f7ff ff8b 	bl	800149e <vListInsertEnd>
	taskEXIT_CRITICAL();
 8001588:	f000 fbb6 	bl	8001cf8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800158c:	4b19      	ldr	r3, [pc, #100]	; (80015f4 <prvAddNewTaskToReadyList+0xec>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	b163      	cbz	r3, 80015ac <prvAddNewTaskToReadyList+0xa4>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001592:	6823      	ldr	r3, [r4, #0]
 8001594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001596:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8001598:	429a      	cmp	r2, r3
 800159a:	d207      	bcs.n	80015ac <prvAddNewTaskToReadyList+0xa4>
			taskYIELD_IF_USING_PREEMPTION();
 800159c:	4b16      	ldr	r3, [pc, #88]	; (80015f8 <prvAddNewTaskToReadyList+0xf0>)
 800159e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	f3bf 8f4f 	dsb	sy
 80015a8:	f3bf 8f6f 	isb	sy
 80015ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 80015b0:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <prvAddNewTaskToReadyList+0xec>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d1d6      	bne.n	8001566 <prvAddNewTaskToReadyList+0x5e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80015b8:	6823      	ldr	r3, [r4, #0]
 80015ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015bc:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80015be:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 80015c0:	bf98      	it	ls
 80015c2:	6026      	strls	r6, [r4, #0]
 80015c4:	e7cf      	b.n	8001566 <prvAddNewTaskToReadyList+0x5e>
 80015c6:	bf00      	nop
 80015c8:	2000012c 	.word	0x2000012c
 80015cc:	20000094 	.word	0x20000094
 80015d0:	200000a0 	.word	0x200000a0
 80015d4:	20000158 	.word	0x20000158
 80015d8:	20000174 	.word	0x20000174
 80015dc:	200001a0 	.word	0x200001a0
 80015e0:	2000018c 	.word	0x2000018c
 80015e4:	20000098 	.word	0x20000098
 80015e8:	2000009c 	.word	0x2000009c
 80015ec:	2000013c 	.word	0x2000013c
 80015f0:	20000140 	.word	0x20000140
 80015f4:	20000188 	.word	0x20000188
 80015f8:	e000ed04 	.word	0xe000ed04
 80015fc:	20000144 	.word	0x20000144

08001600 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001600:	4a06      	ldr	r2, [pc, #24]	; (800161c <prvResetNextTaskUnblockTime+0x1c>)
 8001602:	6813      	ldr	r3, [r2, #0]
 8001604:	6819      	ldr	r1, [r3, #0]
 8001606:	4b06      	ldr	r3, [pc, #24]	; (8001620 <prvResetNextTaskUnblockTime+0x20>)
 8001608:	b919      	cbnz	r1, 8001612 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800160a:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001612:	6812      	ldr	r2, [r2, #0]
 8001614:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001616:	68d2      	ldr	r2, [r2, #12]
 8001618:	6852      	ldr	r2, [r2, #4]
 800161a:	e7f8      	b.n	800160e <prvResetNextTaskUnblockTime+0xe>
 800161c:	20000098 	.word	0x20000098
 8001620:	2000016c 	.word	0x2000016c

08001624 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8001624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001628:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800162a:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800162e:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8001630:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001634:	3a01      	subs	r2, #1
 8001636:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800163a:	469a      	mov	sl, r3
 800163c:	4681      	mov	r9, r0
 800163e:	1e4b      	subs	r3, r1, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001640:	f026 0607 	bic.w	r6, r6, #7
 8001644:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8001648:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800164a:	7858      	ldrb	r0, [r3, #1]
 800164c:	f802 0b01 	strb.w	r0, [r2], #1
		if( pcName[ x ] == 0x00 )
 8001650:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8001654:	b108      	cbz	r0, 800165a <prvInitialiseNewTask.isra.2+0x36>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001656:	428b      	cmp	r3, r1
 8001658:	d1f7      	bne.n	800164a <prvInitialiseNewTask.isra.2+0x26>
 800165a:	9d08      	ldr	r5, [sp, #32]
 800165c:	2d06      	cmp	r5, #6
 800165e:	bf28      	it	cs
 8001660:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001662:	2700      	movs	r7, #0
	pxNewTCB->uxPriority = uxPriority;
 8001664:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8001666:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001668:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800166a:	f884 7043 	strb.w	r7, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 800166e:	64a7      	str	r7, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001670:	f7ff ff12 	bl	8001498 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001674:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001678:	f104 0018 	add.w	r0, r4, #24
 800167c:	f7ff ff0c 	bl	8001498 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8001680:	64e7      	str	r7, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001682:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001684:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001686:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001688:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800168c:	4652      	mov	r2, sl
 800168e:	4649      	mov	r1, r9
 8001690:	4630      	mov	r0, r6
 8001692:	f000 fae5 	bl	8001c60 <pxPortInitialiseStack>
 8001696:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8001698:	f1b8 0f00 	cmp.w	r8, #0
 800169c:	d001      	beq.n	80016a2 <prvInitialiseNewTask.isra.2+0x7e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800169e:	f8c8 4000 	str.w	r4, [r8]
 80016a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080016a6 <prvDeleteTCB>:
	{
 80016a6:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80016a8:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
	{
 80016ac:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80016ae:	b93b      	cbnz	r3, 80016c0 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 80016b0:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80016b2:	f000 fccf 	bl	8002054 <vPortFree>
				vPortFree( pxTCB );
 80016b6:	4620      	mov	r0, r4
	}
 80016b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 80016bc:	f000 bcca 	b.w	8002054 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d0f9      	beq.n	80016b8 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d008      	beq.n	80016da <prvDeleteTCB+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80016c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016cc:	f383 8811 	msr	BASEPRI, r3
 80016d0:	f3bf 8f6f 	isb	sy
 80016d4:	f3bf 8f4f 	dsb	sy
 80016d8:	e7fe      	b.n	80016d8 <prvDeleteTCB+0x32>
 80016da:	bd10      	pop	{r4, pc}

080016dc <prvIdleTask>:
{
 80016dc:	b580      	push	{r7, lr}
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80016de:	4e14      	ldr	r6, [pc, #80]	; (8001730 <prvIdleTask+0x54>)
				taskYIELD();
 80016e0:	4f14      	ldr	r7, [pc, #80]	; (8001734 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80016e2:	4c15      	ldr	r4, [pc, #84]	; (8001738 <prvIdleTask+0x5c>)
				--uxCurrentNumberOfTasks;
 80016e4:	4d15      	ldr	r5, [pc, #84]	; (800173c <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80016e6:	6823      	ldr	r3, [r4, #0]
 80016e8:	b96b      	cbnz	r3, 8001706 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80016ea:	4b15      	ldr	r3, [pc, #84]	; (8001740 <prvIdleTask+0x64>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d906      	bls.n	8001700 <prvIdleTask+0x24>
				taskYIELD();
 80016f2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80016f6:	603b      	str	r3, [r7, #0]
 80016f8:	f3bf 8f4f 	dsb	sy
 80016fc:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 8001700:	f000 fce0 	bl	80020c4 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8001704:	e7ed      	b.n	80016e2 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 8001706:	f000 fad5 	bl	8001cb4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800170a:	68f3      	ldr	r3, [r6, #12]
 800170c:	f8d3 800c 	ldr.w	r8, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001710:	f108 0004 	add.w	r0, r8, #4
 8001714:	f7ff fee6 	bl	80014e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001718:	682b      	ldr	r3, [r5, #0]
 800171a:	3b01      	subs	r3, #1
 800171c:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800171e:	6823      	ldr	r3, [r4, #0]
 8001720:	3b01      	subs	r3, #1
 8001722:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8001724:	f000 fae8 	bl	8001cf8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8001728:	4640      	mov	r0, r8
 800172a:	f7ff ffbc 	bl	80016a6 <prvDeleteTCB>
 800172e:	e7da      	b.n	80016e6 <prvIdleTask+0xa>
 8001730:	200001a0 	.word	0x200001a0
 8001734:	e000ed04 	.word	0xe000ed04
 8001738:	20000130 	.word	0x20000130
 800173c:	2000012c 	.word	0x2000012c
 8001740:	200000a0 	.word	0x200000a0

08001744 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001746:	4b1b      	ldr	r3, [pc, #108]	; (80017b4 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001748:	4e1b      	ldr	r6, [pc, #108]	; (80017b8 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 800174a:	681d      	ldr	r5, [r3, #0]
{
 800174c:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800174e:	6830      	ldr	r0, [r6, #0]
 8001750:	3004      	adds	r0, #4
{
 8001752:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001754:	f7ff fec6 	bl	80014e4 <uxListRemove>
 8001758:	4633      	mov	r3, r6
 800175a:	b940      	cbnz	r0, 800176e <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800175c:	6831      	ldr	r1, [r6, #0]
 800175e:	4e17      	ldr	r6, [pc, #92]	; (80017bc <prvAddCurrentTaskToDelayedList+0x78>)
 8001760:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8001762:	6832      	ldr	r2, [r6, #0]
 8001764:	2001      	movs	r0, #1
 8001766:	4088      	lsls	r0, r1
 8001768:	ea22 0200 	bic.w	r2, r2, r0
 800176c:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800176e:	1c62      	adds	r2, r4, #1
 8001770:	d107      	bne.n	8001782 <prvAddCurrentTaskToDelayedList+0x3e>
 8001772:	b137      	cbz	r7, 8001782 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001774:	6819      	ldr	r1, [r3, #0]
 8001776:	4812      	ldr	r0, [pc, #72]	; (80017c0 <prvAddCurrentTaskToDelayedList+0x7c>)
 8001778:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800177a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800177e:	f7ff be8e 	b.w	800149e <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001782:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001784:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8001786:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001788:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 800178a:	d907      	bls.n	800179c <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800178c:	4a0d      	ldr	r2, [pc, #52]	; (80017c4 <prvAddCurrentTaskToDelayedList+0x80>)
 800178e:	6810      	ldr	r0, [r2, #0]
 8001790:	6819      	ldr	r1, [r3, #0]
}
 8001792:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001796:	3104      	adds	r1, #4
 8001798:	f7ff be8d 	b.w	80014b6 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800179c:	4a0a      	ldr	r2, [pc, #40]	; (80017c8 <prvAddCurrentTaskToDelayedList+0x84>)
 800179e:	6810      	ldr	r0, [r2, #0]
 80017a0:	6819      	ldr	r1, [r3, #0]
 80017a2:	3104      	adds	r1, #4
 80017a4:	f7ff fe87 	bl	80014b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80017a8:	4b08      	ldr	r3, [pc, #32]	; (80017cc <prvAddCurrentTaskToDelayedList+0x88>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 80017ae:	bf38      	it	cc
 80017b0:	601c      	strcc	r4, [r3, #0]
 80017b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80017b4:	200001b4 	.word	0x200001b4
 80017b8:	20000094 	.word	0x20000094
 80017bc:	20000140 	.word	0x20000140
 80017c0:	2000018c 	.word	0x2000018c
 80017c4:	2000009c 	.word	0x2000009c
 80017c8:	20000098 	.word	0x20000098
 80017cc:	2000016c 	.word	0x2000016c

080017d0 <xTaskCreateStatic>:
	{
 80017d0:	b570      	push	{r4, r5, r6, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80017d6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 80017d8:	b945      	cbnz	r5, 80017ec <xTaskCreateStatic+0x1c>
 80017da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017de:	f383 8811 	msr	BASEPRI, r3
 80017e2:	f3bf 8f6f 	isb	sy
 80017e6:	f3bf 8f4f 	dsb	sy
 80017ea:	e7fe      	b.n	80017ea <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 80017ec:	b944      	cbnz	r4, 8001800 <xTaskCreateStatic+0x30>
 80017ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017f2:	f383 8811 	msr	BASEPRI, r3
 80017f6:	f3bf 8f6f 	isb	sy
 80017fa:	f3bf 8f4f 	dsb	sy
 80017fe:	e7fe      	b.n	80017fe <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8001800:	2654      	movs	r6, #84	; 0x54
 8001802:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001804:	9e04      	ldr	r6, [sp, #16]
 8001806:	2e54      	cmp	r6, #84	; 0x54
 8001808:	d008      	beq.n	800181c <xTaskCreateStatic+0x4c>
 800180a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800180e:	f383 8811 	msr	BASEPRI, r3
 8001812:	f3bf 8f6f 	isb	sy
 8001816:	f3bf 8f4f 	dsb	sy
 800181a:	e7fe      	b.n	800181a <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800181c:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800181e:	2502      	movs	r5, #2
 8001820:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001824:	ad05      	add	r5, sp, #20
 8001826:	9501      	str	r5, [sp, #4]
 8001828:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800182a:	9402      	str	r4, [sp, #8]
 800182c:	9500      	str	r5, [sp, #0]
 800182e:	f7ff fef9 	bl	8001624 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001832:	4620      	mov	r0, r4
 8001834:	f7ff fe68 	bl	8001508 <prvAddNewTaskToReadyList>
	}
 8001838:	9805      	ldr	r0, [sp, #20]
 800183a:	b006      	add	sp, #24
 800183c:	bd70      	pop	{r4, r5, r6, pc}

0800183e <xTaskCreate>:
	{
 800183e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001842:	4607      	mov	r7, r0
 8001844:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001846:	0090      	lsls	r0, r2, #2
	{
 8001848:	4688      	mov	r8, r1
 800184a:	4616      	mov	r6, r2
 800184c:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800184e:	f000 fb73 	bl	8001f38 <pvPortMalloc>
			if( pxStack != NULL )
 8001852:	4605      	mov	r5, r0
 8001854:	b1e8      	cbz	r0, 8001892 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001856:	2054      	movs	r0, #84	; 0x54
 8001858:	f000 fb6e 	bl	8001f38 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800185c:	4604      	mov	r4, r0
 800185e:	b1a8      	cbz	r0, 800188c <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001860:	2300      	movs	r3, #0
 8001862:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001866:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 8001868:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800186a:	9301      	str	r3, [sp, #4]
 800186c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800186e:	9002      	str	r0, [sp, #8]
 8001870:	9300      	str	r3, [sp, #0]
 8001872:	4632      	mov	r2, r6
 8001874:	464b      	mov	r3, r9
 8001876:	4641      	mov	r1, r8
 8001878:	4638      	mov	r0, r7
 800187a:	f7ff fed3 	bl	8001624 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 800187e:	4620      	mov	r0, r4
 8001880:	f7ff fe42 	bl	8001508 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001884:	2001      	movs	r0, #1
	}
 8001886:	b005      	add	sp, #20
 8001888:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800188c:	4628      	mov	r0, r5
 800188e:	f000 fbe1 	bl	8002054 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001892:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8001896:	e7f6      	b.n	8001886 <xTaskCreate+0x48>

08001898 <vTaskStartScheduler>:
{
 8001898:	b510      	push	{r4, lr}
 800189a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800189c:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800189e:	aa07      	add	r2, sp, #28
 80018a0:	a906      	add	r1, sp, #24
 80018a2:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80018a4:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80018a6:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80018a8:	f000 fc0e 	bl	80020c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80018ac:	9b05      	ldr	r3, [sp, #20]
 80018ae:	9302      	str	r3, [sp, #8]
 80018b0:	9b06      	ldr	r3, [sp, #24]
 80018b2:	9301      	str	r3, [sp, #4]
 80018b4:	9400      	str	r4, [sp, #0]
 80018b6:	4623      	mov	r3, r4
 80018b8:	9a07      	ldr	r2, [sp, #28]
 80018ba:	490d      	ldr	r1, [pc, #52]	; (80018f0 <vTaskStartScheduler+0x58>)
 80018bc:	480d      	ldr	r0, [pc, #52]	; (80018f4 <vTaskStartScheduler+0x5c>)
 80018be:	f7ff ff87 	bl	80017d0 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80018c2:	b190      	cbz	r0, 80018ea <vTaskStartScheduler+0x52>
 80018c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018c8:	f383 8811 	msr	BASEPRI, r3
 80018cc:	f3bf 8f6f 	isb	sy
 80018d0:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80018d4:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <vTaskStartScheduler+0x60>)
 80018d6:	f04f 32ff 	mov.w	r2, #4294967295
 80018da:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80018dc:	4b07      	ldr	r3, [pc, #28]	; (80018fc <vTaskStartScheduler+0x64>)
 80018de:	2201      	movs	r2, #1
 80018e0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80018e2:	4b07      	ldr	r3, [pc, #28]	; (8001900 <vTaskStartScheduler+0x68>)
 80018e4:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 80018e6:	f000 fa7d 	bl	8001de4 <xPortStartScheduler>
}
 80018ea:	b008      	add	sp, #32
 80018ec:	bd10      	pop	{r4, pc}
 80018ee:	bf00      	nop
 80018f0:	08003a58 	.word	0x08003a58
 80018f4:	080016dd 	.word	0x080016dd
 80018f8:	2000016c 	.word	0x2000016c
 80018fc:	20000188 	.word	0x20000188
 8001900:	200001b4 	.word	0x200001b4

08001904 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8001904:	4a02      	ldr	r2, [pc, #8]	; (8001910 <vTaskSuspendAll+0xc>)
 8001906:	6813      	ldr	r3, [r2, #0]
 8001908:	3301      	adds	r3, #1
 800190a:	6013      	str	r3, [r2, #0]
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	20000138 	.word	0x20000138

08001914 <xTaskIncrementTick>:
{
 8001914:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001918:	4b3c      	ldr	r3, [pc, #240]	; (8001a0c <xTaskIncrementTick+0xf8>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d153      	bne.n	80019c8 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001920:	4b3b      	ldr	r3, [pc, #236]	; (8001a10 <xTaskIncrementTick+0xfc>)
 8001922:	681c      	ldr	r4, [r3, #0]
 8001924:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8001926:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001928:	b9bc      	cbnz	r4, 800195a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800192a:	4b3a      	ldr	r3, [pc, #232]	; (8001a14 <xTaskIncrementTick+0x100>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	6812      	ldr	r2, [r2, #0]
 8001930:	b142      	cbz	r2, 8001944 <xTaskIncrementTick+0x30>
 8001932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001936:	f383 8811 	msr	BASEPRI, r3
 800193a:	f3bf 8f6f 	isb	sy
 800193e:	f3bf 8f4f 	dsb	sy
 8001942:	e7fe      	b.n	8001942 <xTaskIncrementTick+0x2e>
 8001944:	4a34      	ldr	r2, [pc, #208]	; (8001a18 <xTaskIncrementTick+0x104>)
 8001946:	6819      	ldr	r1, [r3, #0]
 8001948:	6810      	ldr	r0, [r2, #0]
 800194a:	6018      	str	r0, [r3, #0]
 800194c:	6011      	str	r1, [r2, #0]
 800194e:	4a33      	ldr	r2, [pc, #204]	; (8001a1c <xTaskIncrementTick+0x108>)
 8001950:	6813      	ldr	r3, [r2, #0]
 8001952:	3301      	adds	r3, #1
 8001954:	6013      	str	r3, [r2, #0]
 8001956:	f7ff fe53 	bl	8001600 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800195a:	4d31      	ldr	r5, [pc, #196]	; (8001a20 <xTaskIncrementTick+0x10c>)
 800195c:	4f31      	ldr	r7, [pc, #196]	; (8001a24 <xTaskIncrementTick+0x110>)
 800195e:	682b      	ldr	r3, [r5, #0]
 8001960:	429c      	cmp	r4, r3
 8001962:	f04f 0b00 	mov.w	fp, #0
 8001966:	d33e      	bcc.n	80019e6 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001968:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8001a14 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 800196c:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8001a34 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001970:	f8d8 2000 	ldr.w	r2, [r8]
 8001974:	6812      	ldr	r2, [r2, #0]
 8001976:	bb72      	cbnz	r2, 80019d6 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001978:	f04f 32ff 	mov.w	r2, #4294967295
 800197c:	602a      	str	r2, [r5, #0]
					break;
 800197e:	e032      	b.n	80019e6 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001980:	f106 0a04 	add.w	sl, r6, #4
 8001984:	4650      	mov	r0, sl
 8001986:	f7ff fdad 	bl	80014e4 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800198a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 800198c:	b119      	cbz	r1, 8001996 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800198e:	f106 0018 	add.w	r0, r6, #24
 8001992:	f7ff fda7 	bl	80014e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001996:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8001998:	f8d9 3000 	ldr.w	r3, [r9]
 800199c:	2201      	movs	r2, #1
 800199e:	fa02 f100 	lsl.w	r1, r2, r0
 80019a2:	4319      	orrs	r1, r3
 80019a4:	4b20      	ldr	r3, [pc, #128]	; (8001a28 <xTaskIncrementTick+0x114>)
 80019a6:	f8c9 1000 	str.w	r1, [r9]
 80019aa:	f04f 0e14 	mov.w	lr, #20
 80019ae:	4651      	mov	r1, sl
 80019b0:	fb0e 3000 	mla	r0, lr, r0, r3
 80019b4:	f7ff fd73 	bl	800149e <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80019b8:	6838      	ldr	r0, [r7, #0]
 80019ba:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 80019bc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80019be:	4291      	cmp	r1, r2
 80019c0:	bf28      	it	cs
 80019c2:	f04f 0b01 	movcs.w	fp, #1
 80019c6:	e7d3      	b.n	8001970 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 80019c8:	4a18      	ldr	r2, [pc, #96]	; (8001a2c <xTaskIncrementTick+0x118>)
 80019ca:	6813      	ldr	r3, [r2, #0]
 80019cc:	3301      	adds	r3, #1
 80019ce:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80019d0:	f04f 0b00 	mov.w	fp, #0
 80019d4:	e011      	b.n	80019fa <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80019d6:	f8d8 2000 	ldr.w	r2, [r8]
 80019da:	68d2      	ldr	r2, [r2, #12]
 80019dc:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80019de:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 80019e0:	428c      	cmp	r4, r1
 80019e2:	d2cd      	bcs.n	8001980 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 80019e4:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	4b0f      	ldr	r3, [pc, #60]	; (8001a28 <xTaskIncrementTick+0x114>)
 80019ea:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80019ec:	2214      	movs	r2, #20
 80019ee:	434a      	muls	r2, r1
 80019f0:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 80019f2:	2a02      	cmp	r2, #2
 80019f4:	bf28      	it	cs
 80019f6:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 80019fa:	4a0d      	ldr	r2, [pc, #52]	; (8001a30 <xTaskIncrementTick+0x11c>)
 80019fc:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 80019fe:	2a00      	cmp	r2, #0
 8001a00:	bf18      	it	ne
 8001a02:	f04f 0b01 	movne.w	fp, #1
}
 8001a06:	4658      	mov	r0, fp
 8001a08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a0c:	20000138 	.word	0x20000138
 8001a10:	200001b4 	.word	0x200001b4
 8001a14:	20000098 	.word	0x20000098
 8001a18:	2000009c 	.word	0x2000009c
 8001a1c:	20000170 	.word	0x20000170
 8001a20:	2000016c 	.word	0x2000016c
 8001a24:	20000094 	.word	0x20000094
 8001a28:	200000a0 	.word	0x200000a0
 8001a2c:	20000134 	.word	0x20000134
 8001a30:	200001b8 	.word	0x200001b8
 8001a34:	20000140 	.word	0x20000140

08001a38 <xTaskResumeAll>:
{
 8001a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8001a3c:	4c31      	ldr	r4, [pc, #196]	; (8001b04 <xTaskResumeAll+0xcc>)
 8001a3e:	6823      	ldr	r3, [r4, #0]
 8001a40:	b943      	cbnz	r3, 8001a54 <xTaskResumeAll+0x1c>
 8001a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a46:	f383 8811 	msr	BASEPRI, r3
 8001a4a:	f3bf 8f6f 	isb	sy
 8001a4e:	f3bf 8f4f 	dsb	sy
 8001a52:	e7fe      	b.n	8001a52 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8001a54:	f000 f92e 	bl	8001cb4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8001a58:	6823      	ldr	r3, [r4, #0]
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001a5e:	6824      	ldr	r4, [r4, #0]
 8001a60:	b12c      	cbz	r4, 8001a6e <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8001a62:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8001a64:	f000 f948 	bl	8001cf8 <vPortExitCritical>
}
 8001a68:	4620      	mov	r0, r4
 8001a6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001a6e:	4b26      	ldr	r3, [pc, #152]	; (8001b08 <xTaskResumeAll+0xd0>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d0f5      	beq.n	8001a62 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001a76:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8001b20 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8001a7a:	4f24      	ldr	r7, [pc, #144]	; (8001b0c <xTaskResumeAll+0xd4>)
 8001a7c:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8001b24 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001a80:	f8d9 3000 	ldr.w	r3, [r9]
 8001a84:	b9e3      	cbnz	r3, 8001ac0 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8001a86:	b10c      	cbz	r4, 8001a8c <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8001a88:	f7ff fdba 	bl	8001600 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001a8c:	4d20      	ldr	r5, [pc, #128]	; (8001b10 <xTaskResumeAll+0xd8>)
 8001a8e:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001a90:	b144      	cbz	r4, 8001aa4 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 8001a92:	4e20      	ldr	r6, [pc, #128]	; (8001b14 <xTaskResumeAll+0xdc>)
 8001a94:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8001a96:	f7ff ff3d 	bl	8001914 <xTaskIncrementTick>
 8001a9a:	b100      	cbz	r0, 8001a9e <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8001a9c:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001a9e:	3c01      	subs	r4, #1
 8001aa0:	d1f9      	bne.n	8001a96 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 8001aa2:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8001aa4:	4b1b      	ldr	r3, [pc, #108]	; (8001b14 <xTaskResumeAll+0xdc>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d0da      	beq.n	8001a62 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8001aac:	4b1a      	ldr	r3, [pc, #104]	; (8001b18 <xTaskResumeAll+0xe0>)
 8001aae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	f3bf 8f4f 	dsb	sy
 8001ab8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8001abc:	2401      	movs	r4, #1
 8001abe:	e7d1      	b.n	8001a64 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001ac0:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8001ac4:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001ac6:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001ac8:	f104 0018 	add.w	r0, r4, #24
 8001acc:	f7ff fd0a 	bl	80014e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001ad0:	4630      	mov	r0, r6
 8001ad2:	f7ff fd07 	bl	80014e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001ad6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001ad8:	6839      	ldr	r1, [r7, #0]
 8001ada:	2501      	movs	r5, #1
 8001adc:	fa05 f302 	lsl.w	r3, r5, r2
 8001ae0:	2014      	movs	r0, #20
 8001ae2:	430b      	orrs	r3, r1
 8001ae4:	fb00 8002 	mla	r0, r0, r2, r8
 8001ae8:	4631      	mov	r1, r6
 8001aea:	603b      	str	r3, [r7, #0]
 8001aec:	f7ff fcd7 	bl	800149e <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001af0:	4b0a      	ldr	r3, [pc, #40]	; (8001b1c <xTaskResumeAll+0xe4>)
 8001af2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af8:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8001afa:	bf24      	itt	cs
 8001afc:	4b05      	ldrcs	r3, [pc, #20]	; (8001b14 <xTaskResumeAll+0xdc>)
 8001afe:	601d      	strcs	r5, [r3, #0]
 8001b00:	e7be      	b.n	8001a80 <xTaskResumeAll+0x48>
 8001b02:	bf00      	nop
 8001b04:	20000138 	.word	0x20000138
 8001b08:	2000012c 	.word	0x2000012c
 8001b0c:	20000140 	.word	0x20000140
 8001b10:	20000134 	.word	0x20000134
 8001b14:	200001b8 	.word	0x200001b8
 8001b18:	e000ed04 	.word	0xe000ed04
 8001b1c:	20000094 	.word	0x20000094
 8001b20:	20000174 	.word	0x20000174
 8001b24:	200000a0 	.word	0x200000a0

08001b28 <vTaskDelay>:
	{
 8001b28:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001b2a:	b940      	cbnz	r0, 8001b3e <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8001b2c:	4b0e      	ldr	r3, [pc, #56]	; (8001b68 <vTaskDelay+0x40>)
 8001b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	f3bf 8f4f 	dsb	sy
 8001b38:	f3bf 8f6f 	isb	sy
 8001b3c:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8001b3e:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <vTaskDelay+0x44>)
 8001b40:	6819      	ldr	r1, [r3, #0]
 8001b42:	b141      	cbz	r1, 8001b56 <vTaskDelay+0x2e>
 8001b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b48:	f383 8811 	msr	BASEPRI, r3
 8001b4c:	f3bf 8f6f 	isb	sy
 8001b50:	f3bf 8f4f 	dsb	sy
 8001b54:	e7fe      	b.n	8001b54 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8001b56:	f7ff fed5 	bl	8001904 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001b5a:	f7ff fdf3 	bl	8001744 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8001b5e:	f7ff ff6b 	bl	8001a38 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8001b62:	2800      	cmp	r0, #0
 8001b64:	d0e2      	beq.n	8001b2c <vTaskDelay+0x4>
 8001b66:	bd08      	pop	{r3, pc}
 8001b68:	e000ed04 	.word	0xe000ed04
 8001b6c:	20000138 	.word	0x20000138

08001b70 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001b70:	4b17      	ldr	r3, [pc, #92]	; (8001bd0 <vTaskSwitchContext+0x60>)
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	4b17      	ldr	r3, [pc, #92]	; (8001bd4 <vTaskSwitchContext+0x64>)
{
 8001b76:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001b78:	b112      	cbz	r2, 8001b80 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8001b7a:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8001b80:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001b82:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <vTaskSwitchContext+0x68>)
 8001b84:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001b86:	fab3 f383 	clz	r3, r3
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	f1c3 031f 	rsb	r3, r3, #31
 8001b90:	2214      	movs	r2, #20
 8001b92:	4912      	ldr	r1, [pc, #72]	; (8001bdc <vTaskSwitchContext+0x6c>)
 8001b94:	435a      	muls	r2, r3
 8001b96:	1888      	adds	r0, r1, r2
 8001b98:	588c      	ldr	r4, [r1, r2]
 8001b9a:	b944      	cbnz	r4, 8001bae <vTaskSwitchContext+0x3e>
	__asm volatile
 8001b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ba0:	f383 8811 	msr	BASEPRI, r3
 8001ba4:	f3bf 8f6f 	isb	sy
 8001ba8:	f3bf 8f4f 	dsb	sy
 8001bac:	e7fe      	b.n	8001bac <vTaskSwitchContext+0x3c>
 8001bae:	6844      	ldr	r4, [r0, #4]
 8001bb0:	3208      	adds	r2, #8
 8001bb2:	6864      	ldr	r4, [r4, #4]
 8001bb4:	6044      	str	r4, [r0, #4]
 8001bb6:	440a      	add	r2, r1
 8001bb8:	4294      	cmp	r4, r2
 8001bba:	bf04      	itt	eq
 8001bbc:	6862      	ldreq	r2, [r4, #4]
 8001bbe:	6042      	streq	r2, [r0, #4]
 8001bc0:	2214      	movs	r2, #20
 8001bc2:	fb02 1303 	mla	r3, r2, r3, r1
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	68da      	ldr	r2, [r3, #12]
 8001bca:	4b05      	ldr	r3, [pc, #20]	; (8001be0 <vTaskSwitchContext+0x70>)
 8001bcc:	e7d6      	b.n	8001b7c <vTaskSwitchContext+0xc>
 8001bce:	bf00      	nop
 8001bd0:	20000138 	.word	0x20000138
 8001bd4:	200001b8 	.word	0x200001b8
 8001bd8:	20000140 	.word	0x20000140
 8001bdc:	200000a0 	.word	0x200000a0
 8001be0:	20000094 	.word	0x20000094

08001be4 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001be4:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8001be6:	2300      	movs	r3, #0
 8001be8:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001bea:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <prvTaskExitError+0x3c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	d008      	beq.n	8001c04 <prvTaskExitError+0x20>
 8001bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bf6:	f383 8811 	msr	BASEPRI, r3
 8001bfa:	f3bf 8f6f 	isb	sy
 8001bfe:	f3bf 8f4f 	dsb	sy
 8001c02:	e7fe      	b.n	8001c02 <prvTaskExitError+0x1e>
 8001c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c08:	f383 8811 	msr	BASEPRI, r3
 8001c0c:	f3bf 8f6f 	isb	sy
 8001c10:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8001c14:	9b01      	ldr	r3, [sp, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d0fc      	beq.n	8001c14 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8001c1a:	b002      	add	sp, #8
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	20000000 	.word	0x20000000

08001c24 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8001c24:	4808      	ldr	r0, [pc, #32]	; (8001c48 <prvPortStartFirstTask+0x24>)
 8001c26:	6800      	ldr	r0, [r0, #0]
 8001c28:	6800      	ldr	r0, [r0, #0]
 8001c2a:	f380 8808 	msr	MSP, r0
 8001c2e:	f04f 0000 	mov.w	r0, #0
 8001c32:	f380 8814 	msr	CONTROL, r0
 8001c36:	b662      	cpsie	i
 8001c38:	b661      	cpsie	f
 8001c3a:	f3bf 8f4f 	dsb	sy
 8001c3e:	f3bf 8f6f 	isb	sy
 8001c42:	df00      	svc	0
 8001c44:	bf00      	nop
 8001c46:	0000      	.short	0x0000
 8001c48:	e000ed08 	.word	0xe000ed08

08001c4c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001c4c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001c5c <vPortEnableVFP+0x10>
 8001c50:	6801      	ldr	r1, [r0, #0]
 8001c52:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001c56:	6001      	str	r1, [r0, #0]
 8001c58:	4770      	bx	lr
 8001c5a:	0000      	.short	0x0000
 8001c5c:	e000ed88 	.word	0xe000ed88

08001c60 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001c60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c64:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001c68:	4b07      	ldr	r3, [pc, #28]	; (8001c88 <pxPortInitialiseStack+0x28>)
 8001c6a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001c6e:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001c72:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001c76:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001c7a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001c7e:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8001c82:	3844      	subs	r0, #68	; 0x44
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	08001be5 	.word	0x08001be5
 8001c8c:	00000000 	.word	0x00000000

08001c90 <SVC_Handler>:
	__asm volatile (
 8001c90:	4b07      	ldr	r3, [pc, #28]	; (8001cb0 <pxCurrentTCBConst2>)
 8001c92:	6819      	ldr	r1, [r3, #0]
 8001c94:	6808      	ldr	r0, [r1, #0]
 8001c96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c9a:	f380 8809 	msr	PSP, r0
 8001c9e:	f3bf 8f6f 	isb	sy
 8001ca2:	f04f 0000 	mov.w	r0, #0
 8001ca6:	f380 8811 	msr	BASEPRI, r0
 8001caa:	4770      	bx	lr
 8001cac:	f3af 8000 	nop.w

08001cb0 <pxCurrentTCBConst2>:
 8001cb0:	20000094 	.word	0x20000094

08001cb4 <vPortEnterCritical>:
 8001cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cb8:	f383 8811 	msr	BASEPRI, r3
 8001cbc:	f3bf 8f6f 	isb	sy
 8001cc0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8001cc4:	4a0a      	ldr	r2, [pc, #40]	; (8001cf0 <vPortEnterCritical+0x3c>)
 8001cc6:	6813      	ldr	r3, [r2, #0]
 8001cc8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8001cca:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8001ccc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8001cce:	d10d      	bne.n	8001cec <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001cd0:	4b08      	ldr	r3, [pc, #32]	; (8001cf4 <vPortEnterCritical+0x40>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001cd8:	d008      	beq.n	8001cec <vPortEnterCritical+0x38>
 8001cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cde:	f383 8811 	msr	BASEPRI, r3
 8001ce2:	f3bf 8f6f 	isb	sy
 8001ce6:	f3bf 8f4f 	dsb	sy
 8001cea:	e7fe      	b.n	8001cea <vPortEnterCritical+0x36>
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	20000000 	.word	0x20000000
 8001cf4:	e000ed04 	.word	0xe000ed04

08001cf8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8001cf8:	4a08      	ldr	r2, [pc, #32]	; (8001d1c <vPortExitCritical+0x24>)
 8001cfa:	6813      	ldr	r3, [r2, #0]
 8001cfc:	b943      	cbnz	r3, 8001d10 <vPortExitCritical+0x18>
 8001cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d02:	f383 8811 	msr	BASEPRI, r3
 8001d06:	f3bf 8f6f 	isb	sy
 8001d0a:	f3bf 8f4f 	dsb	sy
 8001d0e:	e7fe      	b.n	8001d0e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8001d10:	3b01      	subs	r3, #1
 8001d12:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001d14:	b90b      	cbnz	r3, 8001d1a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001d16:	f383 8811 	msr	BASEPRI, r3
 8001d1a:	4770      	bx	lr
 8001d1c:	20000000 	.word	0x20000000

08001d20 <PendSV_Handler>:
	__asm volatile
 8001d20:	f3ef 8009 	mrs	r0, PSP
 8001d24:	f3bf 8f6f 	isb	sy
 8001d28:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <pxCurrentTCBConst>)
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	f01e 0f10 	tst.w	lr, #16
 8001d30:	bf08      	it	eq
 8001d32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001d36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d3a:	6010      	str	r0, [r2, #0]
 8001d3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001d40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001d44:	f380 8811 	msr	BASEPRI, r0
 8001d48:	f3bf 8f4f 	dsb	sy
 8001d4c:	f3bf 8f6f 	isb	sy
 8001d50:	f7ff ff0e 	bl	8001b70 <vTaskSwitchContext>
 8001d54:	f04f 0000 	mov.w	r0, #0
 8001d58:	f380 8811 	msr	BASEPRI, r0
 8001d5c:	bc09      	pop	{r0, r3}
 8001d5e:	6819      	ldr	r1, [r3, #0]
 8001d60:	6808      	ldr	r0, [r1, #0]
 8001d62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d66:	f01e 0f10 	tst.w	lr, #16
 8001d6a:	bf08      	it	eq
 8001d6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001d70:	f380 8809 	msr	PSP, r0
 8001d74:	f3bf 8f6f 	isb	sy
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	f3af 8000 	nop.w

08001d80 <pxCurrentTCBConst>:
 8001d80:	20000094 	.word	0x20000094

08001d84 <SysTick_Handler>:
{
 8001d84:	b508      	push	{r3, lr}
	__asm volatile
 8001d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d8a:	f383 8811 	msr	BASEPRI, r3
 8001d8e:	f3bf 8f6f 	isb	sy
 8001d92:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8001d96:	f7ff fdbd 	bl	8001914 <xTaskIncrementTick>
 8001d9a:	b118      	cbz	r0, 8001da4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001d9c:	4b03      	ldr	r3, [pc, #12]	; (8001dac <SysTick_Handler+0x28>)
 8001d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001da2:	601a      	str	r2, [r3, #0]
	__asm volatile
 8001da4:	2300      	movs	r3, #0
 8001da6:	f383 8811 	msr	BASEPRI, r3
 8001daa:	bd08      	pop	{r3, pc}
 8001dac:	e000ed04 	.word	0xe000ed04

08001db0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001db0:	4a08      	ldr	r2, [pc, #32]	; (8001dd4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001db2:	4909      	ldr	r1, [pc, #36]	; (8001dd8 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001db8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001dba:	4b08      	ldr	r3, [pc, #32]	; (8001ddc <vPortSetupTimerInterrupt+0x2c>)
 8001dbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dc6:	4906      	ldr	r1, [pc, #24]	; (8001de0 <vPortSetupTimerInterrupt+0x30>)
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001dcc:	2307      	movs	r3, #7
 8001dce:	6013      	str	r3, [r2, #0]
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	e000e010 	.word	0xe000e010
 8001dd8:	e000e018 	.word	0xe000e018
 8001ddc:	20000010 	.word	0x20000010
 8001de0:	e000e014 	.word	0xe000e014

08001de4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001de4:	4b39      	ldr	r3, [pc, #228]	; (8001ecc <xPortStartScheduler+0xe8>)
 8001de6:	4a3a      	ldr	r2, [pc, #232]	; (8001ed0 <xPortStartScheduler+0xec>)
{
 8001de8:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001dea:	6819      	ldr	r1, [r3, #0]
 8001dec:	4291      	cmp	r1, r2
 8001dee:	d108      	bne.n	8001e02 <xPortStartScheduler+0x1e>
	__asm volatile
 8001df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001df4:	f383 8811 	msr	BASEPRI, r3
 8001df8:	f3bf 8f6f 	isb	sy
 8001dfc:	f3bf 8f4f 	dsb	sy
 8001e00:	e7fe      	b.n	8001e00 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	4b33      	ldr	r3, [pc, #204]	; (8001ed4 <xPortStartScheduler+0xf0>)
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d108      	bne.n	8001e1c <xPortStartScheduler+0x38>
 8001e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e0e:	f383 8811 	msr	BASEPRI, r3
 8001e12:	f3bf 8f6f 	isb	sy
 8001e16:	f3bf 8f4f 	dsb	sy
 8001e1a:	e7fe      	b.n	8001e1a <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001e1c:	4b2e      	ldr	r3, [pc, #184]	; (8001ed8 <xPortStartScheduler+0xf4>)
 8001e1e:	781a      	ldrb	r2, [r3, #0]
 8001e20:	b2d2      	uxtb	r2, r2
 8001e22:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001e24:	22ff      	movs	r2, #255	; 0xff
 8001e26:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001e28:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001e2a:	4a2c      	ldr	r2, [pc, #176]	; (8001edc <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001e32:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001e36:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001e3a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001e3c:	4b28      	ldr	r3, [pc, #160]	; (8001ee0 <xPortStartScheduler+0xfc>)
 8001e3e:	2207      	movs	r2, #7
 8001e40:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001e42:	2100      	movs	r1, #0
 8001e44:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8001e48:	0600      	lsls	r0, r0, #24
 8001e4a:	f102 34ff 	add.w	r4, r2, #4294967295
 8001e4e:	d40d      	bmi.n	8001e6c <xPortStartScheduler+0x88>
 8001e50:	b101      	cbz	r1, 8001e54 <xPortStartScheduler+0x70>
 8001e52:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	2a03      	cmp	r2, #3
 8001e58:	d011      	beq.n	8001e7e <xPortStartScheduler+0x9a>
 8001e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e5e:	f383 8811 	msr	BASEPRI, r3
 8001e62:	f3bf 8f6f 	isb	sy
 8001e66:	f3bf 8f4f 	dsb	sy
 8001e6a:	e7fe      	b.n	8001e6a <xPortStartScheduler+0x86>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001e6c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001e70:	0052      	lsls	r2, r2, #1
 8001e72:	b2d2      	uxtb	r2, r2
 8001e74:	f88d 2003 	strb.w	r2, [sp, #3]
 8001e78:	2101      	movs	r1, #1
 8001e7a:	4622      	mov	r2, r4
 8001e7c:	e7e2      	b.n	8001e44 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001e7e:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001e80:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001e84:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001e86:	9b01      	ldr	r3, [sp, #4]
 8001e88:	4a13      	ldr	r2, [pc, #76]	; (8001ed8 <xPortStartScheduler+0xf4>)
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001e8e:	4b15      	ldr	r3, [pc, #84]	; (8001ee4 <xPortStartScheduler+0x100>)
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001e96:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8001e9e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8001ea0:	f7ff ff86 	bl	8001db0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8001ea4:	4b10      	ldr	r3, [pc, #64]	; (8001ee8 <xPortStartScheduler+0x104>)
 8001ea6:	2400      	movs	r4, #0
 8001ea8:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8001eaa:	f7ff fecf 	bl	8001c4c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001eae:	4a0f      	ldr	r2, [pc, #60]	; (8001eec <xPortStartScheduler+0x108>)
 8001eb0:	6813      	ldr	r3, [r2, #0]
 8001eb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001eb6:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8001eb8:	f7ff feb4 	bl	8001c24 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8001ebc:	f7ff fe58 	bl	8001b70 <vTaskSwitchContext>
	prvTaskExitError();
 8001ec0:	f7ff fe90 	bl	8001be4 <prvTaskExitError>
}
 8001ec4:	4620      	mov	r0, r4
 8001ec6:	b002      	add	sp, #8
 8001ec8:	bd10      	pop	{r4, pc}
 8001eca:	bf00      	nop
 8001ecc:	e000ed00 	.word	0xe000ed00
 8001ed0:	410fc271 	.word	0x410fc271
 8001ed4:	410fc270 	.word	0x410fc270
 8001ed8:	e000e400 	.word	0xe000e400
 8001edc:	200001bc 	.word	0x200001bc
 8001ee0:	200001c0 	.word	0x200001c0
 8001ee4:	e000ed20 	.word	0xe000ed20
 8001ee8:	20000000 	.word	0x20000000
 8001eec:	e000ef34 	.word	0xe000ef34

08001ef0 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001ef0:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001ef2:	4b0f      	ldr	r3, [pc, #60]	; (8001f30 <prvInsertBlockIntoFreeList+0x40>)
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	4282      	cmp	r2, r0
 8001ef8:	d318      	bcc.n	8001f2c <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001efa:	685c      	ldr	r4, [r3, #4]
 8001efc:	1919      	adds	r1, r3, r4
 8001efe:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001f00:	bf01      	itttt	eq
 8001f02:	6841      	ldreq	r1, [r0, #4]
 8001f04:	4618      	moveq	r0, r3
 8001f06:	1909      	addeq	r1, r1, r4
 8001f08:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001f0a:	6844      	ldr	r4, [r0, #4]
 8001f0c:	1901      	adds	r1, r0, r4
 8001f0e:	428a      	cmp	r2, r1
 8001f10:	d107      	bne.n	8001f22 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001f12:	4908      	ldr	r1, [pc, #32]	; (8001f34 <prvInsertBlockIntoFreeList+0x44>)
 8001f14:	6809      	ldr	r1, [r1, #0]
 8001f16:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001f18:	bf1f      	itttt	ne
 8001f1a:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001f1c:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001f1e:	1909      	addne	r1, r1, r4
 8001f20:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001f22:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001f24:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001f26:	bf18      	it	ne
 8001f28:	6018      	strne	r0, [r3, #0]
 8001f2a:	bd10      	pop	{r4, pc}
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	e7e1      	b.n	8001ef4 <prvInsertBlockIntoFreeList+0x4>
 8001f30:	20003dd4 	.word	0x20003dd4
 8001f34:	200001c4 	.word	0x200001c4

08001f38 <pvPortMalloc>:
{
 8001f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f3c:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8001f3e:	f7ff fce1 	bl	8001904 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8001f42:	493e      	ldr	r1, [pc, #248]	; (800203c <pvPortMalloc+0x104>)
 8001f44:	4d3e      	ldr	r5, [pc, #248]	; (8002040 <pvPortMalloc+0x108>)
 8001f46:	680b      	ldr	r3, [r1, #0]
 8001f48:	bb0b      	cbnz	r3, 8001f8e <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8001f4a:	4a3e      	ldr	r2, [pc, #248]	; (8002044 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001f4c:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001f4e:	bf1f      	itttt	ne
 8001f50:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001f52:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001f56:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 8001f5a:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001f5c:	bf14      	ite	ne
 8001f5e:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001f60:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001f64:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8001f66:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001f68:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001f6c:	4e36      	ldr	r6, [pc, #216]	; (8002048 <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 8001f6e:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001f70:	2000      	movs	r0, #0
 8001f72:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001f74:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8001f76:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001f78:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001f7a:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001f7c:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001f7e:	4b33      	ldr	r3, [pc, #204]	; (800204c <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001f80:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001f82:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001f84:	4b32      	ldr	r3, [pc, #200]	; (8002050 <pvPortMalloc+0x118>)
 8001f86:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001f88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001f8c:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001f8e:	682f      	ldr	r7, [r5, #0]
 8001f90:	4227      	tst	r7, r4
 8001f92:	d116      	bne.n	8001fc2 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8001f94:	2c00      	cmp	r4, #0
 8001f96:	d041      	beq.n	800201c <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 8001f98:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001f9c:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001f9e:	bf1c      	itt	ne
 8001fa0:	f023 0307 	bicne.w	r3, r3, #7
 8001fa4:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001fa6:	b163      	cbz	r3, 8001fc2 <pvPortMalloc+0x8a>
 8001fa8:	4a29      	ldr	r2, [pc, #164]	; (8002050 <pvPortMalloc+0x118>)
 8001faa:	6816      	ldr	r6, [r2, #0]
 8001fac:	42b3      	cmp	r3, r6
 8001fae:	4690      	mov	r8, r2
 8001fb0:	d807      	bhi.n	8001fc2 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8001fb2:	4a25      	ldr	r2, [pc, #148]	; (8002048 <pvPortMalloc+0x110>)
 8001fb4:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001fb6:	6868      	ldr	r0, [r5, #4]
 8001fb8:	4283      	cmp	r3, r0
 8001fba:	d804      	bhi.n	8001fc6 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8001fbc:	6809      	ldr	r1, [r1, #0]
 8001fbe:	428d      	cmp	r5, r1
 8001fc0:	d107      	bne.n	8001fd2 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8001fc2:	2400      	movs	r4, #0
 8001fc4:	e02a      	b.n	800201c <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001fc6:	682c      	ldr	r4, [r5, #0]
 8001fc8:	2c00      	cmp	r4, #0
 8001fca:	d0f7      	beq.n	8001fbc <pvPortMalloc+0x84>
 8001fcc:	462a      	mov	r2, r5
 8001fce:	4625      	mov	r5, r4
 8001fd0:	e7f1      	b.n	8001fb6 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001fd2:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001fd4:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001fd6:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001fd8:	1ac2      	subs	r2, r0, r3
 8001fda:	2a10      	cmp	r2, #16
 8001fdc:	d90f      	bls.n	8001ffe <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001fde:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001fe0:	0741      	lsls	r1, r0, #29
 8001fe2:	d008      	beq.n	8001ff6 <pvPortMalloc+0xbe>
 8001fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fe8:	f383 8811 	msr	BASEPRI, r3
 8001fec:	f3bf 8f6f 	isb	sy
 8001ff0:	f3bf 8f4f 	dsb	sy
 8001ff4:	e7fe      	b.n	8001ff4 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001ff6:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001ff8:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001ffa:	f7ff ff79 	bl	8001ef0 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001ffe:	4913      	ldr	r1, [pc, #76]	; (800204c <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002000:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002002:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002004:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002006:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002008:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 800200a:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800200e:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002012:	bf38      	it	cc
 8002014:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002016:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002018:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800201a:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 800201c:	f7ff fd0c 	bl	8001a38 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002020:	0763      	lsls	r3, r4, #29
 8002022:	d008      	beq.n	8002036 <pvPortMalloc+0xfe>
 8002024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002028:	f383 8811 	msr	BASEPRI, r3
 800202c:	f3bf 8f6f 	isb	sy
 8002030:	f3bf 8f4f 	dsb	sy
 8002034:	e7fe      	b.n	8002034 <pvPortMalloc+0xfc>
}
 8002036:	4620      	mov	r0, r4
 8002038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800203c:	200001c4 	.word	0x200001c4
 8002040:	20003dc8 	.word	0x20003dc8
 8002044:	200001c8 	.word	0x200001c8
 8002048:	20003dd4 	.word	0x20003dd4
 800204c:	20003dd0 	.word	0x20003dd0
 8002050:	20003dcc 	.word	0x20003dcc

08002054 <vPortFree>:
{
 8002054:	b510      	push	{r4, lr}
	if( pv != NULL )
 8002056:	4604      	mov	r4, r0
 8002058:	b370      	cbz	r0, 80020b8 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800205a:	4a18      	ldr	r2, [pc, #96]	; (80020bc <vPortFree+0x68>)
 800205c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8002060:	6812      	ldr	r2, [r2, #0]
 8002062:	4213      	tst	r3, r2
 8002064:	d108      	bne.n	8002078 <vPortFree+0x24>
 8002066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800206a:	f383 8811 	msr	BASEPRI, r3
 800206e:	f3bf 8f6f 	isb	sy
 8002072:	f3bf 8f4f 	dsb	sy
 8002076:	e7fe      	b.n	8002076 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002078:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800207c:	b141      	cbz	r1, 8002090 <vPortFree+0x3c>
 800207e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002082:	f383 8811 	msr	BASEPRI, r3
 8002086:	f3bf 8f6f 	isb	sy
 800208a:	f3bf 8f4f 	dsb	sy
 800208e:	e7fe      	b.n	800208e <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002090:	ea23 0302 	bic.w	r3, r3, r2
 8002094:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8002098:	f7ff fc34 	bl	8001904 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800209c:	4a08      	ldr	r2, [pc, #32]	; (80020c0 <vPortFree+0x6c>)
 800209e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80020a2:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80020a4:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80020a8:	440b      	add	r3, r1
 80020aa:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80020ac:	f7ff ff20 	bl	8001ef0 <prvInsertBlockIntoFreeList>
}
 80020b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80020b4:	f7ff bcc0 	b.w	8001a38 <xTaskResumeAll>
 80020b8:	bd10      	pop	{r4, pc}
 80020ba:	bf00      	nop
 80020bc:	20003dc8 	.word	0x20003dc8
 80020c0:	20003dcc 	.word	0x20003dcc

080020c4 <vApplicationIdleHook>:
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80020c4:	4770      	bx	lr
	...

080020c8 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80020c8:	4b03      	ldr	r3, [pc, #12]	; (80020d8 <vApplicationGetIdleTaskMemory+0x10>)
 80020ca:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80020cc:	4b03      	ldr	r3, [pc, #12]	; (80020dc <vApplicationGetIdleTaskMemory+0x14>)
 80020ce:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80020d0:	2380      	movs	r3, #128	; 0x80
 80020d2:	6013      	str	r3, [r2, #0]
  /* place for user code */
}                   
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	20003fdc 	.word	0x20003fdc
 80020dc:	20003ddc 	.word	0x20003ddc

080020e0 <Delay>:
/**
 * @brief  Delays for amount of micro seconds
 * @param  micros: Number of microseconds for delay
 * @retval None
 */
__STATIC_INLINE void Delay(__IO uint32_t micros) {
 80020e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
#if !defined(STM32F0xx)
	uint32_t start = DWT->CYCCNT;
 80020e2:	4c09      	ldr	r4, [pc, #36]	; (8002108 <Delay+0x28>)
__STATIC_INLINE void Delay(__IO uint32_t micros) {
 80020e4:	9001      	str	r0, [sp, #4]
	uint32_t start = DWT->CYCCNT;
 80020e6:	6865      	ldr	r5, [r4, #4]
	
	/* Go to number of cycles for system */
	micros *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80020e8:	f7fe fc94 	bl	8000a14 <HAL_RCC_GetHCLKFreq>
 80020ec:	9b01      	ldr	r3, [sp, #4]
 80020ee:	4a07      	ldr	r2, [pc, #28]	; (800210c <Delay+0x2c>)
 80020f0:	fbb0 f0f2 	udiv	r0, r0, r2
 80020f4:	4343      	muls	r3, r0
 80020f6:	9301      	str	r3, [sp, #4]
	
	/* Delay till end */
	while ((DWT->CYCCNT - start) < micros);
 80020f8:	6863      	ldr	r3, [r4, #4]
 80020fa:	9a01      	ldr	r2, [sp, #4]
 80020fc:	1b5b      	subs	r3, r3, r5
 80020fe:	4293      	cmp	r3, r2
 8002100:	d3fa      	bcc.n	80020f8 <Delay+0x18>
	micros *= (SystemCoreClock / 1000000) / 5;
	
	/* Wait till done */
	while (micros--);
#endif
}
 8002102:	b003      	add	sp, #12
 8002104:	bd30      	pop	{r4, r5, pc}
 8002106:	bf00      	nop
 8002108:	e0001000 	.word	0xe0001000
 800210c:	000f4240 	.word	0x000f4240

08002110 <set_gpio_output>:
GPIO_InitTypeDef GPIO_InitStruct;
bool display_temp = true;

void set_gpio_output(void) {
	/*Configure GPIO pin output: PA2 */
	GPIO_InitStruct.Pin = DHT11_Pin;
 8002110:	4905      	ldr	r1, [pc, #20]	; (8002128 <set_gpio_output+0x18>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8002112:	4806      	ldr	r0, [pc, #24]	; (800212c <set_gpio_output+0x1c>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002114:	2301      	movs	r3, #1
 8002116:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800211a:	e9c1 2300 	strd	r2, r3, [r1]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211e:	2300      	movs	r3, #0
 8002120:	60cb      	str	r3, [r1, #12]
	HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8002122:	f7fe babb 	b.w	800069c <HAL_GPIO_Init>
 8002126:	bf00      	nop
 8002128:	200041a4 	.word	0x200041a4
 800212c:	40020000 	.word	0x40020000

08002130 <set_gpio_input>:
}

void set_gpio_input(void) {
	/*Configure GPIO pin input: PA2 */
	GPIO_InitStruct.Pin = DHT11_Pin;
 8002130:	4904      	ldr	r1, [pc, #16]	; (8002144 <set_gpio_input+0x14>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8002132:	4805      	ldr	r0, [pc, #20]	; (8002148 <set_gpio_input+0x18>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002134:	2300      	movs	r3, #0
 8002136:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800213a:	e9c1 2300 	strd	r2, r3, [r1]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	608b      	str	r3, [r1, #8]
	HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8002140:	f7fe baac 	b.w	800069c <HAL_GPIO_Init>
 8002144:	200041a4 	.word	0x200041a4
 8002148:	40020000 	.word	0x40020000

0800214c <DHT11_start>:
}

void DHT11_start(void) {
 800214c:	b510      	push	{r4, lr}
	set_gpio_output();  // set the pin as output
	HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, 0);   // pull the pin low
 800214e:	4c0d      	ldr	r4, [pc, #52]	; (8002184 <DHT11_start+0x38>)
	set_gpio_output();  // set the pin as output
 8002150:	f7ff ffde 	bl	8002110 <set_gpio_output>
	HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, 0);   // pull the pin low
 8002154:	2200      	movs	r2, #0
 8002156:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800215a:	4620      	mov	r0, r4
 800215c:	f7fe fb7e 	bl	800085c <HAL_GPIO_WritePin>
	Delay(18000);   // wait for 18ms
 8002160:	f244 6050 	movw	r0, #18000	; 0x4650
 8002164:	f7ff ffbc 	bl	80020e0 <Delay>
	HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, 1);   // pull the pin low
 8002168:	4620      	mov	r0, r4
 800216a:	2201      	movs	r2, #1
 800216c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002170:	f7fe fb74 	bl	800085c <HAL_GPIO_WritePin>
	Delay(20);
 8002174:	2014      	movs	r0, #20
 8002176:	f7ff ffb3 	bl	80020e0 <Delay>
	set_gpio_input();   // set as input
}
 800217a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	set_gpio_input();   // set as input
 800217e:	f7ff bfd7 	b.w	8002130 <set_gpio_input>
 8002182:	bf00      	nop
 8002184:	40020000 	.word	0x40020000

08002188 <check_response>:

uint8_t check_response(void) {
 8002188:	b538      	push	{r3, r4, r5, lr}
	uint8_t response = 0;
	Delay(40);
 800218a:	2028      	movs	r0, #40	; 0x28
 800218c:	f7ff ffa8 	bl	80020e0 <Delay>
	if (!(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin))) {
 8002190:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002194:	480d      	ldr	r0, [pc, #52]	; (80021cc <check_response+0x44>)
 8002196:	f7fe fb5b 	bl	8000850 <HAL_GPIO_ReadPin>
 800219a:	b9a8      	cbnz	r0, 80021c8 <check_response+0x40>
		Delay(80);
 800219c:	2050      	movs	r0, #80	; 0x50
 800219e:	f7ff ff9f 	bl	80020e0 <Delay>
		if ((HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin)))
 80021a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021a6:	4809      	ldr	r0, [pc, #36]	; (80021cc <check_response+0x44>)
 80021a8:	f7fe fb52 	bl	8000850 <HAL_GPIO_ReadPin>
			response = 1;
		else
			response = -1;
 80021ac:	2800      	cmp	r0, #0
 80021ae:	bf14      	ite	ne
 80021b0:	2401      	movne	r4, #1
 80021b2:	24ff      	moveq	r4, #255	; 0xff
	}
	while ((HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin)))
 80021b4:	4d05      	ldr	r5, [pc, #20]	; (80021cc <check_response+0x44>)
 80021b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021ba:	4628      	mov	r0, r5
 80021bc:	f7fe fb48 	bl	8000850 <HAL_GPIO_ReadPin>
 80021c0:	2800      	cmp	r0, #0
 80021c2:	d1f8      	bne.n	80021b6 <check_response+0x2e>
		;   // wait for the pin to go low

	return response;
}
 80021c4:	4620      	mov	r0, r4
 80021c6:	bd38      	pop	{r3, r4, r5, pc}
	uint8_t response = 0;
 80021c8:	2400      	movs	r4, #0
 80021ca:	e7f3      	b.n	80021b4 <check_response+0x2c>
 80021cc:	40020000 	.word	0x40020000

080021d0 <read_data>:

uint8_t read_data(void) {
 80021d0:	b570      	push	{r4, r5, r6, lr}
	uint8_t i, j;
	for (j = 0; j < 8; j++) {
		while (!(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin)))
 80021d2:	4e14      	ldr	r6, [pc, #80]	; (8002224 <read_data+0x54>)
uint8_t read_data(void) {
 80021d4:	2400      	movs	r4, #0
 80021d6:	2507      	movs	r5, #7
		while (!(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin)))
 80021d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021dc:	4811      	ldr	r0, [pc, #68]	; (8002224 <read_data+0x54>)
 80021de:	f7fe fb37 	bl	8000850 <HAL_GPIO_ReadPin>
 80021e2:	2800      	cmp	r0, #0
 80021e4:	d0f8      	beq.n	80021d8 <read_data+0x8>
			;   // wait for the pin to go high
		Delay(40);   // wait for 40 us
 80021e6:	2028      	movs	r0, #40	; 0x28
 80021e8:	f7ff ff7a 	bl	80020e0 <Delay>
		if ((HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin)) == 0) // if the pin is low
 80021ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021f0:	4630      	mov	r0, r6
 80021f2:	f7fe fb2d 	bl	8000850 <HAL_GPIO_ReadPin>
 80021f6:	2301      	movs	r3, #1
 80021f8:	40ab      	lsls	r3, r5
 80021fa:	b25b      	sxtb	r3, r3
 80021fc:	b264      	sxtb	r4, r4
 80021fe:	b970      	cbnz	r0, 800221e <read_data+0x4e>
				{
			i &= ~(1 << (7 - j));   // write 0
 8002200:	ea24 0403 	bic.w	r4, r4, r3
		} else
			i |= (1 << (7 - j));  // if the pin is high, write 1
 8002204:	b2e4      	uxtb	r4, r4
		while ((HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin)))
 8002206:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800220a:	4630      	mov	r0, r6
 800220c:	f7fe fb20 	bl	8000850 <HAL_GPIO_ReadPin>
 8002210:	2800      	cmp	r0, #0
 8002212:	d1f8      	bne.n	8002206 <read_data+0x36>
	for (j = 0; j < 8; j++) {
 8002214:	f115 35ff 	adds.w	r5, r5, #4294967295
 8002218:	d2de      	bcs.n	80021d8 <read_data+0x8>
			;
		// wait for the pin to go low
	}
	return i;
}
 800221a:	4620      	mov	r0, r4
 800221c:	bd70      	pop	{r4, r5, r6, pc}
			i |= (1 << (7 - j));  // if the pin is high, write 1
 800221e:	431c      	orrs	r4, r3
 8002220:	e7f0      	b.n	8002204 <read_data+0x34>
 8002222:	bf00      	nop
 8002224:	40020000 	.word	0x40020000

08002228 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002228:	b583      	push	{r0, r1, r7, lr}
		Rh_byte2 = read_data();
		Temp_byte1 = read_data();
		Temp_byte2 = read_data();
		sum = read_data();

		humidity_int_units = (Rh_byte1) % 10;
 800222a:	4f49      	ldr	r7, [pc, #292]	; (8002350 <StartDefaultTask+0x128>)
		for(i=0;i<30;i++){
 800222c:	4c49      	ldr	r4, [pc, #292]	; (8002354 <StartDefaultTask+0x12c>)
//						== GPIO_PIN_RESET) {
//

		vTaskDelay(3000);

		if (HAL_GPIO_ReadPin(BlueB_GPIO_Port, BlueB_Pin)) {
 800222e:	4e4a      	ldr	r6, [pc, #296]	; (8002358 <StartDefaultTask+0x130>)
		for(i=0;i<30;i++){
 8002230:	2300      	movs	r3, #0
 8002232:	6023      	str	r3, [r4, #0]
 8002234:	6823      	ldr	r3, [r4, #0]
 8002236:	2b1d      	cmp	r3, #29
 8002238:	dcf8      	bgt.n	800222c <StartDefaultTask+0x4>
		DHT11_start();
 800223a:	f7ff ff87 	bl	800214c <DHT11_start>
		presence = check_response();
 800223e:	f7ff ffa3 	bl	8002188 <check_response>
 8002242:	4b46      	ldr	r3, [pc, #280]	; (800235c <StartDefaultTask+0x134>)
		Rh_byte1 = read_data();
 8002244:	4d46      	ldr	r5, [pc, #280]	; (8002360 <StartDefaultTask+0x138>)
		presence = check_response();
 8002246:	7018      	strb	r0, [r3, #0]
		Rh_byte1 = read_data();
 8002248:	f7ff ffc2 	bl	80021d0 <read_data>
 800224c:	7028      	strb	r0, [r5, #0]
		Rh_byte2 = read_data();
 800224e:	f7ff ffbf 	bl	80021d0 <read_data>
 8002252:	4b44      	ldr	r3, [pc, #272]	; (8002364 <StartDefaultTask+0x13c>)
		humidity_int_decimals = (Rh_byte1) / 10;
 8002254:	f8df 8140 	ldr.w	r8, [pc, #320]	; 8002398 <StartDefaultTask+0x170>
		Rh_byte2 = read_data();
 8002258:	7018      	strb	r0, [r3, #0]
		Temp_byte1 = read_data();
 800225a:	f7ff ffb9 	bl	80021d0 <read_data>
 800225e:	4b42      	ldr	r3, [pc, #264]	; (8002368 <StartDefaultTask+0x140>)
 8002260:	f8df 9138 	ldr.w	r9, [pc, #312]	; 800239c <StartDefaultTask+0x174>
 8002264:	7018      	strb	r0, [r3, #0]
		Temp_byte2 = read_data();
 8002266:	f7ff ffb3 	bl	80021d0 <read_data>
 800226a:	4b40      	ldr	r3, [pc, #256]	; (800236c <StartDefaultTask+0x144>)
 800226c:	7018      	strb	r0, [r3, #0]
		sum = read_data();
 800226e:	f7ff ffaf 	bl	80021d0 <read_data>
 8002272:	4b3f      	ldr	r3, [pc, #252]	; (8002370 <StartDefaultTask+0x148>)
 8002274:	8018      	strh	r0, [r3, #0]
		humidity_int_units = (Rh_byte1) % 10;
 8002276:	782b      	ldrb	r3, [r5, #0]
 8002278:	250a      	movs	r5, #10
 800227a:	fbb3 f2f5 	udiv	r2, r3, r5
 800227e:	fb05 3112 	mls	r1, r5, r2, r3
 8002282:	7039      	strb	r1, [r7, #0]
		humidity_int_decimals = (Rh_byte1) / 10;
 8002284:	f888 2000 	strb.w	r2, [r8]
		humidityTab[i] = (uint8_t) Rh_byte1;
 8002288:	493a      	ldr	r1, [pc, #232]	; (8002374 <StartDefaultTask+0x14c>)
 800228a:	6822      	ldr	r2, [r4, #0]
		vTaskDelay(3000);
 800228c:	f640 30b8 	movw	r0, #3000	; 0xbb8
		humidityTab[i] = (uint8_t) Rh_byte1;
 8002290:	548b      	strb	r3, [r1, r2]
		vTaskDelay(3000);
 8002292:	f7ff fc49 	bl	8001b28 <vTaskDelay>
		if (HAL_GPIO_ReadPin(BlueB_GPIO_Port, BlueB_Pin)) {
 8002296:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800229a:	4630      	mov	r0, r6
 800229c:	f7fe fad8 	bl	8000850 <HAL_GPIO_ReadPin>
 80022a0:	2800      	cmp	r0, #0
 80022a2:	d040      	beq.n	8002326 <StartDefaultTask+0xfe>
			if (TM_DS18B20_Is(DS_ROM)) {
 80022a4:	4834      	ldr	r0, [pc, #208]	; (8002378 <StartDefaultTask+0x150>)
 80022a6:	f000 fc4f 	bl	8002b48 <TM_DS18B20_Is>
 80022aa:	b308      	cbz	r0, 80022f0 <StartDefaultTask+0xc8>
				/* Everything is done */
				if (TM_DS18B20_AllDone(&OW)) {
 80022ac:	4833      	ldr	r0, [pc, #204]	; (800237c <StartDefaultTask+0x154>)
 80022ae:	f000 fcf5 	bl	8002c9c <TM_DS18B20_AllDone>
 80022b2:	b1e8      	cbz	r0, 80022f0 <StartDefaultTask+0xc8>
					/* Read temperature from device */
					if (TM_DS18B20_Read(&OW, DS_ROM, &temp)) {
 80022b4:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 80023a0 <StartDefaultTask+0x178>
 80022b8:	492f      	ldr	r1, [pc, #188]	; (8002378 <StartDefaultTask+0x150>)
 80022ba:	4830      	ldr	r0, [pc, #192]	; (800237c <StartDefaultTask+0x154>)
 80022bc:	4652      	mov	r2, sl
 80022be:	f000 fb59 	bl	8002974 <TM_DS18B20_Read>
 80022c2:	b1a8      	cbz	r0, 80022f0 <StartDefaultTask+0xc8>
						/* Temp read OK, CRC is OK */

						/* Start again on all sensors */
						TM_DS18B20_StartAll(&OW);
 80022c4:	482d      	ldr	r0, [pc, #180]	; (800237c <StartDefaultTask+0x154>)
 80022c6:	f000 fb47 	bl	8002958 <TM_DS18B20_StartAll>

						temp_int_units = ((uint8_t) temp) % 10;
 80022ca:	edda 7a00 	vldr	s15, [sl]
 80022ce:	492c      	ldr	r1, [pc, #176]	; (8002380 <StartDefaultTask+0x158>)
 80022d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022d4:	edcd 7a01 	vstr	s15, [sp, #4]
 80022d8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80022dc:	fbb3 f2f5 	udiv	r2, r3, r5
 80022e0:	fb05 3512 	mls	r5, r5, r2, r3
 80022e4:	700d      	strb	r5, [r1, #0]
						temp_int_decimals = ((uint8_t) temp) / 10;
 80022e6:	4927      	ldr	r1, [pc, #156]	; (8002384 <StartDefaultTask+0x15c>)
 80022e8:	700a      	strb	r2, [r1, #0]

						temperatureTab[i] = (uint8_t) temp;
 80022ea:	6822      	ldr	r2, [r4, #0]
 80022ec:	4926      	ldr	r1, [pc, #152]	; (8002388 <StartDefaultTask+0x160>)
 80022ee:	548b      	strb	r3, [r1, r2]
				== GPIO_PIN_RESET) {

			display_temp = !display_temp;
		}

		if (display_temp) {
 80022f0:	f899 1000 	ldrb.w	r1, [r9]
 80022f4:	4b25      	ldr	r3, [pc, #148]	; (800238c <StartDefaultTask+0x164>)
 80022f6:	4a26      	ldr	r2, [pc, #152]	; (8002390 <StartDefaultTask+0x168>)
 80022f8:	b319      	cbz	r1, 8002342 <StartDefaultTask+0x11a>
			GPIOB->ODR = numbers[temp_int_decimals];
 80022fa:	4922      	ldr	r1, [pc, #136]	; (8002384 <StartDefaultTask+0x15c>)
 80022fc:	7809      	ldrb	r1, [r1, #0]
 80022fe:	5c59      	ldrb	r1, [r3, r1]
 8002300:	6151      	str	r1, [r2, #20]
			GPIOC->ODR = numbers[temp_int_units];
 8002302:	4a1f      	ldr	r2, [pc, #124]	; (8002380 <StartDefaultTask+0x158>)
 8002304:	7812      	ldrb	r2, [r2, #0]
		} else {
			GPIOB->ODR = numbers[humidity_int_decimals];
			GPIOC->ODR = numbers[humidity_int_units];
 8002306:	5c9b      	ldrb	r3, [r3, r2]
		}
		LD2_TOGGLE();
 8002308:	4a22      	ldr	r2, [pc, #136]	; (8002394 <StartDefaultTask+0x16c>)
			GPIOC->ODR = numbers[humidity_int_units];
 800230a:	6173      	str	r3, [r6, #20]
		LD2_TOGGLE();
 800230c:	6953      	ldr	r3, [r2, #20]
 800230e:	f083 0320 	eor.w	r3, r3, #32
 8002312:	6153      	str	r3, [r2, #20]
		if(i==29)
 8002314:	6823      	ldr	r3, [r4, #0]
 8002316:	2b1d      	cmp	r3, #29
			i=0;
 8002318:	bf04      	itt	eq
 800231a:	2300      	moveq	r3, #0
 800231c:	6023      	streq	r3, [r4, #0]
		for(i=0;i<30;i++){
 800231e:	6823      	ldr	r3, [r4, #0]
 8002320:	3301      	adds	r3, #1
 8002322:	6023      	str	r3, [r4, #0]
 8002324:	e786      	b.n	8002234 <StartDefaultTask+0xc>
		} else if (HAL_GPIO_ReadPin(BlueB_GPIO_Port, BlueB_Pin)
 8002326:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800232a:	4630      	mov	r0, r6
 800232c:	f7fe fa90 	bl	8000850 <HAL_GPIO_ReadPin>
 8002330:	2800      	cmp	r0, #0
 8002332:	d1dd      	bne.n	80022f0 <StartDefaultTask+0xc8>
			display_temp = !display_temp;
 8002334:	f899 3000 	ldrb.w	r3, [r9]
 8002338:	f083 0301 	eor.w	r3, r3, #1
 800233c:	f889 3000 	strb.w	r3, [r9]
 8002340:	e7d6      	b.n	80022f0 <StartDefaultTask+0xc8>
			GPIOB->ODR = numbers[humidity_int_decimals];
 8002342:	f898 1000 	ldrb.w	r1, [r8]
 8002346:	5c59      	ldrb	r1, [r3, r1]
 8002348:	6151      	str	r1, [r2, #20]
			GPIOC->ODR = numbers[humidity_int_units];
 800234a:	783a      	ldrb	r2, [r7, #0]
 800234c:	e7db      	b.n	8002306 <StartDefaultTask+0xde>
 800234e:	bf00      	nop
 8002350:	2000414d 	.word	0x2000414d
 8002354:	20004030 	.word	0x20004030
 8002358:	40020800 	.word	0x40020800
 800235c:	20004034 	.word	0x20004034
 8002360:	20004150 	.word	0x20004150
 8002364:	200041a2 	.word	0x200041a2
 8002368:	200041a1 	.word	0x200041a1
 800236c:	2000424c 	.word	0x2000424c
 8002370:	2000414e 	.word	0x2000414e
 8002374:	20004160 	.word	0x20004160
 8002378:	20004120 	.word	0x20004120
 800237c:	20004184 	.word	0x20004184
 8002380:	20004206 	.word	0x20004206
 8002384:	20004180 	.word	0x20004180
 8002388:	20004128 	.word	0x20004128
 800238c:	20000005 	.word	0x20000005
 8002390:	40020400 	.word	0x40020400
 8002394:	40020000 	.word	0x40020000
 8002398:	200041a0 	.word	0x200041a0
 800239c:	20000004 	.word	0x20000004
 80023a0:	2000415c 	.word	0x2000415c

080023a4 <SystemClock_Config>:
{
 80023a4:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023a6:	2414      	movs	r4, #20
{
 80023a8:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023aa:	4622      	mov	r2, r4
 80023ac:	2100      	movs	r1, #0
 80023ae:	a808      	add	r0, sp, #32
 80023b0:	f000 ff33 	bl	800321a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023b4:	4622      	mov	r2, r4
 80023b6:	2100      	movs	r1, #0
 80023b8:	a802      	add	r0, sp, #8
 80023ba:	f000 ff2e 	bl	800321a <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 80023be:	2500      	movs	r5, #0
 80023c0:	4b1c      	ldr	r3, [pc, #112]	; (8002434 <SystemClock_Config+0x90>)
 80023c2:	9500      	str	r5, [sp, #0]
 80023c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023c6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80023ca:	641a      	str	r2, [r3, #64]	; 0x40
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d2:	9300      	str	r3, [sp, #0]
 80023d4:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023d6:	4b18      	ldr	r3, [pc, #96]	; (8002438 <SystemClock_Config+0x94>)
 80023d8:	9501      	str	r5, [sp, #4]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80023e8:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023ea:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023ec:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023ee:	2310      	movs	r3, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80023f0:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023f2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 180;
 80023f6:	2108      	movs	r1, #8
 80023f8:	23b4      	movs	r3, #180	; 0xb4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023fa:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLN = 180;
 80023fc:	e9cd 130f 	strd	r1, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002400:	9407      	str	r4, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002402:	e9cd 450d 	strd	r4, r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002406:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLR = 2;
 800240a:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800240c:	f7fe fb8e 	bl	8000b2c <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002410:	f7fe fa2a 	bl	8000868 <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002414:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002416:	e9cd 3402 	strd	r3, r4, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800241a:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800241e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002422:	e9cd 0305 	strd	r0, r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002426:	2105      	movs	r1, #5
 8002428:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800242a:	9504      	str	r5, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800242c:	f7fe fa58 	bl	80008e0 <HAL_RCC_ClockConfig>
}
 8002430:	b015      	add	sp, #84	; 0x54
 8002432:	bd30      	pop	{r4, r5, pc}
 8002434:	40023800 	.word	0x40023800
 8002438:	40007000 	.word	0x40007000

0800243c <main>:
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b08c      	sub	sp, #48	; 0x30
	TM_RCC_InitSystem();
 8002440:	f000 fe3e 	bl	80030c0 <TM_RCC_InitSystem>
	GPIOC->ODR = 0xff;
 8002444:	4c68      	ldr	r4, [pc, #416]	; (80025e8 <main+0x1ac>)
	GPIOB->ODR = 0xff;
 8002446:	4a69      	ldr	r2, [pc, #420]	; (80025ec <main+0x1b0>)
	GPIOC->ODR = 0xff;
 8002448:	23ff      	movs	r3, #255	; 0xff
 800244a:	6163      	str	r3, [r4, #20]
	GPIOB->ODR = 0xff;
 800244c:	6153      	str	r3, [r2, #20]
  HAL_Init();
 800244e:	f7fe f8b7 	bl	80005c0 <HAL_Init>
	TM_OneWire_Init(&OW, GPIOC, GPIO_PIN_9);
 8002452:	4867      	ldr	r0, [pc, #412]	; (80025f0 <main+0x1b4>)
 8002454:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002458:	4621      	mov	r1, r4
 800245a:	f000 fcef 	bl	8002e3c <TM_OneWire_Init>
	if (TM_OneWire_First(&OW)) {
 800245e:	4864      	ldr	r0, [pc, #400]	; (80025f0 <main+0x1b4>)
 8002460:	f000 fdee 	bl	8003040 <TM_OneWire_First>
 8002464:	b118      	cbz	r0, 800246e <main+0x32>
		TM_OneWire_GetFullROM(&OW, DS_ROM);
 8002466:	4963      	ldr	r1, [pc, #396]	; (80025f4 <main+0x1b8>)
 8002468:	4861      	ldr	r0, [pc, #388]	; (80025f0 <main+0x1b4>)
 800246a:	f000 fe00 	bl	800306e <TM_OneWire_GetFullROM>
	if (TM_DS18B20_Is(DS_ROM)) {
 800246e:	4861      	ldr	r0, [pc, #388]	; (80025f4 <main+0x1b8>)
 8002470:	f000 fb6a 	bl	8002b48 <TM_DS18B20_Is>
 8002474:	b190      	cbz	r0, 800249c <main+0x60>
		TM_DS18B20_SetResolution(&OW, DS_ROM, TM_DS18B20_Resolution_9bits);
 8002476:	2209      	movs	r2, #9
 8002478:	495e      	ldr	r1, [pc, #376]	; (80025f4 <main+0x1b8>)
 800247a:	485d      	ldr	r0, [pc, #372]	; (80025f0 <main+0x1b4>)
 800247c:	f000 fafc 	bl	8002a78 <TM_DS18B20_SetResolution>
		TM_DS18B20_SetAlarmHighTemperature(&OW, DS_ROM, 30);
 8002480:	221e      	movs	r2, #30
 8002482:	495c      	ldr	r1, [pc, #368]	; (80025f4 <main+0x1b8>)
 8002484:	485a      	ldr	r0, [pc, #360]	; (80025f0 <main+0x1b4>)
 8002486:	f000 fbb7 	bl	8002bf8 <TM_DS18B20_SetAlarmHighTemperature>
		TM_DS18B20_SetAlarmLowTemperature(&OW, DS_ROM, 10);
 800248a:	495a      	ldr	r1, [pc, #360]	; (80025f4 <main+0x1b8>)
 800248c:	4858      	ldr	r0, [pc, #352]	; (80025f0 <main+0x1b4>)
 800248e:	220a      	movs	r2, #10
 8002490:	f000 fb60 	bl	8002b54 <TM_DS18B20_SetAlarmLowTemperature>
		TM_DS18B20_Start(&OW, DS_ROM);
 8002494:	4957      	ldr	r1, [pc, #348]	; (80025f4 <main+0x1b8>)
 8002496:	4856      	ldr	r0, [pc, #344]	; (80025f0 <main+0x1b4>)
 8002498:	f000 fa4a 	bl	8002930 <TM_DS18B20_Start>
  SystemClock_Config();
 800249c:	f7ff ff82 	bl	80023a4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a0:	2214      	movs	r2, #20
 80024a2:	2100      	movs	r1, #0
 80024a4:	eb0d 0002 	add.w	r0, sp, r2
 80024a8:	f000 feb7 	bl	800321a <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024ac:	2400      	movs	r4, #0
 80024ae:	4b52      	ldr	r3, [pc, #328]	; (80025f8 <main+0x1bc>)
 80024b0:	9401      	str	r4, [sp, #4]
 80024b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOC, A_Pin|B_Pin|C_Pin|D_Pin
 80024b4:	484c      	ldr	r0, [pc, #304]	; (80025e8 <main+0x1ac>)
	htim7.Instance = TIM7;
 80024b6:	4e51      	ldr	r6, [pc, #324]	; (80025fc <main+0x1c0>)
  huart2.Instance = USART2;
 80024b8:	4d51      	ldr	r5, [pc, #324]	; (8002600 <main+0x1c4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024ba:	f042 0204 	orr.w	r2, r2, #4
 80024be:	631a      	str	r2, [r3, #48]	; 0x30
 80024c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024c2:	f002 0204 	and.w	r2, r2, #4
 80024c6:	9201      	str	r2, [sp, #4]
 80024c8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024ca:	9402      	str	r4, [sp, #8]
 80024cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024d2:	631a      	str	r2, [r3, #48]	; 0x30
 80024d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024d6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80024da:	9202      	str	r2, [sp, #8]
 80024dc:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024de:	9403      	str	r4, [sp, #12]
 80024e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024e2:	f042 0201 	orr.w	r2, r2, #1
 80024e6:	631a      	str	r2, [r3, #48]	; 0x30
 80024e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024ea:	f002 0201 	and.w	r2, r2, #1
 80024ee:	9203      	str	r2, [sp, #12]
 80024f0:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024f2:	9404      	str	r4, [sp, #16]
 80024f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024f6:	f042 0202 	orr.w	r2, r2, #2
 80024fa:	631a      	str	r2, [r3, #48]	; 0x30
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, A_Pin|B_Pin|C_Pin|D_Pin
 8002504:	4622      	mov	r2, r4
 8002506:	f240 21ff 	movw	r1, #767	; 0x2ff
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800250a:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, A_Pin|B_Pin|C_Pin|D_Pin
 800250c:	f7fe f9a6 	bl	800085c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002510:	4622      	mov	r2, r4
 8002512:	2120      	movs	r1, #32
 8002514:	483b      	ldr	r0, [pc, #236]	; (8002604 <main+0x1c8>)
 8002516:	f7fe f9a1 	bl	800085c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, A1_Pin|B1_Pin|C1_Pin|D1_Pin
 800251a:	4622      	mov	r2, r4
 800251c:	217f      	movs	r1, #127	; 0x7f
 800251e:	4833      	ldr	r0, [pc, #204]	; (80025ec <main+0x1b0>)
 8002520:	f7fe f99c 	bl	800085c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002524:	4b38      	ldr	r3, [pc, #224]	; (8002608 <main+0x1cc>)
  HAL_GPIO_Init(BlueB_GPIO_Port, &GPIO_InitStruct);
 8002526:	4830      	ldr	r0, [pc, #192]	; (80025e8 <main+0x1ac>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002528:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800252a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  HAL_GPIO_Init(BlueB_GPIO_Port, &GPIO_InitStruct);
 800252e:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002530:	e9cd 2305 	strd	r2, r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002534:	2701      	movs	r7, #1
  HAL_GPIO_Init(BlueB_GPIO_Port, &GPIO_InitStruct);
 8002536:	f7fe f8b1 	bl	800069c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800253a:	f240 23ff 	movw	r3, #767	; 0x2ff
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800253e:	a905      	add	r1, sp, #20
 8002540:	4829      	ldr	r0, [pc, #164]	; (80025e8 <main+0x1ac>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002542:	e9cd 3705 	strd	r3, r7, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002546:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800254a:	f7fe f8a7 	bl	800069c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 800254e:	2320      	movs	r3, #32
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002550:	a905      	add	r1, sp, #20
 8002552:	482c      	ldr	r0, [pc, #176]	; (8002604 <main+0x1c8>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002554:	e9cd 3705 	strd	r3, r7, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002558:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800255c:	f7fe f89e 	bl	800069c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = A1_Pin|B1_Pin|C1_Pin|D1_Pin
 8002560:	237f      	movs	r3, #127	; 0x7f
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002562:	a905      	add	r1, sp, #20
 8002564:	4821      	ldr	r0, [pc, #132]	; (80025ec <main+0x1b0>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002566:	e9cd 3705 	strd	r3, r7, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800256a:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800256e:	f7fe f895 	bl	800069c <HAL_GPIO_Init>
	htim7.Init.Prescaler = 179;
 8002572:	4926      	ldr	r1, [pc, #152]	; (800260c <main+0x1d0>)
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002574:	60b4      	str	r4, [r6, #8]
	htim7.Init.Prescaler = 179;
 8002576:	23b3      	movs	r3, #179	; 0xb3
 8002578:	e9c6 1300 	strd	r1, r3, [r6]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 800257c:	4630      	mov	r0, r6
	htim7.Init.Period = 89;
 800257e:	2359      	movs	r3, #89	; 0x59
 8002580:	60f3      	str	r3, [r6, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002582:	61b4      	str	r4, [r6, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002584:	e9cd 4405 	strd	r4, r4, [sp, #20]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 8002588:	f7fe fd86 	bl	8001098 <HAL_TIM_Base_Init>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig)
 800258c:	a905      	add	r1, sp, #20
 800258e:	4630      	mov	r0, r6
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002590:	e9cd 4405 	strd	r4, r4, [sp, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig)
 8002594:	f7fe fd9a 	bl	80010cc <HAL_TIMEx_MasterConfigSynchronization>
  huart2.Init.BaudRate = 115200;
 8002598:	481d      	ldr	r0, [pc, #116]	; (8002610 <main+0x1d4>)
  huart2.Init.Parity = UART_PARITY_NONE;
 800259a:	612c      	str	r4, [r5, #16]
  huart2.Init.BaudRate = 115200;
 800259c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80025a0:	e9c5 0300 	strd	r0, r3, [r5]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80025a4:	230c      	movs	r3, #12
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80025a6:	4628      	mov	r0, r5
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025a8:	e9c5 3405 	strd	r3, r4, [r5, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80025ac:	e9c5 4402 	strd	r4, r4, [r5, #8]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80025b0:	61ec      	str	r4, [r5, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80025b2:	f7fe fec5 	bl	8001340 <HAL_UART_Init>
	HAL_TIM_Base_Start_IT(&htim7);
 80025b6:	4630      	mov	r0, r6
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 80025b8:	4e16      	ldr	r6, [pc, #88]	; (8002614 <main+0x1d8>)
	HAL_TIM_Base_Start_IT(&htim7);
 80025ba:	f7fe fc51 	bl	8000e60 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart2, (uint8_t*) str1, 1);
 80025be:	463a      	mov	r2, r7
 80025c0:	4915      	ldr	r1, [pc, #84]	; (8002618 <main+0x1dc>)
 80025c2:	4628      	mov	r0, r5
 80025c4:	f7fe ff09 	bl	80013da <HAL_UART_Receive_IT>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 80025c8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80025ca:	ad05      	add	r5, sp, #20
 80025cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025ce:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80025d2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80025d6:	4621      	mov	r1, r4
 80025d8:	a805      	add	r0, sp, #20
 80025da:	f7fe ff2a 	bl	8001432 <osThreadCreate>
 80025de:	4b0f      	ldr	r3, [pc, #60]	; (800261c <main+0x1e0>)
 80025e0:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80025e2:	f7fe ff21 	bl	8001428 <osKernelStart>
 80025e6:	e7fe      	b.n	80025e6 <main+0x1aa>
 80025e8:	40020800 	.word	0x40020800
 80025ec:	40020400 	.word	0x40020400
 80025f0:	20004184 	.word	0x20004184
 80025f4:	20004120 	.word	0x20004120
 80025f8:	40023800 	.word	0x40023800
 80025fc:	20004208 	.word	0x20004208
 8002600:	200041c0 	.word	0x200041c0
 8002604:	40020000 	.word	0x40020000
 8002608:	10210000 	.word	0x10210000
 800260c:	40001400 	.word	0x40001400
 8002610:	40004400 	.word	0x40004400
 8002614:	08003a3c 	.word	0x08003a3c
 8002618:	20004035 	.word	0x20004035
 800261c:	200040bc 	.word	0x200040bc

08002620 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002620:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM7) {
 8002622:	6802      	ldr	r2, [r0, #0]
 8002624:	4b0a      	ldr	r3, [pc, #40]	; (8002650 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002626:	429a      	cmp	r2, r3
 8002628:	d110      	bne.n	800264c <HAL_TIM_PeriodElapsedCallback+0x2c>
		HAL_IncTick();
 800262a:	f000 f943 	bl	80028b4 <HAL_IncTick>
		uint8_t dupa = 6;
		sprintf(str1, "test %d \r\n", dupa);
 800262e:	2206      	movs	r2, #6
 8002630:	4908      	ldr	r1, [pc, #32]	; (8002654 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002632:	4809      	ldr	r0, [pc, #36]	; (8002658 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002634:	f000 feb2 	bl	800339c <siprintf>
		HAL_UART_Transmit_IT(&huart2, (uint8_t*)str1, strlen(str1));
 8002638:	4807      	ldr	r0, [pc, #28]	; (8002658 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800263a:	f7fd fde9 	bl	8000210 <strlen>
 800263e:	4906      	ldr	r1, [pc, #24]	; (8002658 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002640:	b282      	uxth	r2, r0
	}
	/* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002642:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_UART_Transmit_IT(&huart2, (uint8_t*)str1, strlen(str1));
 8002646:	4805      	ldr	r0, [pc, #20]	; (800265c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002648:	f7fe bea8 	b.w	800139c <HAL_UART_Transmit_IT>
}
 800264c:	bd08      	pop	{r3, pc}
 800264e:	bf00      	nop
 8002650:	40001400 	.word	0x40001400
 8002654:	08003a5d 	.word	0x08003a5d
 8002658:	20004035 	.word	0x20004035
 800265c:	200041c0 	.word	0x200041c0

08002660 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002660:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002662:	4b0e      	ldr	r3, [pc, #56]	; (800269c <HAL_MspInit+0x3c>)
 8002664:	2200      	movs	r2, #0
 8002666:	9200      	str	r2, [sp, #0]
 8002668:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800266a:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800266e:	6459      	str	r1, [r3, #68]	; 0x44
 8002670:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002672:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8002676:	9100      	str	r1, [sp, #0]
 8002678:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800267a:	9201      	str	r2, [sp, #4]
 800267c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800267e:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002682:	6419      	str	r1, [r3, #64]	; 0x40
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800268a:	9301      	str	r3, [sp, #4]
 800268c:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800268e:	210f      	movs	r1, #15
 8002690:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002694:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002696:	f7fd bfbf 	b.w	8000618 <HAL_NVIC_SetPriority>
 800269a:	bf00      	nop
 800269c:	40023800 	.word	0x40023800

080026a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026a0:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM7)
 80026a2:	4b0f      	ldr	r3, [pc, #60]	; (80026e0 <HAL_TIM_Base_MspInit+0x40>)
 80026a4:	6802      	ldr	r2, [r0, #0]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d116      	bne.n	80026d8 <HAL_TIM_Base_MspInit+0x38>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80026aa:	2200      	movs	r2, #0
 80026ac:	f503 3309 	add.w	r3, r3, #140288	; 0x22400
 80026b0:	9201      	str	r2, [sp, #4]
 80026b2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80026b4:	f041 0120 	orr.w	r1, r1, #32
 80026b8:	6419      	str	r1, [r3, #64]	; 0x40
 80026ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026bc:	f003 0320 	and.w	r3, r3, #32
 80026c0:	9301      	str	r3, [sp, #4]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80026c2:	4611      	mov	r1, r2
 80026c4:	2037      	movs	r0, #55	; 0x37
    __HAL_RCC_TIM7_CLK_ENABLE();
 80026c6:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80026c8:	f7fd ffa6 	bl	8000618 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80026cc:	2037      	movs	r0, #55	; 0x37
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80026ce:	b003      	add	sp, #12
 80026d0:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80026d4:	f7fd bfd4 	b.w	8000680 <HAL_NVIC_EnableIRQ>
}
 80026d8:	b003      	add	sp, #12
 80026da:	f85d fb04 	ldr.w	pc, [sp], #4
 80026de:	bf00      	nop
 80026e0:	40001400 	.word	0x40001400

080026e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026e4:	b510      	push	{r4, lr}
 80026e6:	4604      	mov	r4, r0
 80026e8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ea:	2214      	movs	r2, #20
 80026ec:	2100      	movs	r1, #0
 80026ee:	a803      	add	r0, sp, #12
 80026f0:	f000 fd93 	bl	800321a <memset>
  if(huart->Instance==USART2)
 80026f4:	6822      	ldr	r2, [r4, #0]
 80026f6:	4b15      	ldr	r3, [pc, #84]	; (800274c <HAL_UART_MspInit+0x68>)
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d124      	bne.n	8002746 <HAL_UART_MspInit+0x62>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80026fc:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002700:	2100      	movs	r1, #0
 8002702:	9101      	str	r1, [sp, #4]
 8002704:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002706:	4812      	ldr	r0, [pc, #72]	; (8002750 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8002708:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800270c:	641a      	str	r2, [r3, #64]	; 0x40
 800270e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002710:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002714:	9201      	str	r2, [sp, #4]
 8002716:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002718:	9102      	str	r1, [sp, #8]
 800271a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800271c:	f042 0201 	orr.w	r2, r2, #1
 8002720:	631a      	str	r2, [r3, #48]	; 0x30
 8002722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	9302      	str	r3, [sp, #8]
 800272a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800272c:	220c      	movs	r2, #12
 800272e:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002730:	2101      	movs	r1, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002732:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002736:	2303      	movs	r3, #3
 8002738:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800273c:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800273e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002740:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002742:	f7fd ffab 	bl	800069c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002746:	b008      	add	sp, #32
 8002748:	bd10      	pop	{r4, pc}
 800274a:	bf00      	nop
 800274c:	40004400 	.word	0x40004400
 8002750:	40020000 	.word	0x40020000

08002754 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002754:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002756:	4601      	mov	r1, r0
{
 8002758:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800275a:	2200      	movs	r2, #0
 800275c:	2036      	movs	r0, #54	; 0x36
 800275e:	f7fd ff5b 	bl	8000618 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002762:	2036      	movs	r0, #54	; 0x36
 8002764:	f7fd ff8c 	bl	8000680 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002768:	2500      	movs	r5, #0
 800276a:	4b15      	ldr	r3, [pc, #84]	; (80027c0 <HAL_InitTick+0x6c>)
 800276c:	9502      	str	r5, [sp, #8]
 800276e:	6c1a      	ldr	r2, [r3, #64]	; 0x40

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002770:	4c14      	ldr	r4, [pc, #80]	; (80027c4 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002772:	f042 0210 	orr.w	r2, r2, #16
 8002776:	641a      	str	r2, [r3, #64]	; 0x40
 8002778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277a:	f003 0310 	and.w	r3, r3, #16
 800277e:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002780:	a901      	add	r1, sp, #4
 8002782:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002784:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002786:	f7fe f96b 	bl	8000a60 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800278a:	f7fe f949 	bl	8000a20 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 800278e:	4b0e      	ldr	r3, [pc, #56]	; (80027c8 <HAL_InitTick+0x74>)
 8002790:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8002792:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002796:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002798:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800279a:	4b0c      	ldr	r3, [pc, #48]	; (80027cc <HAL_InitTick+0x78>)
 800279c:	fbb0 f0f3 	udiv	r0, r0, r3
 80027a0:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 80027a2:	6060      	str	r0, [r4, #4]
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80027a4:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 80027a6:	6125      	str	r5, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027a8:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80027aa:	f7fe fc75 	bl	8001098 <HAL_TIM_Base_Init>
 80027ae:	b920      	cbnz	r0, 80027ba <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80027b0:	4620      	mov	r0, r4
 80027b2:	f7fe fb55 	bl	8000e60 <HAL_TIM_Base_Start_IT>
  }

  /* Return function status */
  return HAL_ERROR;
}
 80027b6:	b009      	add	sp, #36	; 0x24
 80027b8:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 80027ba:	2001      	movs	r0, #1
 80027bc:	e7fb      	b.n	80027b6 <HAL_InitTick+0x62>
 80027be:	bf00      	nop
 80027c0:	40023800 	.word	0x40023800
 80027c4:	20004250 	.word	0x20004250
 80027c8:	40001000 	.word	0x40001000
 80027cc:	000f4240 	.word	0x000f4240

080027d0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80027d0:	4770      	bx	lr

080027d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027d2:	e7fe      	b.n	80027d2 <HardFault_Handler>

080027d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027d4:	e7fe      	b.n	80027d4 <MemManage_Handler>

080027d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027d6:	e7fe      	b.n	80027d6 <BusFault_Handler>

080027d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027d8:	e7fe      	b.n	80027d8 <UsageFault_Handler>

080027da <DebugMon_Handler>:
 80027da:	4770      	bx	lr

080027dc <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80027dc:	4801      	ldr	r0, [pc, #4]	; (80027e4 <TIM6_DAC_IRQHandler+0x8>)
 80027de:	f7fe bb53 	b.w	8000e88 <HAL_TIM_IRQHandler>
 80027e2:	bf00      	nop
 80027e4:	20004250 	.word	0x20004250

080027e8 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80027e8:	4801      	ldr	r0, [pc, #4]	; (80027f0 <TIM7_IRQHandler+0x8>)
 80027ea:	f7fe bb4d 	b.w	8000e88 <HAL_TIM_IRQHandler>
 80027ee:	bf00      	nop
 80027f0:	20004208 	.word	0x20004208

080027f4 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80027f4:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80027f6:	4b0a      	ldr	r3, [pc, #40]	; (8002820 <_sbrk+0x2c>)
 80027f8:	6819      	ldr	r1, [r3, #0]
{
 80027fa:	4602      	mov	r2, r0
	if (heap_end == 0)
 80027fc:	b909      	cbnz	r1, 8002802 <_sbrk+0xe>
		heap_end = &end;
 80027fe:	4909      	ldr	r1, [pc, #36]	; (8002824 <_sbrk+0x30>)
 8002800:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8002802:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8002804:	4669      	mov	r1, sp
 8002806:	4402      	add	r2, r0
 8002808:	428a      	cmp	r2, r1
 800280a:	d906      	bls.n	800281a <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800280c:	f000 fcd0 	bl	80031b0 <__errno>
 8002810:	230c      	movs	r3, #12
 8002812:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002814:	f04f 30ff 	mov.w	r0, #4294967295
 8002818:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 800281a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 800281c:	bd08      	pop	{r3, pc}
 800281e:	bf00      	nop
 8002820:	20004074 	.word	0x20004074
 8002824:	20004294 	.word	0x20004294

08002828 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002828:	490f      	ldr	r1, [pc, #60]	; (8002868 <SystemInit+0x40>)
 800282a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800282e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002836:	4b0d      	ldr	r3, [pc, #52]	; (800286c <SystemInit+0x44>)
 8002838:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800283a:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 800283c:	f042 0201 	orr.w	r2, r2, #1
 8002840:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002842:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800284a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800284e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002850:	4a07      	ldr	r2, [pc, #28]	; (8002870 <SystemInit+0x48>)
 8002852:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800285a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800285c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800285e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002862:	608b      	str	r3, [r1, #8]
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	e000ed00 	.word	0xe000ed00
 800286c:	40023800 	.word	0x40023800
 8002870:	24003010 	.word	0x24003010

08002874 <TM_DELAY_Init>:
uint32_t TM_DELAY_Init(void) {
#if !defined(STM32F0xx)
	uint32_t c;
	
    /* Enable TRC */
    CoreDebug->DEMCR &= ~0x01000000;
 8002874:	4b0c      	ldr	r3, [pc, #48]	; (80028a8 <TM_DELAY_Init+0x34>)
 8002876:	68da      	ldr	r2, [r3, #12]
 8002878:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800287c:	60da      	str	r2, [r3, #12]
    CoreDebug->DEMCR |=  0x01000000;
 800287e:	68da      	ldr	r2, [r3, #12]
 8002880:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002884:	60da      	str	r2, [r3, #12]
	
    /* Enable counter */
    DWT->CTRL &= ~0x00000001;
 8002886:	4b09      	ldr	r3, [pc, #36]	; (80028ac <TM_DELAY_Init+0x38>)
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	f022 0201 	bic.w	r2, r2, #1
 800288e:	601a      	str	r2, [r3, #0]
    DWT->CTRL |=  0x00000001;
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	f042 0201 	orr.w	r2, r2, #1
 8002896:	601a      	str	r2, [r3, #0]
	
    /* Reset counter */
    DWT->CYCCNT = 0;
 8002898:	2200      	movs	r2, #0
 800289a:	605a      	str	r2, [r3, #4]
	
	/* Check if DWT has started */
	c = DWT->CYCCNT;
 800289c:	685a      	ldr	r2, [r3, #4]
	
	/* 2 dummys */
	__ASM volatile ("NOP");
 800289e:	bf00      	nop
	__ASM volatile ("NOP");
 80028a0:	bf00      	nop
	
	/* Return difference, if result is zero, DWT has not started */
	return (DWT->CYCCNT - c);
 80028a2:	6858      	ldr	r0, [r3, #4]
#else
	/* Return OK */
	return 1;
#endif
}
 80028a4:	1a80      	subs	r0, r0, r2
 80028a6:	4770      	bx	lr
 80028a8:	e000edf0 	.word	0xe000edf0
 80028ac:	e0001000 	.word	0xe0001000

080028b0 <TM_DELAY_1msHandler>:
	/* Return pointer */
	return Timer;
}

/* 1ms function called when systick makes interrupt */
__weak void TM_DELAY_1msHandler(void) {
 80028b0:	4770      	bx	lr
	...

080028b4 <HAL_IncTick>:
/* Called from Systick handler */
void HAL_IncTick(void) {
	uint8_t i;
	
	/* Increase system time */
	TM_Time++;
 80028b4:	4a18      	ldr	r2, [pc, #96]	; (8002918 <HAL_IncTick+0x64>)
void HAL_IncTick(void) {
 80028b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	TM_Time++;
 80028b8:	6813      	ldr	r3, [r2, #0]
 80028ba:	3301      	adds	r3, #1
 80028bc:	6013      	str	r3, [r2, #0]
	
	/* Decrease other system time */
	if (TM_Time2) {
 80028be:	4b17      	ldr	r3, [pc, #92]	; (800291c <HAL_IncTick+0x68>)
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	b112      	cbz	r2, 80028ca <HAL_IncTick+0x16>
		TM_Time2--;
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	3a01      	subs	r2, #1
 80028c8:	601a      	str	r2, [r3, #0]
	}
	
	/* Check for timers */
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
 80028ca:	4e15      	ldr	r6, [pc, #84]	; (8002920 <HAL_IncTick+0x6c>)
void HAL_IncTick(void) {
 80028cc:	2500      	movs	r5, #0
 80028ce:	4637      	mov	r7, r6
	for (i = 0; i < CustomTimers.Count; i++) {
 80028d0:	7833      	ldrb	r3, [r6, #0]
 80028d2:	b2ec      	uxtb	r4, r5
 80028d4:	42a3      	cmp	r3, r4
 80028d6:	d802      	bhi.n	80028de <HAL_IncTick+0x2a>
			}
		}
	}
	
	/* Call 1ms interrupt handler function */
	TM_DELAY_1msHandler();
 80028d8:	f7ff ffea 	bl	80028b0 <TM_DELAY_1msHandler>
 80028dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			CustomTimers.Timers[i] &&             /*!< Pointer exists */
 80028de:	00a4      	lsls	r4, r4, #2
 80028e0:	1933      	adds	r3, r6, r4
 80028e2:	6858      	ldr	r0, [r3, #4]
		if (
 80028e4:	b1b0      	cbz	r0, 8002914 <HAL_IncTick+0x60>
			CustomTimers.Timers[i] &&             /*!< Pointer exists */
 80028e6:	7803      	ldrb	r3, [r0, #0]
 80028e8:	079b      	lsls	r3, r3, #30
 80028ea:	d513      	bpl.n	8002914 <HAL_IncTick+0x60>
			if (CustomTimers.Timers[i]->CNT) {
 80028ec:	6883      	ldr	r3, [r0, #8]
 80028ee:	b10b      	cbz	r3, 80028f4 <HAL_IncTick+0x40>
				CustomTimers.Timers[i]->CNT--;
 80028f0:	3b01      	subs	r3, #1
 80028f2:	6083      	str	r3, [r0, #8]
			if (CustomTimers.Timers[i]->CNT == 0) {
 80028f4:	6883      	ldr	r3, [r0, #8]
 80028f6:	b96b      	cbnz	r3, 8002914 <HAL_IncTick+0x60>
				CustomTimers.Timers[i]->CNT = CustomTimers.Timers[i]->ARR;
 80028f8:	443c      	add	r4, r7
				CustomTimers.Timers[i]->Callback(CustomTimers.Timers[i], CustomTimers.Timers[i]->UserParameters);
 80028fa:	68c3      	ldr	r3, [r0, #12]
 80028fc:	6901      	ldr	r1, [r0, #16]
 80028fe:	4798      	blx	r3
				CustomTimers.Timers[i]->CNT = CustomTimers.Timers[i]->ARR;
 8002900:	6862      	ldr	r2, [r4, #4]
 8002902:	6853      	ldr	r3, [r2, #4]
 8002904:	6093      	str	r3, [r2, #8]
				if (!CustomTimers.Timers[i]->Flags.F.AREN) {
 8002906:	7813      	ldrb	r3, [r2, #0]
 8002908:	f013 0101 	ands.w	r1, r3, #1
					CustomTimers.Timers[i]->Flags.F.CNTEN = 0;
 800290c:	bf04      	itt	eq
 800290e:	f361 0341 	bfieq	r3, r1, #1, #1
 8002912:	7013      	strbeq	r3, [r2, #0]
 8002914:	3501      	adds	r5, #1
 8002916:	e7db      	b.n	80028d0 <HAL_IncTick+0x1c>
 8002918:	20004090 	.word	0x20004090
 800291c:	20004094 	.word	0x20004094
 8002920:	20004078 	.word	0x20004078

08002924 <HAL_GetTick>:
	}
}

uint32_t HAL_GetTick(void) {
	/* Return current time in milliseconds */
	return TM_Time;
 8002924:	4b01      	ldr	r3, [pc, #4]	; (800292c <HAL_GetTick+0x8>)
 8002926:	6818      	ldr	r0, [r3, #0]
}
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	20004090 	.word	0x20004090

08002930 <TM_DS18B20_Start>:
 * | OTHER DEALINGS IN THE SOFTWARE.
 * |----------------------------------------------------------------------
 */
#include "tm_stm32_ds18b20.h"

uint8_t TM_DS18B20_Start(TM_OneWire_t* OneWire, uint8_t *ROM) {
 8002930:	b538      	push	{r3, r4, r5, lr}
	return 1;
}

uint8_t TM_DS18B20_Is(uint8_t *ROM) {
	/* Checks if first byte is equal to DS18B20's family code */
	if (*ROM == DS18B20_FAMILY_CODE) {
 8002932:	780b      	ldrb	r3, [r1, #0]
 8002934:	2b28      	cmp	r3, #40	; 0x28
uint8_t TM_DS18B20_Start(TM_OneWire_t* OneWire, uint8_t *ROM) {
 8002936:	4604      	mov	r4, r0
 8002938:	460d      	mov	r5, r1
	if (*ROM == DS18B20_FAMILY_CODE) {
 800293a:	d001      	beq.n	8002940 <TM_DS18B20_Start+0x10>
		return 0;
 800293c:	2000      	movs	r0, #0
 800293e:	bd38      	pop	{r3, r4, r5, pc}
	TM_OneWire_Reset(OneWire);
 8002940:	f000 fa8e 	bl	8002e60 <TM_OneWire_Reset>
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8002944:	4629      	mov	r1, r5
 8002946:	4620      	mov	r0, r4
 8002948:	f000 fb81 	bl	800304e <TM_OneWire_SelectWithPointer>
	TM_OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
 800294c:	4620      	mov	r0, r4
 800294e:	2144      	movs	r1, #68	; 0x44
 8002950:	f000 faea 	bl	8002f28 <TM_OneWire_WriteByte>
	return 1;
 8002954:	2001      	movs	r0, #1
}
 8002956:	bd38      	pop	{r3, r4, r5, pc}

08002958 <TM_DS18B20_StartAll>:
void TM_DS18B20_StartAll(TM_OneWire_t* OneWire) {
 8002958:	b510      	push	{r4, lr}
 800295a:	4604      	mov	r4, r0
	TM_OneWire_Reset(OneWire);
 800295c:	f000 fa80 	bl	8002e60 <TM_OneWire_Reset>
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_SKIPROM);
 8002960:	4620      	mov	r0, r4
 8002962:	21cc      	movs	r1, #204	; 0xcc
 8002964:	f000 fae0 	bl	8002f28 <TM_OneWire_WriteByte>
	TM_OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
 8002968:	4620      	mov	r0, r4
 800296a:	2144      	movs	r1, #68	; 0x44
}
 800296c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	TM_OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
 8002970:	f000 bada 	b.w	8002f28 <TM_OneWire_WriteByte>

08002974 <TM_DS18B20_Read>:
uint8_t TM_DS18B20_Read(TM_OneWire_t* OneWire, uint8_t *ROM, float *destination) {
 8002974:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (*ROM == DS18B20_FAMILY_CODE) {
 8002976:	780b      	ldrb	r3, [r1, #0]
 8002978:	2b28      	cmp	r3, #40	; 0x28
uint8_t TM_DS18B20_Read(TM_OneWire_t* OneWire, uint8_t *ROM, float *destination) {
 800297a:	b085      	sub	sp, #20
 800297c:	4607      	mov	r7, r0
 800297e:	460c      	mov	r4, r1
 8002980:	4615      	mov	r5, r2
	if (*ROM == DS18B20_FAMILY_CODE) {
 8002982:	d010      	beq.n	80029a6 <TM_DS18B20_Read+0x32>
		return 0;
 8002984:	2000      	movs	r0, #0
}
 8002986:	b005      	add	sp, #20
 8002988:	bdf0      	pop	{r4, r5, r6, r7, pc}
			decimal = (temperature >> 1) & 0x07;
 800298a:	f3c4 0242 	ubfx	r2, r4, #1, #3
 800298e:	ee07 2a90 	vmov	s15, r2
			decimal *= (float)DS18B20_DECIMAL_STEPS_11BIT;
 8002992:	eefa 7aee 	vcvt.f32.s32	s15, s15, #3
		} break;
 8002996:	e05d      	b.n	8002a54 <TM_DS18B20_Read+0xe0>
			decimal = temperature & 0x0F;
 8002998:	f004 020f 	and.w	r2, r4, #15
 800299c:	ee07 2a90 	vmov	s15, r2
			decimal *= (float)DS18B20_DECIMAL_STEPS_12BIT;
 80029a0:	eefa 7ace 	vcvt.f32.s32	s15, s15, #4
		} break;
 80029a4:	e056      	b.n	8002a54 <TM_DS18B20_Read+0xe0>
	if (!TM_OneWire_ReadBit(OneWire)) {
 80029a6:	f000 faa1 	bl	8002eec <TM_OneWire_ReadBit>
 80029aa:	2800      	cmp	r0, #0
 80029ac:	d0ea      	beq.n	8002984 <TM_DS18B20_Read+0x10>
	TM_OneWire_Reset(OneWire);
 80029ae:	4638      	mov	r0, r7
 80029b0:	f000 fa56 	bl	8002e60 <TM_OneWire_Reset>
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 80029b4:	4621      	mov	r1, r4
 80029b6:	4638      	mov	r0, r7
 80029b8:	f000 fb49 	bl	800304e <TM_OneWire_SelectWithPointer>
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 80029bc:	21be      	movs	r1, #190	; 0xbe
 80029be:	4638      	mov	r0, r7
 80029c0:	f000 fab2 	bl	8002f28 <TM_OneWire_WriteByte>
 80029c4:	2400      	movs	r4, #0
		data[i] = TM_OneWire_ReadByte(OneWire);
 80029c6:	ae01      	add	r6, sp, #4
 80029c8:	4638      	mov	r0, r7
 80029ca:	f000 fabd 	bl	8002f48 <TM_OneWire_ReadByte>
 80029ce:	5530      	strb	r0, [r6, r4]
 80029d0:	3401      	adds	r4, #1
	for (i = 0; i < 9; i++) {
 80029d2:	2c09      	cmp	r4, #9
 80029d4:	d1f8      	bne.n	80029c8 <TM_DS18B20_Read+0x54>
	crc = TM_OneWire_CRC8(data, 8);
 80029d6:	2108      	movs	r1, #8
 80029d8:	4630      	mov	r0, r6
 80029da:	f000 fb53 	bl	8003084 <TM_OneWire_CRC8>
	if (crc != data[8]) {
 80029de:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80029e2:	4283      	cmp	r3, r0
 80029e4:	d1ce      	bne.n	8002984 <TM_DS18B20_Read+0x10>
	temperature = data[0] | (data[1] << 8);
 80029e6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80029ea:	f89d 6004 	ldrb.w	r6, [sp, #4]
 80029ee:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
 80029f2:	b236      	sxth	r6, r6
	TM_OneWire_Reset(OneWire);
 80029f4:	4638      	mov	r0, r7
 80029f6:	f000 fa33 	bl	8002e60 <TM_OneWire_Reset>
	temperature = data[0] | (data[1] << 8);
 80029fa:	b2b4      	uxth	r4, r6
	if (temperature & 0x8000) {
 80029fc:	2e00      	cmp	r6, #0
		temperature = ~temperature + 1;
 80029fe:	bfbc      	itt	lt
 8002a00:	4264      	neglt	r4, r4
 8002a02:	b2a4      	uxthlt	r4, r4
	digit |= ((temperature >> 8) & 0x7) << 4;
 8002a04:	ea4f 1314 	mov.w	r3, r4, lsr #4
 8002a08:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002a0c:	f344 1307 	sbfx	r3, r4, #4, #8
 8002a10:	ea43 0302 	orr.w	r3, r3, r2
	resolution = ((data[4] & 0x60) >> 5) + 9;
 8002a14:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8002a18:	f3c2 1241 	ubfx	r2, r2, #5, #2
	switch (resolution) {
 8002a1c:	f102 0209 	add.w	r2, r2, #9
		minus = 1;
 8002a20:	bfb4      	ite	lt
 8002a22:	2101      	movlt	r1, #1
	int8_t digit, minus = 0;
 8002a24:	2100      	movge	r1, #0
	switch (resolution) {
 8002a26:	2a0b      	cmp	r2, #11
 8002a28:	d0af      	beq.n	800298a <TM_DS18B20_Read+0x16>
 8002a2a:	2a0c      	cmp	r2, #12
 8002a2c:	d0b4      	beq.n	8002998 <TM_DS18B20_Read+0x24>
 8002a2e:	2a0a      	cmp	r2, #10
			decimal = (temperature >> 3) & 0x01;
 8002a30:	bf1b      	ittet	ne
 8002a32:	f3c4 02c0 	ubfxne	r2, r4, #3, #1
 8002a36:	ee07 2a90 	vmovne	s15, r2
			decimal = (temperature >> 2) & 0x03;
 8002a3a:	f3c4 0281 	ubfxeq	r2, r4, #2, #2
			decimal = (temperature >> 3) & 0x01;
 8002a3e:	eef8 7ae7 	vcvtne.f32.s32	s15, s15
			decimal = (temperature >> 2) & 0x03;
 8002a42:	bf0d      	iteet	eq
 8002a44:	ee07 2a90 	vmoveq	s15, r2
			decimal *= (float)DS18B20_DECIMAL_STEPS_9BIT;
 8002a48:	eeb6 7a00 	vmovne.f32	s14, #96	; 0x3f000000  0.5
 8002a4c:	ee67 7a87 	vmulne.f32	s15, s15, s14
			decimal *= (float)DS18B20_DECIMAL_STEPS_10BIT;
 8002a50:	eefa 7acf 	vcvteq.f32.s32	s15, s15, #2
	decimal = digit + decimal;
 8002a54:	ee07 3a10 	vmov	s14, r3
 8002a58:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002a5c:	ee77 7a27 	vadd.f32	s15, s14, s15
	if (minus) {
 8002a60:	b119      	cbz	r1, 8002a6a <TM_DS18B20_Read+0xf6>
		decimal = 0 - decimal;
 8002a62:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8002a74 <TM_DS18B20_Read+0x100>
 8002a66:	ee77 7a67 	vsub.f32	s15, s14, s15
	*destination = decimal;
 8002a6a:	edc5 7a00 	vstr	s15, [r5]
	return 1;
 8002a6e:	2001      	movs	r0, #1
 8002a70:	e789      	b.n	8002986 <TM_DS18B20_Read+0x12>
 8002a72:	bf00      	nop
 8002a74:	00000000 	.word	0x00000000

08002a78 <TM_DS18B20_SetResolution>:
uint8_t TM_DS18B20_SetResolution(TM_OneWire_t* OneWire, uint8_t *ROM, TM_DS18B20_Resolution_t resolution) {
 8002a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (*ROM == DS18B20_FAMILY_CODE) {
 8002a7c:	780b      	ldrb	r3, [r1, #0]
 8002a7e:	2b28      	cmp	r3, #40	; 0x28
uint8_t TM_DS18B20_SetResolution(TM_OneWire_t* OneWire, uint8_t *ROM, TM_DS18B20_Resolution_t resolution) {
 8002a80:	4604      	mov	r4, r0
 8002a82:	460e      	mov	r6, r1
 8002a84:	4691      	mov	r9, r2
	if (*ROM == DS18B20_FAMILY_CODE) {
 8002a86:	d019      	beq.n	8002abc <TM_DS18B20_SetResolution+0x44>
		return 0;
 8002a88:	2000      	movs	r0, #0
 8002a8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (resolution == TM_DS18B20_Resolution_10bits) {
 8002a8e:	f1b9 0f0a 	cmp.w	r9, #10
 8002a92:	d104      	bne.n	8002a9e <TM_DS18B20_SetResolution+0x26>
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8002a94:	f005 05bf 	and.w	r5, r5, #191	; 0xbf
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8002a98:	f045 0520 	orr.w	r5, r5, #32
 8002a9c:	e02f      	b.n	8002afe <TM_DS18B20_SetResolution+0x86>
	} else if (resolution == TM_DS18B20_Resolution_11bits) {
 8002a9e:	f1b9 0f0b 	cmp.w	r9, #11
 8002aa2:	d104      	bne.n	8002aae <TM_DS18B20_SetResolution+0x36>
 8002aa4:	f005 05df 	and.w	r5, r5, #223	; 0xdf
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8002aa8:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8002aac:	e027      	b.n	8002afe <TM_DS18B20_SetResolution+0x86>
	} else if (resolution == TM_DS18B20_Resolution_12bits) {
 8002aae:	f1b9 0f0c 	cmp.w	r9, #12
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8002ab2:	bf04      	itt	eq
 8002ab4:	f045 0560 	orreq.w	r5, r5, #96	; 0x60
 8002ab8:	b2ed      	uxtbeq	r5, r5
 8002aba:	e020      	b.n	8002afe <TM_DS18B20_SetResolution+0x86>
	TM_OneWire_Reset(OneWire);
 8002abc:	f000 f9d0 	bl	8002e60 <TM_OneWire_Reset>
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8002ac0:	4631      	mov	r1, r6
 8002ac2:	4620      	mov	r0, r4
 8002ac4:	f000 fac3 	bl	800304e <TM_OneWire_SelectWithPointer>
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8002ac8:	21be      	movs	r1, #190	; 0xbe
 8002aca:	4620      	mov	r0, r4
 8002acc:	f000 fa2c 	bl	8002f28 <TM_OneWire_WriteByte>
	TM_OneWire_ReadByte(OneWire);
 8002ad0:	4620      	mov	r0, r4
 8002ad2:	f000 fa39 	bl	8002f48 <TM_OneWire_ReadByte>
	TM_OneWire_ReadByte(OneWire);
 8002ad6:	4620      	mov	r0, r4
 8002ad8:	f000 fa36 	bl	8002f48 <TM_OneWire_ReadByte>
	th = TM_OneWire_ReadByte(OneWire);
 8002adc:	4620      	mov	r0, r4
 8002ade:	f000 fa33 	bl	8002f48 <TM_OneWire_ReadByte>
 8002ae2:	4607      	mov	r7, r0
	tl = TM_OneWire_ReadByte(OneWire);
 8002ae4:	4620      	mov	r0, r4
 8002ae6:	f000 fa2f 	bl	8002f48 <TM_OneWire_ReadByte>
 8002aea:	4680      	mov	r8, r0
	conf = TM_OneWire_ReadByte(OneWire);
 8002aec:	4620      	mov	r0, r4
 8002aee:	f000 fa2b 	bl	8002f48 <TM_OneWire_ReadByte>
	if (resolution == TM_DS18B20_Resolution_9bits) {
 8002af2:	f1b9 0f09 	cmp.w	r9, #9
	conf = TM_OneWire_ReadByte(OneWire);
 8002af6:	4605      	mov	r5, r0
	if (resolution == TM_DS18B20_Resolution_9bits) {
 8002af8:	d1c9      	bne.n	8002a8e <TM_DS18B20_SetResolution+0x16>
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8002afa:	f005 059f 	and.w	r5, r5, #159	; 0x9f
	TM_OneWire_Reset(OneWire);
 8002afe:	4620      	mov	r0, r4
 8002b00:	f000 f9ae 	bl	8002e60 <TM_OneWire_Reset>
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8002b04:	4631      	mov	r1, r6
 8002b06:	4620      	mov	r0, r4
 8002b08:	f000 faa1 	bl	800304e <TM_OneWire_SelectWithPointer>
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8002b0c:	4620      	mov	r0, r4
 8002b0e:	214e      	movs	r1, #78	; 0x4e
 8002b10:	f000 fa0a 	bl	8002f28 <TM_OneWire_WriteByte>
	TM_OneWire_WriteByte(OneWire, th);
 8002b14:	4639      	mov	r1, r7
 8002b16:	4620      	mov	r0, r4
 8002b18:	f000 fa06 	bl	8002f28 <TM_OneWire_WriteByte>
	TM_OneWire_WriteByte(OneWire, tl);
 8002b1c:	4641      	mov	r1, r8
 8002b1e:	4620      	mov	r0, r4
 8002b20:	f000 fa02 	bl	8002f28 <TM_OneWire_WriteByte>
	TM_OneWire_WriteByte(OneWire, conf);
 8002b24:	4629      	mov	r1, r5
 8002b26:	4620      	mov	r0, r4
 8002b28:	f000 f9fe 	bl	8002f28 <TM_OneWire_WriteByte>
	TM_OneWire_Reset(OneWire);
 8002b2c:	4620      	mov	r0, r4
 8002b2e:	f000 f997 	bl	8002e60 <TM_OneWire_Reset>
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8002b32:	4631      	mov	r1, r6
 8002b34:	4620      	mov	r0, r4
 8002b36:	f000 fa8a 	bl	800304e <TM_OneWire_SelectWithPointer>
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8002b3a:	4620      	mov	r0, r4
 8002b3c:	2148      	movs	r1, #72	; 0x48
 8002b3e:	f000 f9f3 	bl	8002f28 <TM_OneWire_WriteByte>
	return 1;
 8002b42:	2001      	movs	r0, #1
 8002b44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002b48 <TM_DS18B20_Is>:
	if (*ROM == DS18B20_FAMILY_CODE) {
 8002b48:	7800      	ldrb	r0, [r0, #0]
		return 1;
	}
	return 0;
}
 8002b4a:	f1a0 0328 	sub.w	r3, r0, #40	; 0x28
 8002b4e:	4258      	negs	r0, r3
 8002b50:	4158      	adcs	r0, r3
 8002b52:	4770      	bx	lr

08002b54 <TM_DS18B20_SetAlarmLowTemperature>:

uint8_t TM_DS18B20_SetAlarmLowTemperature(TM_OneWire_t* OneWire, uint8_t *ROM, int8_t temp) {
 8002b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (*ROM == DS18B20_FAMILY_CODE) {
 8002b58:	780b      	ldrb	r3, [r1, #0]
 8002b5a:	2b28      	cmp	r3, #40	; 0x28
uint8_t TM_DS18B20_SetAlarmLowTemperature(TM_OneWire_t* OneWire, uint8_t *ROM, int8_t temp) {
 8002b5c:	4604      	mov	r4, r0
 8002b5e:	460e      	mov	r6, r1
	if (*ROM == DS18B20_FAMILY_CODE) {
 8002b60:	d002      	beq.n	8002b68 <TM_DS18B20_SetAlarmLowTemperature+0x14>
	uint8_t tl, th, conf;
	if (!TM_DS18B20_Is(ROM)) {
		return 0;
 8002b62:	2000      	movs	r0, #0
 8002b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b68:	f06f 0536 	mvn.w	r5, #54	; 0x36
 8002b6c:	4295      	cmp	r5, r2
 8002b6e:	bfb8      	it	lt
 8002b70:	4615      	movlt	r5, r2
	} 
	if (temp < -55) {
		temp = -55;
	}
	/* Reset line */
	TM_OneWire_Reset(OneWire);
 8002b72:	f000 f975 	bl	8002e60 <TM_OneWire_Reset>
	/* Select ROM number */
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8002b76:	4631      	mov	r1, r6
 8002b78:	4620      	mov	r0, r4
 8002b7a:	f000 fa68 	bl	800304e <TM_OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8002b7e:	21be      	movs	r1, #190	; 0xbe
 8002b80:	4620      	mov	r0, r4
 8002b82:	f000 f9d1 	bl	8002f28 <TM_OneWire_WriteByte>
	
	/* Ignore first 2 bytes */
	TM_OneWire_ReadByte(OneWire);
 8002b86:	4620      	mov	r0, r4
 8002b88:	f000 f9de 	bl	8002f48 <TM_OneWire_ReadByte>
	TM_OneWire_ReadByte(OneWire);
 8002b8c:	4620      	mov	r0, r4
 8002b8e:	f000 f9db 	bl	8002f48 <TM_OneWire_ReadByte>
	
	th = TM_OneWire_ReadByte(OneWire);
 8002b92:	4620      	mov	r0, r4
 8002b94:	f000 f9d8 	bl	8002f48 <TM_OneWire_ReadByte>
 8002b98:	4680      	mov	r8, r0
	tl = TM_OneWire_ReadByte(OneWire);
 8002b9a:	4620      	mov	r0, r4
 8002b9c:	f000 f9d4 	bl	8002f48 <TM_OneWire_ReadByte>
	conf = TM_OneWire_ReadByte(OneWire);
 8002ba0:	4620      	mov	r0, r4
 8002ba2:	f000 f9d1 	bl	8002f48 <TM_OneWire_ReadByte>
 8002ba6:	4607      	mov	r7, r0
	
	tl = (uint8_t)temp; 

	/* Reset line */
	TM_OneWire_Reset(OneWire);
 8002ba8:	4620      	mov	r0, r4
 8002baa:	f000 f959 	bl	8002e60 <TM_OneWire_Reset>
	/* Select ROM number */
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8002bae:	4631      	mov	r1, r6
 8002bb0:	4620      	mov	r0, r4
 8002bb2:	f000 fa4c 	bl	800304e <TM_OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8002bb6:	4620      	mov	r0, r4
 8002bb8:	214e      	movs	r1, #78	; 0x4e
 8002bba:	f000 f9b5 	bl	8002f28 <TM_OneWire_WriteByte>
	
	/* Write bytes */
	TM_OneWire_WriteByte(OneWire, th);
 8002bbe:	4641      	mov	r1, r8
 8002bc0:	4620      	mov	r0, r4
 8002bc2:	f000 f9b1 	bl	8002f28 <TM_OneWire_WriteByte>
	tl = (uint8_t)temp; 
 8002bc6:	2d7d      	cmp	r5, #125	; 0x7d
 8002bc8:	bfa8      	it	ge
 8002bca:	257d      	movge	r5, #125	; 0x7d
	TM_OneWire_WriteByte(OneWire, tl);
 8002bcc:	b2e9      	uxtb	r1, r5
 8002bce:	4620      	mov	r0, r4
 8002bd0:	f000 f9aa 	bl	8002f28 <TM_OneWire_WriteByte>
	TM_OneWire_WriteByte(OneWire, conf);
 8002bd4:	4639      	mov	r1, r7
 8002bd6:	4620      	mov	r0, r4
 8002bd8:	f000 f9a6 	bl	8002f28 <TM_OneWire_WriteByte>
	
	/* Reset line */
	TM_OneWire_Reset(OneWire);
 8002bdc:	4620      	mov	r0, r4
 8002bde:	f000 f93f 	bl	8002e60 <TM_OneWire_Reset>
	/* Select ROM number */
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8002be2:	4631      	mov	r1, r6
 8002be4:	4620      	mov	r0, r4
 8002be6:	f000 fa32 	bl	800304e <TM_OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8002bea:	4620      	mov	r0, r4
 8002bec:	2148      	movs	r1, #72	; 0x48
 8002bee:	f000 f99b 	bl	8002f28 <TM_OneWire_WriteByte>
	
	return 1;
 8002bf2:	2001      	movs	r0, #1
}
 8002bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002bf8 <TM_DS18B20_SetAlarmHighTemperature>:

uint8_t TM_DS18B20_SetAlarmHighTemperature(TM_OneWire_t* OneWire, uint8_t *ROM, int8_t temp) {
 8002bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (*ROM == DS18B20_FAMILY_CODE) {
 8002bfc:	780b      	ldrb	r3, [r1, #0]
 8002bfe:	2b28      	cmp	r3, #40	; 0x28
uint8_t TM_DS18B20_SetAlarmHighTemperature(TM_OneWire_t* OneWire, uint8_t *ROM, int8_t temp) {
 8002c00:	4604      	mov	r4, r0
 8002c02:	460e      	mov	r6, r1
	if (*ROM == DS18B20_FAMILY_CODE) {
 8002c04:	d002      	beq.n	8002c0c <TM_DS18B20_SetAlarmHighTemperature+0x14>
	uint8_t tl, th, conf;
	if (!TM_DS18B20_Is(ROM)) {
		return 0;
 8002c06:	2000      	movs	r0, #0
 8002c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c0c:	f06f 0536 	mvn.w	r5, #54	; 0x36
 8002c10:	4295      	cmp	r5, r2
 8002c12:	bfb8      	it	lt
 8002c14:	4615      	movlt	r5, r2
	} 
	if (temp < -55) {
		temp = -55;
	}
	/* Reset line */
	TM_OneWire_Reset(OneWire);
 8002c16:	f000 f923 	bl	8002e60 <TM_OneWire_Reset>
	/* Select ROM number */
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8002c1a:	4631      	mov	r1, r6
 8002c1c:	4620      	mov	r0, r4
 8002c1e:	f000 fa16 	bl	800304e <TM_OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8002c22:	21be      	movs	r1, #190	; 0xbe
 8002c24:	4620      	mov	r0, r4
 8002c26:	f000 f97f 	bl	8002f28 <TM_OneWire_WriteByte>
	
	/* Ignore first 2 bytes */
	TM_OneWire_ReadByte(OneWire);
 8002c2a:	4620      	mov	r0, r4
 8002c2c:	f000 f98c 	bl	8002f48 <TM_OneWire_ReadByte>
	TM_OneWire_ReadByte(OneWire);
 8002c30:	4620      	mov	r0, r4
 8002c32:	f000 f989 	bl	8002f48 <TM_OneWire_ReadByte>
	
	th = TM_OneWire_ReadByte(OneWire);
 8002c36:	4620      	mov	r0, r4
 8002c38:	f000 f986 	bl	8002f48 <TM_OneWire_ReadByte>
	tl = TM_OneWire_ReadByte(OneWire);
 8002c3c:	4620      	mov	r0, r4
 8002c3e:	f000 f983 	bl	8002f48 <TM_OneWire_ReadByte>
 8002c42:	4680      	mov	r8, r0
	conf = TM_OneWire_ReadByte(OneWire);
 8002c44:	4620      	mov	r0, r4
 8002c46:	f000 f97f 	bl	8002f48 <TM_OneWire_ReadByte>
 8002c4a:	4607      	mov	r7, r0
	
	th = (uint8_t)temp; 

	/* Reset line */
	TM_OneWire_Reset(OneWire);
 8002c4c:	4620      	mov	r0, r4
 8002c4e:	f000 f907 	bl	8002e60 <TM_OneWire_Reset>
	/* Select ROM number */
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8002c52:	4631      	mov	r1, r6
 8002c54:	4620      	mov	r0, r4
 8002c56:	f000 f9fa 	bl	800304e <TM_OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8002c5a:	4620      	mov	r0, r4
 8002c5c:	214e      	movs	r1, #78	; 0x4e
 8002c5e:	f000 f963 	bl	8002f28 <TM_OneWire_WriteByte>
	th = (uint8_t)temp; 
 8002c62:	2d7d      	cmp	r5, #125	; 0x7d
 8002c64:	bfa8      	it	ge
 8002c66:	257d      	movge	r5, #125	; 0x7d
	
	/* Write bytes */
	TM_OneWire_WriteByte(OneWire, th);
 8002c68:	b2e9      	uxtb	r1, r5
 8002c6a:	4620      	mov	r0, r4
 8002c6c:	f000 f95c 	bl	8002f28 <TM_OneWire_WriteByte>
	TM_OneWire_WriteByte(OneWire, tl);
 8002c70:	4641      	mov	r1, r8
 8002c72:	4620      	mov	r0, r4
 8002c74:	f000 f958 	bl	8002f28 <TM_OneWire_WriteByte>
	TM_OneWire_WriteByte(OneWire, conf);
 8002c78:	4639      	mov	r1, r7
 8002c7a:	4620      	mov	r0, r4
 8002c7c:	f000 f954 	bl	8002f28 <TM_OneWire_WriteByte>
	
	/* Reset line */
	TM_OneWire_Reset(OneWire);
 8002c80:	4620      	mov	r0, r4
 8002c82:	f000 f8ed 	bl	8002e60 <TM_OneWire_Reset>
	/* Select ROM number */
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8002c86:	4631      	mov	r1, r6
 8002c88:	4620      	mov	r0, r4
 8002c8a:	f000 f9e0 	bl	800304e <TM_OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8002c8e:	4620      	mov	r0, r4
 8002c90:	2148      	movs	r1, #72	; 0x48
 8002c92:	f000 f949 	bl	8002f28 <TM_OneWire_WriteByte>
	
	return 1;
 8002c96:	2001      	movs	r0, #1
}
 8002c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002c9c <TM_DS18B20_AllDone>:
	return TM_OneWire_Search(OneWire, DS18B20_CMD_ALARMSEARCH);
}

uint8_t TM_DS18B20_AllDone(TM_OneWire_t* OneWire) {
	/* If read bit is low, then device is not finished yet with calculation temperature */
	return TM_OneWire_ReadBit(OneWire);
 8002c9c:	f000 b926 	b.w	8002eec <TM_OneWire_ReadBit>

08002ca0 <TM_GPIO_SetPinAsInput>:
			GPIO_UsedPins[ptr] &= ~(1 << i);
		}
	}
}

void TM_GPIO_SetPinAsInput(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8002ca0:	b530      	push	{r4, r5, lr}
 8002ca2:	2300      	movs	r3, #0
	/* Go through all pins */
	for (i = 0x00; i < 0x10; i++) {
		/* Pin is set */
		if (GPIO_Pin & (1 << i)) {
			/* Set 00 bits combination for input */
			GPIOx->MODER &= ~(0x03 << (2 * i));
 8002ca4:	2503      	movs	r5, #3
		if (GPIO_Pin & (1 << i)) {
 8002ca6:	fa41 f203 	asr.w	r2, r1, r3
 8002caa:	07d2      	lsls	r2, r2, #31
 8002cac:	d506      	bpl.n	8002cbc <TM_GPIO_SetPinAsInput+0x1c>
			GPIOx->MODER &= ~(0x03 << (2 * i));
 8002cae:	6802      	ldr	r2, [r0, #0]
 8002cb0:	005c      	lsls	r4, r3, #1
 8002cb2:	fa05 f404 	lsl.w	r4, r5, r4
 8002cb6:	ea22 0204 	bic.w	r2, r2, r4
 8002cba:	6002      	str	r2, [r0, #0]
 8002cbc:	3301      	adds	r3, #1
	for (i = 0x00; i < 0x10; i++) {
 8002cbe:	2b10      	cmp	r3, #16
 8002cc0:	d1f1      	bne.n	8002ca6 <TM_GPIO_SetPinAsInput+0x6>
		}
	}
}
 8002cc2:	bd30      	pop	{r4, r5, pc}

08002cc4 <TM_GPIO_SetPinAsOutput>:

void TM_GPIO_SetPinAsOutput(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8002cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cc6:	2300      	movs	r3, #0
	/* Go through all pins */
	for (i = 0x00; i < 0x10; i++) {
		/* Pin is set */
		if (GPIO_Pin & (1 << i)) {
			/* Set 01 bits combination for output */
			GPIOx->MODER = (GPIOx->MODER & ~(0x03 << (2 * i))) | (0x01 << (2 * i));
 8002cc8:	2503      	movs	r5, #3
 8002cca:	2601      	movs	r6, #1
		if (GPIO_Pin & (1 << i)) {
 8002ccc:	fa41 f203 	asr.w	r2, r1, r3
 8002cd0:	07d2      	lsls	r2, r2, #31
 8002cd2:	d509      	bpl.n	8002ce8 <TM_GPIO_SetPinAsOutput+0x24>
			GPIOx->MODER = (GPIOx->MODER & ~(0x03 << (2 * i))) | (0x01 << (2 * i));
 8002cd4:	6802      	ldr	r2, [r0, #0]
 8002cd6:	005c      	lsls	r4, r3, #1
 8002cd8:	fa05 f704 	lsl.w	r7, r5, r4
 8002cdc:	ea22 0207 	bic.w	r2, r2, r7
 8002ce0:	fa06 f404 	lsl.w	r4, r6, r4
 8002ce4:	4322      	orrs	r2, r4
 8002ce6:	6002      	str	r2, [r0, #0]
 8002ce8:	3301      	adds	r3, #1
	for (i = 0x00; i < 0x10; i++) {
 8002cea:	2b10      	cmp	r3, #16
 8002cec:	d1ee      	bne.n	8002ccc <TM_GPIO_SetPinAsOutput+0x8>
		}
	}
}
 8002cee:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002cf0 <TM_GPIO_INT_EnableClock>:
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx) {
	/* Set bit according to the 1 << portsourcenumber */
#if defined(STM32F0xx)
	RCC->AHBENR |= (1 << (TM_GPIO_GetPortSource(GPIOx) + 17));
#else
	RCC->AHB1ENR |= (1 << TM_GPIO_GetPortSource(GPIOx));
 8002cf0:	4a06      	ldr	r2, [pc, #24]	; (8002d0c <TM_GPIO_INT_EnableClock+0x1c>)
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 8002cf2:	f100 403f 	add.w	r0, r0, #3204448256	; 0xbf000000
 8002cf6:	f500 007e 	add.w	r0, r0, #16646144	; 0xfe0000
	RCC->AHB1ENR |= (1 << TM_GPIO_GetPortSource(GPIOx));
 8002cfa:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002cfc:	f3c0 238f 	ubfx	r3, r0, #10, #16
 8002d00:	2001      	movs	r0, #1
 8002d02:	4098      	lsls	r0, r3
 8002d04:	4308      	orrs	r0, r1
 8002d06:	6310      	str	r0, [r2, #48]	; 0x30
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	40023800 	.word	0x40023800

08002d10 <TM_GPIO_INT_Init>:
#else
	RCC->AHB1ENR &= ~(1 << TM_GPIO_GetPortSource(GPIOx));
#endif
}

void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 8002d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d14:	b085      	sub	sp, #20
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 8002d16:	f100 453f 	add.w	r5, r0, #3204448256	; 0xbf000000
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 8002d1a:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
 8002d1e:	9402      	str	r4, [sp, #8]
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 8002d20:	f505 057e 	add.w	r5, r5, #16646144	; 0xfe0000
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 8002d24:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
			continue;
		}
		
		/* Pin is used */
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 8002d28:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8002dd0 <TM_GPIO_INT_Init+0xc0>
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 8002d2c:	9403      	str	r4, [sp, #12]
		
		/* Set GPIO MODE register */
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
		
		/* Set only if output or alternate functions */
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 8002d2e:	f102 3cff 	add.w	ip, r2, #4294967295
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 8002d32:	9301      	str	r3, [sp, #4]
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 8002d34:	2400      	movs	r4, #0
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 8002d36:	f3c5 2587 	ubfx	r5, r5, #10, #8
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 8002d3a:	f04f 0a03 	mov.w	sl, #3
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 8002d3e:	fa5f fc8c 	uxtb.w	ip, ip
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 8002d42:	fa41 f604 	asr.w	r6, r1, r4
 8002d46:	07f3      	lsls	r3, r6, #31
 8002d48:	d53b      	bpl.n	8002dc2 <TM_GPIO_INT_Init+0xb2>
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	f838 6015 	ldrh.w	r6, [r8, r5, lsl #1]
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 8002d50:	f8d0 e00c 	ldr.w	lr, [r0, #12]
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 8002d54:	fa03 f904 	lsl.w	r9, r3, r4
 8002d58:	ea49 0606 	orr.w	r6, r9, r6
 8002d5c:	f828 6015 	strh.w	r6, [r8, r5, lsl #1]
 8002d60:	fa04 f603 	lsl.w	r6, r4, r3
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 8002d64:	fa0a f706 	lsl.w	r7, sl, r6
 8002d68:	9b02      	ldr	r3, [sp, #8]
 8002d6a:	43ff      	mvns	r7, r7
 8002d6c:	fa03 fb06 	lsl.w	fp, r3, r6
 8002d70:	ea07 0e0e 	and.w	lr, r7, lr
 8002d74:	ea4e 0e0b 	orr.w	lr, lr, fp
 8002d78:	f8c0 e00c 	str.w	lr, [r0, #12]
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
 8002d7c:	f8d0 e000 	ldr.w	lr, [r0]
 8002d80:	fa02 fb06 	lsl.w	fp, r2, r6
 8002d84:	ea0e 0e07 	and.w	lr, lr, r7
 8002d88:	ea4e 0e0b 	orr.w	lr, lr, fp
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 8002d8c:	f1bc 0f01 	cmp.w	ip, #1
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
 8002d90:	f8c0 e000 	str.w	lr, [r0]
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 8002d94:	d815      	bhi.n	8002dc2 <TM_GPIO_INT_Init+0xb2>
			/* Set GPIO OTYPE register */
			GPIOx->OTYPER = (GPIOx->OTYPER & ~(uint16_t)(0x01 << pinpos)) | ((uint16_t)(GPIO_OType << pinpos));
 8002d96:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8002d9a:	9b01      	ldr	r3, [sp, #4]
 8002d9c:	ea2e 0909 	bic.w	r9, lr, r9
 8002da0:	fa03 fe04 	lsl.w	lr, r3, r4
 8002da4:	fa1f fe8e 	uxth.w	lr, lr
 8002da8:	ea49 090e 	orr.w	r9, r9, lr
 8002dac:	f8c0 9004 	str.w	r9, [r0, #4]
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
 8002db0:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8002db4:	9b03      	ldr	r3, [sp, #12]
 8002db6:	ea07 070e 	and.w	r7, r7, lr
 8002dba:	fa03 f606 	lsl.w	r6, r3, r6
 8002dbe:	4337      	orrs	r7, r6
 8002dc0:	6087      	str	r7, [r0, #8]
 8002dc2:	3401      	adds	r4, #1
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8002dc4:	2c10      	cmp	r4, #16
 8002dc6:	d1bc      	bne.n	8002d42 <TM_GPIO_INT_Init+0x32>
		}
	}
}
 8002dc8:	b005      	add	sp, #20
 8002dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002dce:	bf00      	nop
 8002dd0:	20004098 	.word	0x20004098

08002dd4 <TM_GPIO_Init>:
void TM_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {	
 8002dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002dd8:	4605      	mov	r5, r0
 8002dda:	4616      	mov	r6, r2
 8002ddc:	461f      	mov	r7, r3
 8002dde:	f89d 8020 	ldrb.w	r8, [sp, #32]
 8002de2:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
	if (GPIO_Pin == 0x00) {
 8002de6:	460c      	mov	r4, r1
 8002de8:	b169      	cbz	r1, 8002e06 <TM_GPIO_Init+0x32>
	TM_GPIO_INT_EnableClock(GPIOx);
 8002dea:	f7ff ff81 	bl	8002cf0 <TM_GPIO_INT_EnableClock>
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 8002dee:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8002df2:	f8cd 8020 	str.w	r8, [sp, #32]
 8002df6:	463b      	mov	r3, r7
 8002df8:	4632      	mov	r2, r6
 8002dfa:	4621      	mov	r1, r4
 8002dfc:	4628      	mov	r0, r5
}
 8002dfe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 8002e02:	f7ff bf85 	b.w	8002d10 <TM_GPIO_INT_Init>
 8002e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08002e0c <Delay>:
__STATIC_INLINE void Delay(__IO uint32_t micros) {
 8002e0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint32_t start = DWT->CYCCNT;
 8002e0e:	4c09      	ldr	r4, [pc, #36]	; (8002e34 <Delay+0x28>)
__STATIC_INLINE void Delay(__IO uint32_t micros) {
 8002e10:	9001      	str	r0, [sp, #4]
	uint32_t start = DWT->CYCCNT;
 8002e12:	6865      	ldr	r5, [r4, #4]
	micros *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8002e14:	f7fd fdfe 	bl	8000a14 <HAL_RCC_GetHCLKFreq>
 8002e18:	9b01      	ldr	r3, [sp, #4]
 8002e1a:	4a07      	ldr	r2, [pc, #28]	; (8002e38 <Delay+0x2c>)
 8002e1c:	fbb0 f0f2 	udiv	r0, r0, r2
 8002e20:	4343      	muls	r3, r0
 8002e22:	9301      	str	r3, [sp, #4]
	while ((DWT->CYCCNT - start) < micros);
 8002e24:	6863      	ldr	r3, [r4, #4]
 8002e26:	9a01      	ldr	r2, [sp, #4]
 8002e28:	1b5b      	subs	r3, r3, r5
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d3fa      	bcc.n	8002e24 <Delay+0x18>
}
 8002e2e:	b003      	add	sp, #12
 8002e30:	bd30      	pop	{r4, r5, pc}
 8002e32:	bf00      	nop
 8002e34:	e0001000 	.word	0xe0001000
 8002e38:	000f4240 	.word	0x000f4240

08002e3c <TM_OneWire_Init>:
#include "tm_stm32_onewire.h"
#include "tm_stm32_delay.h"
#include "defines.h"
#include "tm_stm32_gpio.h"

void TM_OneWire_Init(TM_OneWire_t* OneWireStruct, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8002e3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002e3e:	460e      	mov	r6, r1
 8002e40:	4615      	mov	r5, r2
 8002e42:	4604      	mov	r4, r0
	/* Initialize delay if it was not already */
	TM_DELAY_Init();
 8002e44:	f7ff fd16 	bl	8002874 <TM_DELAY_Init>

	/* Init GPIO pin */
	TM_GPIO_Init(GPIOx, GPIO_Pin, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium);
 8002e48:	2201      	movs	r2, #1
 8002e4a:	9201      	str	r2, [sp, #4]
 8002e4c:	9200      	str	r2, [sp, #0]
 8002e4e:	2300      	movs	r3, #0
 8002e50:	4629      	mov	r1, r5
 8002e52:	4630      	mov	r0, r6
 8002e54:	f7ff ffbe 	bl	8002dd4 <TM_GPIO_Init>
	
	/* Save settings */
	OneWireStruct->GPIOx = GPIOx;
 8002e58:	6026      	str	r6, [r4, #0]
	OneWireStruct->GPIO_Pin = GPIO_Pin;
 8002e5a:	80a5      	strh	r5, [r4, #4]
}
 8002e5c:	b002      	add	sp, #8
 8002e5e:	bd70      	pop	{r4, r5, r6, pc}

08002e60 <TM_OneWire_Reset>:

uint8_t TM_OneWire_Reset(TM_OneWire_t* OneWireStruct) {
 8002e60:	b510      	push	{r4, lr}
 8002e62:	4604      	mov	r4, r0
	uint8_t i;
	
	/* Line low, and wait 480us */
	ONEWIRE_LOW(OneWireStruct);
 8002e64:	6800      	ldr	r0, [r0, #0]
 8002e66:	88a1      	ldrh	r1, [r4, #4]
 8002e68:	040b      	lsls	r3, r1, #16
 8002e6a:	6183      	str	r3, [r0, #24]
	ONEWIRE_OUTPUT(OneWireStruct);
 8002e6c:	f7ff ff2a 	bl	8002cc4 <TM_GPIO_SetPinAsOutput>
	ONEWIRE_DELAY(480);
 8002e70:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8002e74:	f7ff ffca 	bl	8002e0c <Delay>
	
	/* Release line and wait for 70us */
	ONEWIRE_INPUT(OneWireStruct);
 8002e78:	88a1      	ldrh	r1, [r4, #4]
 8002e7a:	6820      	ldr	r0, [r4, #0]
 8002e7c:	f7ff ff10 	bl	8002ca0 <TM_GPIO_SetPinAsInput>
	ONEWIRE_DELAY(70);
 8002e80:	2046      	movs	r0, #70	; 0x46
 8002e82:	f7ff ffc3 	bl	8002e0c <Delay>
	
	/* Check bit value */
	i = TM_GPIO_GetInputPinValue(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin);
 8002e86:	6823      	ldr	r3, [r4, #0]
 8002e88:	88a2      	ldrh	r2, [r4, #4]
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	421a      	tst	r2, r3
 8002e8e:	bf14      	ite	ne
 8002e90:	2401      	movne	r4, #1
 8002e92:	2400      	moveq	r4, #0
	
	/* Delay for 410 us */
	ONEWIRE_DELAY(410);
 8002e94:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8002e98:	f7ff ffb8 	bl	8002e0c <Delay>
	
	/* Return value of presence pulse, 0 = OK, 1 = ERROR */
	return i;
}
 8002e9c:	4620      	mov	r0, r4
 8002e9e:	bd10      	pop	{r4, pc}

08002ea0 <TM_OneWire_WriteBit>:

void TM_OneWire_WriteBit(TM_OneWire_t* OneWireStruct, uint8_t bit) {
 8002ea0:	b510      	push	{r4, lr}
 8002ea2:	4604      	mov	r4, r0
 8002ea4:	6800      	ldr	r0, [r0, #0]
 8002ea6:	88a3      	ldrh	r3, [r4, #4]
	if (bit) {
		/* Set line low */
		ONEWIRE_LOW(OneWireStruct);
 8002ea8:	041a      	lsls	r2, r3, #16
 8002eaa:	6182      	str	r2, [r0, #24]
	if (bit) {
 8002eac:	b191      	cbz	r1, 8002ed4 <TM_OneWire_WriteBit+0x34>
		ONEWIRE_OUTPUT(OneWireStruct);
 8002eae:	4619      	mov	r1, r3
 8002eb0:	f7ff ff08 	bl	8002cc4 <TM_GPIO_SetPinAsOutput>
		ONEWIRE_DELAY(10);
 8002eb4:	200a      	movs	r0, #10
 8002eb6:	f7ff ffa9 	bl	8002e0c <Delay>
		
		/* Bit high */
		ONEWIRE_INPUT(OneWireStruct);
 8002eba:	6820      	ldr	r0, [r4, #0]
 8002ebc:	88a1      	ldrh	r1, [r4, #4]
 8002ebe:	f7ff feef 	bl	8002ca0 <TM_GPIO_SetPinAsInput>
		
		/* Wait for 55 us and release the line */
		ONEWIRE_DELAY(55);
 8002ec2:	2037      	movs	r0, #55	; 0x37
		
		/* Bit high */
		ONEWIRE_INPUT(OneWireStruct);
		
		/* Wait for 5 us and release the line */
		ONEWIRE_DELAY(5);
 8002ec4:	f7ff ffa2 	bl	8002e0c <Delay>
		ONEWIRE_INPUT(OneWireStruct);
 8002ec8:	88a1      	ldrh	r1, [r4, #4]
 8002eca:	6820      	ldr	r0, [r4, #0]
	}
}
 8002ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ONEWIRE_INPUT(OneWireStruct);
 8002ed0:	f7ff bee6 	b.w	8002ca0 <TM_GPIO_SetPinAsInput>
		ONEWIRE_OUTPUT(OneWireStruct);
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	f7ff fef5 	bl	8002cc4 <TM_GPIO_SetPinAsOutput>
		ONEWIRE_DELAY(65);
 8002eda:	2041      	movs	r0, #65	; 0x41
 8002edc:	f7ff ff96 	bl	8002e0c <Delay>
		ONEWIRE_INPUT(OneWireStruct);
 8002ee0:	6820      	ldr	r0, [r4, #0]
 8002ee2:	88a1      	ldrh	r1, [r4, #4]
 8002ee4:	f7ff fedc 	bl	8002ca0 <TM_GPIO_SetPinAsInput>
		ONEWIRE_DELAY(5);
 8002ee8:	2005      	movs	r0, #5
 8002eea:	e7eb      	b.n	8002ec4 <TM_OneWire_WriteBit+0x24>

08002eec <TM_OneWire_ReadBit>:

uint8_t TM_OneWire_ReadBit(TM_OneWire_t* OneWireStruct) {
 8002eec:	b510      	push	{r4, lr}
 8002eee:	4604      	mov	r4, r0
	uint8_t bit = 0;
	
	/* Line low */
	ONEWIRE_LOW(OneWireStruct);
 8002ef0:	6800      	ldr	r0, [r0, #0]
 8002ef2:	88a1      	ldrh	r1, [r4, #4]
 8002ef4:	040b      	lsls	r3, r1, #16
 8002ef6:	6183      	str	r3, [r0, #24]
	ONEWIRE_OUTPUT(OneWireStruct);
 8002ef8:	f7ff fee4 	bl	8002cc4 <TM_GPIO_SetPinAsOutput>
	ONEWIRE_DELAY(3);
 8002efc:	2003      	movs	r0, #3
 8002efe:	f7ff ff85 	bl	8002e0c <Delay>
	
	/* Release line */
	ONEWIRE_INPUT(OneWireStruct);
 8002f02:	88a1      	ldrh	r1, [r4, #4]
 8002f04:	6820      	ldr	r0, [r4, #0]
 8002f06:	f7ff fecb 	bl	8002ca0 <TM_GPIO_SetPinAsInput>
	ONEWIRE_DELAY(10);
 8002f0a:	200a      	movs	r0, #10
 8002f0c:	f7ff ff7e 	bl	8002e0c <Delay>
	
	/* Read line value */
	if (TM_GPIO_GetInputPinValue(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) {
 8002f10:	6823      	ldr	r3, [r4, #0]
 8002f12:	88a2      	ldrh	r2, [r4, #4]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	421a      	tst	r2, r3
	uint8_t bit = 0;
 8002f18:	bf14      	ite	ne
 8002f1a:	2401      	movne	r4, #1
 8002f1c:	2400      	moveq	r4, #0
		/* Bit is HIGH */
		bit = 1;
	}
	
	/* Wait 50us to complete 60us period */
	ONEWIRE_DELAY(50);
 8002f1e:	2032      	movs	r0, #50	; 0x32
 8002f20:	f7ff ff74 	bl	8002e0c <Delay>
	
	/* Return bit value */
	return bit;
}
 8002f24:	4620      	mov	r0, r4
 8002f26:	bd10      	pop	{r4, pc}

08002f28 <TM_OneWire_WriteByte>:

void TM_OneWire_WriteByte(TM_OneWire_t* OneWireStruct, uint8_t byte) {
 8002f28:	b570      	push	{r4, r5, r6, lr}
 8002f2a:	4606      	mov	r6, r0
 8002f2c:	460d      	mov	r5, r1
	uint8_t i = 8;
	/* Write 8 bits */
	while (i--) {
 8002f2e:	2409      	movs	r4, #9
 8002f30:	3c01      	subs	r4, #1
 8002f32:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8002f36:	d100      	bne.n	8002f3a <TM_OneWire_WriteByte+0x12>
		/* LSB bit is first */
		TM_OneWire_WriteBit(OneWireStruct, byte & 0x01);
		byte >>= 1;
	}
}
 8002f38:	bd70      	pop	{r4, r5, r6, pc}
		TM_OneWire_WriteBit(OneWireStruct, byte & 0x01);
 8002f3a:	f005 0101 	and.w	r1, r5, #1
 8002f3e:	4630      	mov	r0, r6
 8002f40:	f7ff ffae 	bl	8002ea0 <TM_OneWire_WriteBit>
		byte >>= 1;
 8002f44:	086d      	lsrs	r5, r5, #1
 8002f46:	e7f3      	b.n	8002f30 <TM_OneWire_WriteByte+0x8>

08002f48 <TM_OneWire_ReadByte>:

uint8_t TM_OneWire_ReadByte(TM_OneWire_t* OneWireStruct) {
 8002f48:	b570      	push	{r4, r5, r6, lr}
 8002f4a:	4606      	mov	r6, r0
	uint8_t i = 8, byte = 0;
	while (i--) {
 8002f4c:	2509      	movs	r5, #9
	uint8_t i = 8, byte = 0;
 8002f4e:	2400      	movs	r4, #0
 8002f50:	3d01      	subs	r5, #1
	while (i--) {
 8002f52:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8002f56:	d101      	bne.n	8002f5c <TM_OneWire_ReadByte+0x14>
		byte >>= 1;
		byte |= (TM_OneWire_ReadBit(OneWireStruct) << 7);
	}
	
	return byte;
}
 8002f58:	4620      	mov	r0, r4
 8002f5a:	bd70      	pop	{r4, r5, r6, pc}
		byte |= (TM_OneWire_ReadBit(OneWireStruct) << 7);
 8002f5c:	4630      	mov	r0, r6
 8002f5e:	f7ff ffc5 	bl	8002eec <TM_OneWire_ReadBit>
		byte >>= 1;
 8002f62:	0864      	lsrs	r4, r4, #1
		byte |= (TM_OneWire_ReadBit(OneWireStruct) << 7);
 8002f64:	ea44 14c0 	orr.w	r4, r4, r0, lsl #7
 8002f68:	b2e4      	uxtb	r4, r4
 8002f6a:	e7f1      	b.n	8002f50 <TM_OneWire_ReadByte+0x8>

08002f6c <TM_OneWire_Search>:
	OneWireStruct->LastDiscrepancy = 0;
	OneWireStruct->LastDeviceFlag = 0;
	OneWireStruct->LastFamilyDiscrepancy = 0;
}

uint8_t TM_OneWire_Search(TM_OneWire_t* OneWireStruct, uint8_t command) {
 8002f6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	rom_byte_number = 0;
	rom_byte_mask = 1;
	search_result = 0;

	/* Check if any devices */
	if (!OneWireStruct->LastDeviceFlag) {
 8002f70:	7a03      	ldrb	r3, [r0, #8]
uint8_t TM_OneWire_Search(TM_OneWire_t* OneWireStruct, uint8_t command) {
 8002f72:	4604      	mov	r4, r0
 8002f74:	460d      	mov	r5, r1
	if (!OneWireStruct->LastDeviceFlag) {
 8002f76:	b91b      	cbnz	r3, 8002f80 <TM_OneWire_Search+0x14>
		/* 1-Wire reset */
		if (TM_OneWire_Reset(OneWireStruct)) {
 8002f78:	f7ff ff72 	bl	8002e60 <TM_OneWire_Reset>
 8002f7c:	4681      	mov	r9, r0
 8002f7e:	b128      	cbz	r0, 8002f8c <TM_OneWire_Search+0x20>
			/* Reset the search */
			OneWireStruct->LastDiscrepancy = 0;
 8002f80:	2000      	movs	r0, #0
 8002f82:	71a0      	strb	r0, [r4, #6]
			OneWireStruct->LastDeviceFlag = 0;
 8002f84:	7220      	strb	r0, [r4, #8]
			OneWireStruct->LastFamilyDiscrepancy = 0;
 8002f86:	71e0      	strb	r0, [r4, #7]
			return 0;
 8002f88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		}

		/* Issue the search command */
		TM_OneWire_WriteByte(OneWireStruct, command);  
 8002f8c:	4629      	mov	r1, r5
 8002f8e:	4620      	mov	r0, r4
 8002f90:	f7ff ffca 	bl	8002f28 <TM_OneWire_WriteByte>
	rom_byte_mask = 1;
 8002f94:	2601      	movs	r6, #1
	rom_byte_number = 0;
 8002f96:	464f      	mov	r7, r9
	id_bit_number = 1;
 8002f98:	4635      	mov	r5, r6

		/* Loop to do the search */
		do {
			/* Read a bit and its complement */
			id_bit = TM_OneWire_ReadBit(OneWireStruct);
 8002f9a:	4620      	mov	r0, r4
 8002f9c:	f7ff ffa6 	bl	8002eec <TM_OneWire_ReadBit>
 8002fa0:	4680      	mov	r8, r0
			cmp_id_bit = TM_OneWire_ReadBit(OneWireStruct);
 8002fa2:	4620      	mov	r0, r4
 8002fa4:	f7ff ffa2 	bl	8002eec <TM_OneWire_ReadBit>

			/* Check for no devices on 1-wire */
			if ((id_bit == 1) && (cmp_id_bit == 1)) {
 8002fa8:	f1b8 0f01 	cmp.w	r8, #1
 8002fac:	d110      	bne.n	8002fd0 <TM_OneWire_Search+0x64>
 8002fae:	2801      	cmp	r0, #1
 8002fb0:	d12e      	bne.n	8003010 <TM_OneWire_Search+0xa4>
			}
		/* Loop until through all ROM bytes 0-7 */
		} while (rom_byte_number < 8);

		/* If the search was successful then */
		if (!(id_bit_number < 65)) {
 8002fb2:	2d40      	cmp	r5, #64	; 0x40
 8002fb4:	d9e4      	bls.n	8002f80 <TM_OneWire_Search+0x14>
			/* Search successful so set LastDiscrepancy, LastDeviceFlag, search_result */
			OneWireStruct->LastDiscrepancy = last_zero;
 8002fb6:	f884 9006 	strb.w	r9, [r4, #6]

			/* Check for last device */
			if (OneWireStruct->LastDiscrepancy == 0) {
 8002fba:	f1b9 0f00 	cmp.w	r9, #0
 8002fbe:	d101      	bne.n	8002fc4 <TM_OneWire_Search+0x58>
				OneWireStruct->LastDeviceFlag = 1;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	7223      	strb	r3, [r4, #8]
			search_result = 1;
		}
	}

	/* If no device found then reset counters so next 'search' will be like a first */
	if (!search_result || !OneWireStruct->ROM_NO[0]) {
 8002fc4:	7a63      	ldrb	r3, [r4, #9]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d0da      	beq.n	8002f80 <TM_OneWire_Search+0x14>
 8002fca:	2001      	movs	r0, #1
		OneWireStruct->LastFamilyDiscrepancy = 0;
		search_result = 0;
	}

	return search_result;
}
 8002fcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (id_bit != cmp_id_bit) {
 8002fd0:	4580      	cmp	r8, r0
 8002fd2:	eb04 0307 	add.w	r3, r4, r7
 8002fd6:	d110      	bne.n	8002ffa <TM_OneWire_Search+0x8e>
					if (id_bit_number < OneWireStruct->LastDiscrepancy) {
 8002fd8:	79a2      	ldrb	r2, [r4, #6]
 8002fda:	4295      	cmp	r5, r2
 8002fdc:	d212      	bcs.n	8003004 <TM_OneWire_Search+0x98>
						search_direction = ((OneWireStruct->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 8002fde:	7a5a      	ldrb	r2, [r3, #9]
 8002fe0:	4216      	tst	r6, r2
 8002fe2:	bf14      	ite	ne
 8002fe4:	f04f 0801 	movne.w	r8, #1
 8002fe8:	f04f 0800 	moveq.w	r8, #0
					if (search_direction == 0) {
 8002fec:	f1b8 0f00 	cmp.w	r8, #0
 8002ff0:	d10e      	bne.n	8003010 <TM_OneWire_Search+0xa4>
						if (last_zero < 9) {
 8002ff2:	2d08      	cmp	r5, #8
 8002ff4:	d800      	bhi.n	8002ff8 <TM_OneWire_Search+0x8c>
							OneWireStruct->LastFamilyDiscrepancy = last_zero;
 8002ff6:	71e5      	strb	r5, [r4, #7]
 8002ff8:	46a9      	mov	r9, r5
					OneWireStruct->ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 8002ffa:	7a5a      	ldrb	r2, [r3, #9]
 8002ffc:	ea22 0206 	bic.w	r2, r2, r6
 8003000:	725a      	strb	r2, [r3, #9]
 8003002:	e00b      	b.n	800301c <TM_OneWire_Search+0xb0>
						search_direction = (id_bit_number == OneWireStruct->LastDiscrepancy);
 8003004:	bf0c      	ite	eq
 8003006:	f04f 0801 	moveq.w	r8, #1
 800300a:	f04f 0800 	movne.w	r8, #0
 800300e:	e7ed      	b.n	8002fec <TM_OneWire_Search+0x80>
					OneWireStruct->ROM_NO[rom_byte_number] |= rom_byte_mask;
 8003010:	19e2      	adds	r2, r4, r7
 8003012:	f04f 0801 	mov.w	r8, #1
 8003016:	7a53      	ldrb	r3, [r2, #9]
 8003018:	4333      	orrs	r3, r6
 800301a:	7253      	strb	r3, [r2, #9]
				TM_OneWire_WriteBit(OneWireStruct, search_direction);
 800301c:	4641      	mov	r1, r8
 800301e:	4620      	mov	r0, r4
				rom_byte_mask <<= 1;
 8003020:	0076      	lsls	r6, r6, #1
				TM_OneWire_WriteBit(OneWireStruct, search_direction);
 8003022:	f7ff ff3d 	bl	8002ea0 <TM_OneWire_WriteBit>
				if (rom_byte_mask == 0) {
 8003026:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
					rom_byte_number++;
 800302a:	bf04      	itt	eq
 800302c:	3701      	addeq	r7, #1
 800302e:	b2ff      	uxtbeq	r7, r7
				id_bit_number++;
 8003030:	f105 0501 	add.w	r5, r5, #1
					rom_byte_mask = 1;
 8003034:	bf08      	it	eq
 8003036:	2601      	moveq	r6, #1
		} while (rom_byte_number < 8);
 8003038:	2f07      	cmp	r7, #7
				id_bit_number++;
 800303a:	b2ed      	uxtb	r5, r5
		} while (rom_byte_number < 8);
 800303c:	d9ad      	bls.n	8002f9a <TM_OneWire_Search+0x2e>
 800303e:	e7b8      	b.n	8002fb2 <TM_OneWire_Search+0x46>

08003040 <TM_OneWire_First>:
	OneWireStruct->LastDiscrepancy = 0;
 8003040:	2200      	movs	r2, #0
 8003042:	7182      	strb	r2, [r0, #6]
	OneWireStruct->LastDeviceFlag = 0;
 8003044:	7202      	strb	r2, [r0, #8]
	OneWireStruct->LastFamilyDiscrepancy = 0;
 8003046:	71c2      	strb	r2, [r0, #7]
	return TM_OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 8003048:	21f0      	movs	r1, #240	; 0xf0
 800304a:	f7ff bf8f 	b.w	8002f6c <TM_OneWire_Search>

0800304e <TM_OneWire_SelectWithPointer>:
	for (i = 0; i < 8; i++) {
		TM_OneWire_WriteByte(OneWireStruct, *(addr + i));
	}
}

void TM_OneWire_SelectWithPointer(TM_OneWire_t* OneWireStruct, uint8_t *ROM) {
 800304e:	b570      	push	{r4, r5, r6, lr}
 8003050:	460c      	mov	r4, r1
	uint8_t i;
	TM_OneWire_WriteByte(OneWireStruct, ONEWIRE_CMD_MATCHROM);
 8003052:	2155      	movs	r1, #85	; 0x55
void TM_OneWire_SelectWithPointer(TM_OneWire_t* OneWireStruct, uint8_t *ROM) {
 8003054:	4606      	mov	r6, r0
	TM_OneWire_WriteByte(OneWireStruct, ONEWIRE_CMD_MATCHROM);
 8003056:	f7ff ff67 	bl	8002f28 <TM_OneWire_WriteByte>
 800305a:	1e65      	subs	r5, r4, #1
 800305c:	3407      	adds	r4, #7
	
	for (i = 0; i < 8; i++) {
		TM_OneWire_WriteByte(OneWireStruct, *(ROM + i));
 800305e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8003062:	4630      	mov	r0, r6
 8003064:	f7ff ff60 	bl	8002f28 <TM_OneWire_WriteByte>
	for (i = 0; i < 8; i++) {
 8003068:	42a5      	cmp	r5, r4
 800306a:	d1f8      	bne.n	800305e <TM_OneWire_SelectWithPointer+0x10>
	}	
}
 800306c:	bd70      	pop	{r4, r5, r6, pc}

0800306e <TM_OneWire_GetFullROM>:

void TM_OneWire_GetFullROM(TM_OneWire_t* OneWireStruct, uint8_t *firstIndex) {
 800306e:	f100 0309 	add.w	r3, r0, #9
 8003072:	3901      	subs	r1, #1
 8003074:	3011      	adds	r0, #17
	uint8_t i;
	for (i = 0; i < 8; i++) {
		*(firstIndex + i) = OneWireStruct->ROM_NO[i];
 8003076:	f813 2b01 	ldrb.w	r2, [r3], #1
 800307a:	f801 2f01 	strb.w	r2, [r1, #1]!
	for (i = 0; i < 8; i++) {
 800307e:	4283      	cmp	r3, r0
 8003080:	d1f9      	bne.n	8003076 <TM_OneWire_GetFullROM+0x8>
	}
}
 8003082:	4770      	bx	lr

08003084 <TM_OneWire_CRC8>:

uint8_t TM_OneWire_CRC8(uint8_t *addr, uint8_t len) {
 8003084:	b530      	push	{r4, r5, lr}
 8003086:	4401      	add	r1, r0
	uint8_t crc = 0, inbyte, i, mix;
 8003088:	2300      	movs	r3, #0
	
	while (len--) {
 800308a:	4288      	cmp	r0, r1
 800308c:	d101      	bne.n	8003092 <TM_OneWire_CRC8+0xe>
		}
	}
	
	/* Return calculated CRC */
	return crc;
}
 800308e:	4618      	mov	r0, r3
 8003090:	bd30      	pop	{r4, r5, pc}
		inbyte = *addr++;
 8003092:	f810 4b01 	ldrb.w	r4, [r0], #1
 8003096:	2208      	movs	r2, #8
			mix = (crc ^ inbyte) & 0x01;
 8003098:	ea83 0504 	eor.w	r5, r3, r4
			if (mix) {
 800309c:	f015 0f01 	tst.w	r5, #1
 80030a0:	ea4f 0353 	mov.w	r3, r3, lsr #1
				crc ^= 0x8C;
 80030a4:	bf18      	it	ne
 80030a6:	f083 038c 	eorne.w	r3, r3, #140	; 0x8c
 80030aa:	f102 32ff 	add.w	r2, r2, #4294967295
 80030ae:	bf18      	it	ne
 80030b0:	b2db      	uxtbne	r3, r3
		for (i = 8; i; i--) {
 80030b2:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
			inbyte >>= 1;
 80030b6:	ea4f 0454 	mov.w	r4, r4, lsr #1
		for (i = 8; i; i--) {
 80030ba:	d1ed      	bne.n	8003098 <TM_OneWire_CRC8+0x14>
 80030bc:	e7e5      	b.n	800308a <TM_OneWire_CRC8+0x6>
	...

080030c0 <TM_RCC_InitSystem>:
 * | OTHER DEALINGS IN THE SOFTWARE.
 * |----------------------------------------------------------------------
 */
#include "tm_stm32_rcc.h"

TM_RCC_Result_t TM_RCC_InitSystem(void) {
 80030c0:	b510      	push	{r4, lr}
 80030c2:	b094      	sub	sp, #80	; 0x50
	/* Enable D-Cache */
	SCB_EnableDCache();
#endif
	
	/* Enable Power Control clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 80030c4:	2300      	movs	r3, #0
 80030c6:	4a23      	ldr	r2, [pc, #140]	; (8003154 <TM_RCC_InitSystem+0x94>)
 80030c8:	9300      	str	r3, [sp, #0]
 80030ca:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80030cc:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80030d0:	6411      	str	r1, [r2, #64]	; 0x40
 80030d2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80030d4:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80030d8:	9200      	str	r2, [sp, #0]
 80030da:	9a00      	ldr	r2, [sp, #0]

#if !defined(STM32F0xx)
	/* Set voltage scaling */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80030dc:	4a1e      	ldr	r2, [pc, #120]	; (8003158 <TM_RCC_InitSystem+0x98>)
 80030de:	9301      	str	r3, [sp, #4]
 80030e0:	6811      	ldr	r1, [r2, #0]
 80030e2:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 80030e6:	6011      	str	r1, [r2, #0]
 80030e8:	6812      	ldr	r2, [r2, #0]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE;
	
	/* Select proper PLL input clock */
	if (RCC_OSCILLATORTYPE == RCC_OSCILLATORTYPE_HSE) {	
		RCC_OscInitStruct.HSEState = RCC_HSE_ON;
		RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 80030ea:	930a      	str	r3, [sp, #40]	; 0x28
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80030ec:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
		RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80030f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80030f4:	9201      	str	r2, [sp, #4]
		RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80030f6:	930e      	str	r3, [sp, #56]	; 0x38
	
	/* Set PLL parameters */
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	
#if !defined(STM32F0xx)
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM;
 80030f8:	2308      	movs	r3, #8
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80030fa:	9a01      	ldr	r2, [sp, #4]
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM;
 80030fc:	930f      	str	r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE;
 80030fe:	2201      	movs	r2, #1
	RCC_OscInitStruct.PLL.PLLN = RCC_PLLN;
 8003100:	f44f 73b4 	mov.w	r3, #360	; 0x168
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003104:	2402      	movs	r4, #2
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE;
 8003106:	9207      	str	r2, [sp, #28]
	RCC_OscInitStruct.PLL.PLLN = RCC_PLLN;
 8003108:	9310      	str	r3, [sp, #64]	; 0x40
		RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800310a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP;
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ;
 800310e:	2307      	movs	r3, #7
	RCC_OscInitStruct.PLL.PLLR = 7;
#endif
#endif
	
	/* Try to init */
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003110:	a807      	add	r0, sp, #28
		RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003112:	9208      	str	r2, [sp, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003114:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP;
 8003116:	9411      	str	r4, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ;
 8003118:	9312      	str	r3, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 7;
 800311a:	9313      	str	r3, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800311c:	f7fd fd06 	bl	8000b2c <HAL_RCC_OscConfig>
 8003120:	b110      	cbz	r0, 8003128 <TM_RCC_InitSystem+0x68>
		return TM_RCC_Result_Error;
 8003122:	2001      	movs	r0, #1
		return TM_RCC_Result_Error;
	}
	
	/* Return OK */
	return TM_RCC_Result_Ok;
}
 8003124:	b014      	add	sp, #80	; 0x50
 8003126:	bd10      	pop	{r4, pc}
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8003128:	f7fd fb9e 	bl	8000868 <HAL_PWREx_EnableOverDrive>
 800312c:	2800      	cmp	r0, #0
 800312e:	d1f8      	bne.n	8003122 <TM_RCC_InitSystem+0x62>
	RCC_ClkInitStruct.ClockType |= RCC_CLOCKTYPE_PCLK2;
 8003130:	230f      	movs	r3, #15
 8003132:	9302      	str	r3, [sp, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 8003134:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003138:	9004      	str	r0, [sp, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 800313a:	9305      	str	r3, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK) {
 800313c:	2106      	movs	r1, #6
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800313e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK) {
 8003142:	a802      	add	r0, sp, #8
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003144:	9403      	str	r4, [sp, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003146:	9306      	str	r3, [sp, #24]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK) {
 8003148:	f7fd fbca 	bl	80008e0 <HAL_RCC_ClockConfig>
		return TM_RCC_Result_Error;
 800314c:	3000      	adds	r0, #0
 800314e:	bf18      	it	ne
 8003150:	2001      	movne	r0, #1
 8003152:	e7e7      	b.n	8003124 <TM_RCC_InitSystem+0x64>
 8003154:	40023800 	.word	0x40023800
 8003158:	40007000 	.word	0x40007000

0800315c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800315c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003194 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003160:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003162:	e003      	b.n	800316c <LoopCopyDataInit>

08003164 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003164:	4b0c      	ldr	r3, [pc, #48]	; (8003198 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003166:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003168:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800316a:	3104      	adds	r1, #4

0800316c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800316c:	480b      	ldr	r0, [pc, #44]	; (800319c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800316e:	4b0c      	ldr	r3, [pc, #48]	; (80031a0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003170:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003172:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003174:	d3f6      	bcc.n	8003164 <CopyDataInit>
  ldr  r2, =_sbss
 8003176:	4a0b      	ldr	r2, [pc, #44]	; (80031a4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003178:	e002      	b.n	8003180 <LoopFillZerobss>

0800317a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800317a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800317c:	f842 3b04 	str.w	r3, [r2], #4

08003180 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003180:	4b09      	ldr	r3, [pc, #36]	; (80031a8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003182:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003184:	d3f9      	bcc.n	800317a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003186:	f7ff fb4f 	bl	8002828 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800318a:	f000 f817 	bl	80031bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800318e:	f7ff f955 	bl	800243c <main>
  bx  lr    
 8003192:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003194:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003198:	08003ad0 	.word	0x08003ad0
  ldr  r0, =_sdata
 800319c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80031a0:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 80031a4:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 80031a8:	20004294 	.word	0x20004294

080031ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031ac:	e7fe      	b.n	80031ac <ADC_IRQHandler>
	...

080031b0 <__errno>:
 80031b0:	4b01      	ldr	r3, [pc, #4]	; (80031b8 <__errno+0x8>)
 80031b2:	6818      	ldr	r0, [r3, #0]
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	20000014 	.word	0x20000014

080031bc <__libc_init_array>:
 80031bc:	b570      	push	{r4, r5, r6, lr}
 80031be:	4e0d      	ldr	r6, [pc, #52]	; (80031f4 <__libc_init_array+0x38>)
 80031c0:	4c0d      	ldr	r4, [pc, #52]	; (80031f8 <__libc_init_array+0x3c>)
 80031c2:	1ba4      	subs	r4, r4, r6
 80031c4:	10a4      	asrs	r4, r4, #2
 80031c6:	2500      	movs	r5, #0
 80031c8:	42a5      	cmp	r5, r4
 80031ca:	d109      	bne.n	80031e0 <__libc_init_array+0x24>
 80031cc:	4e0b      	ldr	r6, [pc, #44]	; (80031fc <__libc_init_array+0x40>)
 80031ce:	4c0c      	ldr	r4, [pc, #48]	; (8003200 <__libc_init_array+0x44>)
 80031d0:	f000 fc28 	bl	8003a24 <_init>
 80031d4:	1ba4      	subs	r4, r4, r6
 80031d6:	10a4      	asrs	r4, r4, #2
 80031d8:	2500      	movs	r5, #0
 80031da:	42a5      	cmp	r5, r4
 80031dc:	d105      	bne.n	80031ea <__libc_init_array+0x2e>
 80031de:	bd70      	pop	{r4, r5, r6, pc}
 80031e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031e4:	4798      	blx	r3
 80031e6:	3501      	adds	r5, #1
 80031e8:	e7ee      	b.n	80031c8 <__libc_init_array+0xc>
 80031ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031ee:	4798      	blx	r3
 80031f0:	3501      	adds	r5, #1
 80031f2:	e7f2      	b.n	80031da <__libc_init_array+0x1e>
 80031f4:	08003ac8 	.word	0x08003ac8
 80031f8:	08003ac8 	.word	0x08003ac8
 80031fc:	08003ac8 	.word	0x08003ac8
 8003200:	08003acc 	.word	0x08003acc

08003204 <memcpy>:
 8003204:	b510      	push	{r4, lr}
 8003206:	1e43      	subs	r3, r0, #1
 8003208:	440a      	add	r2, r1
 800320a:	4291      	cmp	r1, r2
 800320c:	d100      	bne.n	8003210 <memcpy+0xc>
 800320e:	bd10      	pop	{r4, pc}
 8003210:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003214:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003218:	e7f7      	b.n	800320a <memcpy+0x6>

0800321a <memset>:
 800321a:	4402      	add	r2, r0
 800321c:	4603      	mov	r3, r0
 800321e:	4293      	cmp	r3, r2
 8003220:	d100      	bne.n	8003224 <memset+0xa>
 8003222:	4770      	bx	lr
 8003224:	f803 1b01 	strb.w	r1, [r3], #1
 8003228:	e7f9      	b.n	800321e <memset+0x4>
	...

0800322c <_free_r>:
 800322c:	b538      	push	{r3, r4, r5, lr}
 800322e:	4605      	mov	r5, r0
 8003230:	2900      	cmp	r1, #0
 8003232:	d045      	beq.n	80032c0 <_free_r+0x94>
 8003234:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003238:	1f0c      	subs	r4, r1, #4
 800323a:	2b00      	cmp	r3, #0
 800323c:	bfb8      	it	lt
 800323e:	18e4      	addlt	r4, r4, r3
 8003240:	f000 f8cc 	bl	80033dc <__malloc_lock>
 8003244:	4a1f      	ldr	r2, [pc, #124]	; (80032c4 <_free_r+0x98>)
 8003246:	6813      	ldr	r3, [r2, #0]
 8003248:	4610      	mov	r0, r2
 800324a:	b933      	cbnz	r3, 800325a <_free_r+0x2e>
 800324c:	6063      	str	r3, [r4, #4]
 800324e:	6014      	str	r4, [r2, #0]
 8003250:	4628      	mov	r0, r5
 8003252:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003256:	f000 b8c2 	b.w	80033de <__malloc_unlock>
 800325a:	42a3      	cmp	r3, r4
 800325c:	d90c      	bls.n	8003278 <_free_r+0x4c>
 800325e:	6821      	ldr	r1, [r4, #0]
 8003260:	1862      	adds	r2, r4, r1
 8003262:	4293      	cmp	r3, r2
 8003264:	bf04      	itt	eq
 8003266:	681a      	ldreq	r2, [r3, #0]
 8003268:	685b      	ldreq	r3, [r3, #4]
 800326a:	6063      	str	r3, [r4, #4]
 800326c:	bf04      	itt	eq
 800326e:	1852      	addeq	r2, r2, r1
 8003270:	6022      	streq	r2, [r4, #0]
 8003272:	6004      	str	r4, [r0, #0]
 8003274:	e7ec      	b.n	8003250 <_free_r+0x24>
 8003276:	4613      	mov	r3, r2
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	b10a      	cbz	r2, 8003280 <_free_r+0x54>
 800327c:	42a2      	cmp	r2, r4
 800327e:	d9fa      	bls.n	8003276 <_free_r+0x4a>
 8003280:	6819      	ldr	r1, [r3, #0]
 8003282:	1858      	adds	r0, r3, r1
 8003284:	42a0      	cmp	r0, r4
 8003286:	d10b      	bne.n	80032a0 <_free_r+0x74>
 8003288:	6820      	ldr	r0, [r4, #0]
 800328a:	4401      	add	r1, r0
 800328c:	1858      	adds	r0, r3, r1
 800328e:	4282      	cmp	r2, r0
 8003290:	6019      	str	r1, [r3, #0]
 8003292:	d1dd      	bne.n	8003250 <_free_r+0x24>
 8003294:	6810      	ldr	r0, [r2, #0]
 8003296:	6852      	ldr	r2, [r2, #4]
 8003298:	605a      	str	r2, [r3, #4]
 800329a:	4401      	add	r1, r0
 800329c:	6019      	str	r1, [r3, #0]
 800329e:	e7d7      	b.n	8003250 <_free_r+0x24>
 80032a0:	d902      	bls.n	80032a8 <_free_r+0x7c>
 80032a2:	230c      	movs	r3, #12
 80032a4:	602b      	str	r3, [r5, #0]
 80032a6:	e7d3      	b.n	8003250 <_free_r+0x24>
 80032a8:	6820      	ldr	r0, [r4, #0]
 80032aa:	1821      	adds	r1, r4, r0
 80032ac:	428a      	cmp	r2, r1
 80032ae:	bf04      	itt	eq
 80032b0:	6811      	ldreq	r1, [r2, #0]
 80032b2:	6852      	ldreq	r2, [r2, #4]
 80032b4:	6062      	str	r2, [r4, #4]
 80032b6:	bf04      	itt	eq
 80032b8:	1809      	addeq	r1, r1, r0
 80032ba:	6021      	streq	r1, [r4, #0]
 80032bc:	605c      	str	r4, [r3, #4]
 80032be:	e7c7      	b.n	8003250 <_free_r+0x24>
 80032c0:	bd38      	pop	{r3, r4, r5, pc}
 80032c2:	bf00      	nop
 80032c4:	200040b4 	.word	0x200040b4

080032c8 <_malloc_r>:
 80032c8:	b570      	push	{r4, r5, r6, lr}
 80032ca:	1ccd      	adds	r5, r1, #3
 80032cc:	f025 0503 	bic.w	r5, r5, #3
 80032d0:	3508      	adds	r5, #8
 80032d2:	2d0c      	cmp	r5, #12
 80032d4:	bf38      	it	cc
 80032d6:	250c      	movcc	r5, #12
 80032d8:	2d00      	cmp	r5, #0
 80032da:	4606      	mov	r6, r0
 80032dc:	db01      	blt.n	80032e2 <_malloc_r+0x1a>
 80032de:	42a9      	cmp	r1, r5
 80032e0:	d903      	bls.n	80032ea <_malloc_r+0x22>
 80032e2:	230c      	movs	r3, #12
 80032e4:	6033      	str	r3, [r6, #0]
 80032e6:	2000      	movs	r0, #0
 80032e8:	bd70      	pop	{r4, r5, r6, pc}
 80032ea:	f000 f877 	bl	80033dc <__malloc_lock>
 80032ee:	4a21      	ldr	r2, [pc, #132]	; (8003374 <_malloc_r+0xac>)
 80032f0:	6814      	ldr	r4, [r2, #0]
 80032f2:	4621      	mov	r1, r4
 80032f4:	b991      	cbnz	r1, 800331c <_malloc_r+0x54>
 80032f6:	4c20      	ldr	r4, [pc, #128]	; (8003378 <_malloc_r+0xb0>)
 80032f8:	6823      	ldr	r3, [r4, #0]
 80032fa:	b91b      	cbnz	r3, 8003304 <_malloc_r+0x3c>
 80032fc:	4630      	mov	r0, r6
 80032fe:	f000 f83d 	bl	800337c <_sbrk_r>
 8003302:	6020      	str	r0, [r4, #0]
 8003304:	4629      	mov	r1, r5
 8003306:	4630      	mov	r0, r6
 8003308:	f000 f838 	bl	800337c <_sbrk_r>
 800330c:	1c43      	adds	r3, r0, #1
 800330e:	d124      	bne.n	800335a <_malloc_r+0x92>
 8003310:	230c      	movs	r3, #12
 8003312:	6033      	str	r3, [r6, #0]
 8003314:	4630      	mov	r0, r6
 8003316:	f000 f862 	bl	80033de <__malloc_unlock>
 800331a:	e7e4      	b.n	80032e6 <_malloc_r+0x1e>
 800331c:	680b      	ldr	r3, [r1, #0]
 800331e:	1b5b      	subs	r3, r3, r5
 8003320:	d418      	bmi.n	8003354 <_malloc_r+0x8c>
 8003322:	2b0b      	cmp	r3, #11
 8003324:	d90f      	bls.n	8003346 <_malloc_r+0x7e>
 8003326:	600b      	str	r3, [r1, #0]
 8003328:	50cd      	str	r5, [r1, r3]
 800332a:	18cc      	adds	r4, r1, r3
 800332c:	4630      	mov	r0, r6
 800332e:	f000 f856 	bl	80033de <__malloc_unlock>
 8003332:	f104 000b 	add.w	r0, r4, #11
 8003336:	1d23      	adds	r3, r4, #4
 8003338:	f020 0007 	bic.w	r0, r0, #7
 800333c:	1ac3      	subs	r3, r0, r3
 800333e:	d0d3      	beq.n	80032e8 <_malloc_r+0x20>
 8003340:	425a      	negs	r2, r3
 8003342:	50e2      	str	r2, [r4, r3]
 8003344:	e7d0      	b.n	80032e8 <_malloc_r+0x20>
 8003346:	428c      	cmp	r4, r1
 8003348:	684b      	ldr	r3, [r1, #4]
 800334a:	bf16      	itet	ne
 800334c:	6063      	strne	r3, [r4, #4]
 800334e:	6013      	streq	r3, [r2, #0]
 8003350:	460c      	movne	r4, r1
 8003352:	e7eb      	b.n	800332c <_malloc_r+0x64>
 8003354:	460c      	mov	r4, r1
 8003356:	6849      	ldr	r1, [r1, #4]
 8003358:	e7cc      	b.n	80032f4 <_malloc_r+0x2c>
 800335a:	1cc4      	adds	r4, r0, #3
 800335c:	f024 0403 	bic.w	r4, r4, #3
 8003360:	42a0      	cmp	r0, r4
 8003362:	d005      	beq.n	8003370 <_malloc_r+0xa8>
 8003364:	1a21      	subs	r1, r4, r0
 8003366:	4630      	mov	r0, r6
 8003368:	f000 f808 	bl	800337c <_sbrk_r>
 800336c:	3001      	adds	r0, #1
 800336e:	d0cf      	beq.n	8003310 <_malloc_r+0x48>
 8003370:	6025      	str	r5, [r4, #0]
 8003372:	e7db      	b.n	800332c <_malloc_r+0x64>
 8003374:	200040b4 	.word	0x200040b4
 8003378:	200040b8 	.word	0x200040b8

0800337c <_sbrk_r>:
 800337c:	b538      	push	{r3, r4, r5, lr}
 800337e:	4c06      	ldr	r4, [pc, #24]	; (8003398 <_sbrk_r+0x1c>)
 8003380:	2300      	movs	r3, #0
 8003382:	4605      	mov	r5, r0
 8003384:	4608      	mov	r0, r1
 8003386:	6023      	str	r3, [r4, #0]
 8003388:	f7ff fa34 	bl	80027f4 <_sbrk>
 800338c:	1c43      	adds	r3, r0, #1
 800338e:	d102      	bne.n	8003396 <_sbrk_r+0x1a>
 8003390:	6823      	ldr	r3, [r4, #0]
 8003392:	b103      	cbz	r3, 8003396 <_sbrk_r+0x1a>
 8003394:	602b      	str	r3, [r5, #0]
 8003396:	bd38      	pop	{r3, r4, r5, pc}
 8003398:	20004290 	.word	0x20004290

0800339c <siprintf>:
 800339c:	b40e      	push	{r1, r2, r3}
 800339e:	b500      	push	{lr}
 80033a0:	b09c      	sub	sp, #112	; 0x70
 80033a2:	ab1d      	add	r3, sp, #116	; 0x74
 80033a4:	9002      	str	r0, [sp, #8]
 80033a6:	9006      	str	r0, [sp, #24]
 80033a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80033ac:	4809      	ldr	r0, [pc, #36]	; (80033d4 <siprintf+0x38>)
 80033ae:	9107      	str	r1, [sp, #28]
 80033b0:	9104      	str	r1, [sp, #16]
 80033b2:	4909      	ldr	r1, [pc, #36]	; (80033d8 <siprintf+0x3c>)
 80033b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80033b8:	9105      	str	r1, [sp, #20]
 80033ba:	6800      	ldr	r0, [r0, #0]
 80033bc:	9301      	str	r3, [sp, #4]
 80033be:	a902      	add	r1, sp, #8
 80033c0:	f000 f868 	bl	8003494 <_svfiprintf_r>
 80033c4:	9b02      	ldr	r3, [sp, #8]
 80033c6:	2200      	movs	r2, #0
 80033c8:	701a      	strb	r2, [r3, #0]
 80033ca:	b01c      	add	sp, #112	; 0x70
 80033cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80033d0:	b003      	add	sp, #12
 80033d2:	4770      	bx	lr
 80033d4:	20000014 	.word	0x20000014
 80033d8:	ffff0208 	.word	0xffff0208

080033dc <__malloc_lock>:
 80033dc:	4770      	bx	lr

080033de <__malloc_unlock>:
 80033de:	4770      	bx	lr

080033e0 <__ssputs_r>:
 80033e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033e4:	688e      	ldr	r6, [r1, #8]
 80033e6:	429e      	cmp	r6, r3
 80033e8:	4682      	mov	sl, r0
 80033ea:	460c      	mov	r4, r1
 80033ec:	4690      	mov	r8, r2
 80033ee:	4699      	mov	r9, r3
 80033f0:	d837      	bhi.n	8003462 <__ssputs_r+0x82>
 80033f2:	898a      	ldrh	r2, [r1, #12]
 80033f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80033f8:	d031      	beq.n	800345e <__ssputs_r+0x7e>
 80033fa:	6825      	ldr	r5, [r4, #0]
 80033fc:	6909      	ldr	r1, [r1, #16]
 80033fe:	1a6f      	subs	r7, r5, r1
 8003400:	6965      	ldr	r5, [r4, #20]
 8003402:	2302      	movs	r3, #2
 8003404:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003408:	fb95 f5f3 	sdiv	r5, r5, r3
 800340c:	f109 0301 	add.w	r3, r9, #1
 8003410:	443b      	add	r3, r7
 8003412:	429d      	cmp	r5, r3
 8003414:	bf38      	it	cc
 8003416:	461d      	movcc	r5, r3
 8003418:	0553      	lsls	r3, r2, #21
 800341a:	d530      	bpl.n	800347e <__ssputs_r+0x9e>
 800341c:	4629      	mov	r1, r5
 800341e:	f7ff ff53 	bl	80032c8 <_malloc_r>
 8003422:	4606      	mov	r6, r0
 8003424:	b950      	cbnz	r0, 800343c <__ssputs_r+0x5c>
 8003426:	230c      	movs	r3, #12
 8003428:	f8ca 3000 	str.w	r3, [sl]
 800342c:	89a3      	ldrh	r3, [r4, #12]
 800342e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003432:	81a3      	strh	r3, [r4, #12]
 8003434:	f04f 30ff 	mov.w	r0, #4294967295
 8003438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800343c:	463a      	mov	r2, r7
 800343e:	6921      	ldr	r1, [r4, #16]
 8003440:	f7ff fee0 	bl	8003204 <memcpy>
 8003444:	89a3      	ldrh	r3, [r4, #12]
 8003446:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800344a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800344e:	81a3      	strh	r3, [r4, #12]
 8003450:	6126      	str	r6, [r4, #16]
 8003452:	6165      	str	r5, [r4, #20]
 8003454:	443e      	add	r6, r7
 8003456:	1bed      	subs	r5, r5, r7
 8003458:	6026      	str	r6, [r4, #0]
 800345a:	60a5      	str	r5, [r4, #8]
 800345c:	464e      	mov	r6, r9
 800345e:	454e      	cmp	r6, r9
 8003460:	d900      	bls.n	8003464 <__ssputs_r+0x84>
 8003462:	464e      	mov	r6, r9
 8003464:	4632      	mov	r2, r6
 8003466:	4641      	mov	r1, r8
 8003468:	6820      	ldr	r0, [r4, #0]
 800346a:	f000 fa93 	bl	8003994 <memmove>
 800346e:	68a3      	ldr	r3, [r4, #8]
 8003470:	1b9b      	subs	r3, r3, r6
 8003472:	60a3      	str	r3, [r4, #8]
 8003474:	6823      	ldr	r3, [r4, #0]
 8003476:	441e      	add	r6, r3
 8003478:	6026      	str	r6, [r4, #0]
 800347a:	2000      	movs	r0, #0
 800347c:	e7dc      	b.n	8003438 <__ssputs_r+0x58>
 800347e:	462a      	mov	r2, r5
 8003480:	f000 faa1 	bl	80039c6 <_realloc_r>
 8003484:	4606      	mov	r6, r0
 8003486:	2800      	cmp	r0, #0
 8003488:	d1e2      	bne.n	8003450 <__ssputs_r+0x70>
 800348a:	6921      	ldr	r1, [r4, #16]
 800348c:	4650      	mov	r0, sl
 800348e:	f7ff fecd 	bl	800322c <_free_r>
 8003492:	e7c8      	b.n	8003426 <__ssputs_r+0x46>

08003494 <_svfiprintf_r>:
 8003494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003498:	461d      	mov	r5, r3
 800349a:	898b      	ldrh	r3, [r1, #12]
 800349c:	061f      	lsls	r7, r3, #24
 800349e:	b09d      	sub	sp, #116	; 0x74
 80034a0:	4680      	mov	r8, r0
 80034a2:	460c      	mov	r4, r1
 80034a4:	4616      	mov	r6, r2
 80034a6:	d50f      	bpl.n	80034c8 <_svfiprintf_r+0x34>
 80034a8:	690b      	ldr	r3, [r1, #16]
 80034aa:	b96b      	cbnz	r3, 80034c8 <_svfiprintf_r+0x34>
 80034ac:	2140      	movs	r1, #64	; 0x40
 80034ae:	f7ff ff0b 	bl	80032c8 <_malloc_r>
 80034b2:	6020      	str	r0, [r4, #0]
 80034b4:	6120      	str	r0, [r4, #16]
 80034b6:	b928      	cbnz	r0, 80034c4 <_svfiprintf_r+0x30>
 80034b8:	230c      	movs	r3, #12
 80034ba:	f8c8 3000 	str.w	r3, [r8]
 80034be:	f04f 30ff 	mov.w	r0, #4294967295
 80034c2:	e0c8      	b.n	8003656 <_svfiprintf_r+0x1c2>
 80034c4:	2340      	movs	r3, #64	; 0x40
 80034c6:	6163      	str	r3, [r4, #20]
 80034c8:	2300      	movs	r3, #0
 80034ca:	9309      	str	r3, [sp, #36]	; 0x24
 80034cc:	2320      	movs	r3, #32
 80034ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80034d2:	2330      	movs	r3, #48	; 0x30
 80034d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80034d8:	9503      	str	r5, [sp, #12]
 80034da:	f04f 0b01 	mov.w	fp, #1
 80034de:	4637      	mov	r7, r6
 80034e0:	463d      	mov	r5, r7
 80034e2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80034e6:	b10b      	cbz	r3, 80034ec <_svfiprintf_r+0x58>
 80034e8:	2b25      	cmp	r3, #37	; 0x25
 80034ea:	d13e      	bne.n	800356a <_svfiprintf_r+0xd6>
 80034ec:	ebb7 0a06 	subs.w	sl, r7, r6
 80034f0:	d00b      	beq.n	800350a <_svfiprintf_r+0x76>
 80034f2:	4653      	mov	r3, sl
 80034f4:	4632      	mov	r2, r6
 80034f6:	4621      	mov	r1, r4
 80034f8:	4640      	mov	r0, r8
 80034fa:	f7ff ff71 	bl	80033e0 <__ssputs_r>
 80034fe:	3001      	adds	r0, #1
 8003500:	f000 80a4 	beq.w	800364c <_svfiprintf_r+0x1b8>
 8003504:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003506:	4453      	add	r3, sl
 8003508:	9309      	str	r3, [sp, #36]	; 0x24
 800350a:	783b      	ldrb	r3, [r7, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	f000 809d 	beq.w	800364c <_svfiprintf_r+0x1b8>
 8003512:	2300      	movs	r3, #0
 8003514:	f04f 32ff 	mov.w	r2, #4294967295
 8003518:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800351c:	9304      	str	r3, [sp, #16]
 800351e:	9307      	str	r3, [sp, #28]
 8003520:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003524:	931a      	str	r3, [sp, #104]	; 0x68
 8003526:	462f      	mov	r7, r5
 8003528:	2205      	movs	r2, #5
 800352a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800352e:	4850      	ldr	r0, [pc, #320]	; (8003670 <_svfiprintf_r+0x1dc>)
 8003530:	f7fc fe76 	bl	8000220 <memchr>
 8003534:	9b04      	ldr	r3, [sp, #16]
 8003536:	b9d0      	cbnz	r0, 800356e <_svfiprintf_r+0xda>
 8003538:	06d9      	lsls	r1, r3, #27
 800353a:	bf44      	itt	mi
 800353c:	2220      	movmi	r2, #32
 800353e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003542:	071a      	lsls	r2, r3, #28
 8003544:	bf44      	itt	mi
 8003546:	222b      	movmi	r2, #43	; 0x2b
 8003548:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800354c:	782a      	ldrb	r2, [r5, #0]
 800354e:	2a2a      	cmp	r2, #42	; 0x2a
 8003550:	d015      	beq.n	800357e <_svfiprintf_r+0xea>
 8003552:	9a07      	ldr	r2, [sp, #28]
 8003554:	462f      	mov	r7, r5
 8003556:	2000      	movs	r0, #0
 8003558:	250a      	movs	r5, #10
 800355a:	4639      	mov	r1, r7
 800355c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003560:	3b30      	subs	r3, #48	; 0x30
 8003562:	2b09      	cmp	r3, #9
 8003564:	d94d      	bls.n	8003602 <_svfiprintf_r+0x16e>
 8003566:	b1b8      	cbz	r0, 8003598 <_svfiprintf_r+0x104>
 8003568:	e00f      	b.n	800358a <_svfiprintf_r+0xf6>
 800356a:	462f      	mov	r7, r5
 800356c:	e7b8      	b.n	80034e0 <_svfiprintf_r+0x4c>
 800356e:	4a40      	ldr	r2, [pc, #256]	; (8003670 <_svfiprintf_r+0x1dc>)
 8003570:	1a80      	subs	r0, r0, r2
 8003572:	fa0b f000 	lsl.w	r0, fp, r0
 8003576:	4318      	orrs	r0, r3
 8003578:	9004      	str	r0, [sp, #16]
 800357a:	463d      	mov	r5, r7
 800357c:	e7d3      	b.n	8003526 <_svfiprintf_r+0x92>
 800357e:	9a03      	ldr	r2, [sp, #12]
 8003580:	1d11      	adds	r1, r2, #4
 8003582:	6812      	ldr	r2, [r2, #0]
 8003584:	9103      	str	r1, [sp, #12]
 8003586:	2a00      	cmp	r2, #0
 8003588:	db01      	blt.n	800358e <_svfiprintf_r+0xfa>
 800358a:	9207      	str	r2, [sp, #28]
 800358c:	e004      	b.n	8003598 <_svfiprintf_r+0x104>
 800358e:	4252      	negs	r2, r2
 8003590:	f043 0302 	orr.w	r3, r3, #2
 8003594:	9207      	str	r2, [sp, #28]
 8003596:	9304      	str	r3, [sp, #16]
 8003598:	783b      	ldrb	r3, [r7, #0]
 800359a:	2b2e      	cmp	r3, #46	; 0x2e
 800359c:	d10c      	bne.n	80035b8 <_svfiprintf_r+0x124>
 800359e:	787b      	ldrb	r3, [r7, #1]
 80035a0:	2b2a      	cmp	r3, #42	; 0x2a
 80035a2:	d133      	bne.n	800360c <_svfiprintf_r+0x178>
 80035a4:	9b03      	ldr	r3, [sp, #12]
 80035a6:	1d1a      	adds	r2, r3, #4
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	9203      	str	r2, [sp, #12]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	bfb8      	it	lt
 80035b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80035b4:	3702      	adds	r7, #2
 80035b6:	9305      	str	r3, [sp, #20]
 80035b8:	4d2e      	ldr	r5, [pc, #184]	; (8003674 <_svfiprintf_r+0x1e0>)
 80035ba:	7839      	ldrb	r1, [r7, #0]
 80035bc:	2203      	movs	r2, #3
 80035be:	4628      	mov	r0, r5
 80035c0:	f7fc fe2e 	bl	8000220 <memchr>
 80035c4:	b138      	cbz	r0, 80035d6 <_svfiprintf_r+0x142>
 80035c6:	2340      	movs	r3, #64	; 0x40
 80035c8:	1b40      	subs	r0, r0, r5
 80035ca:	fa03 f000 	lsl.w	r0, r3, r0
 80035ce:	9b04      	ldr	r3, [sp, #16]
 80035d0:	4303      	orrs	r3, r0
 80035d2:	3701      	adds	r7, #1
 80035d4:	9304      	str	r3, [sp, #16]
 80035d6:	7839      	ldrb	r1, [r7, #0]
 80035d8:	4827      	ldr	r0, [pc, #156]	; (8003678 <_svfiprintf_r+0x1e4>)
 80035da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80035de:	2206      	movs	r2, #6
 80035e0:	1c7e      	adds	r6, r7, #1
 80035e2:	f7fc fe1d 	bl	8000220 <memchr>
 80035e6:	2800      	cmp	r0, #0
 80035e8:	d038      	beq.n	800365c <_svfiprintf_r+0x1c8>
 80035ea:	4b24      	ldr	r3, [pc, #144]	; (800367c <_svfiprintf_r+0x1e8>)
 80035ec:	bb13      	cbnz	r3, 8003634 <_svfiprintf_r+0x1a0>
 80035ee:	9b03      	ldr	r3, [sp, #12]
 80035f0:	3307      	adds	r3, #7
 80035f2:	f023 0307 	bic.w	r3, r3, #7
 80035f6:	3308      	adds	r3, #8
 80035f8:	9303      	str	r3, [sp, #12]
 80035fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035fc:	444b      	add	r3, r9
 80035fe:	9309      	str	r3, [sp, #36]	; 0x24
 8003600:	e76d      	b.n	80034de <_svfiprintf_r+0x4a>
 8003602:	fb05 3202 	mla	r2, r5, r2, r3
 8003606:	2001      	movs	r0, #1
 8003608:	460f      	mov	r7, r1
 800360a:	e7a6      	b.n	800355a <_svfiprintf_r+0xc6>
 800360c:	2300      	movs	r3, #0
 800360e:	3701      	adds	r7, #1
 8003610:	9305      	str	r3, [sp, #20]
 8003612:	4619      	mov	r1, r3
 8003614:	250a      	movs	r5, #10
 8003616:	4638      	mov	r0, r7
 8003618:	f810 2b01 	ldrb.w	r2, [r0], #1
 800361c:	3a30      	subs	r2, #48	; 0x30
 800361e:	2a09      	cmp	r2, #9
 8003620:	d903      	bls.n	800362a <_svfiprintf_r+0x196>
 8003622:	2b00      	cmp	r3, #0
 8003624:	d0c8      	beq.n	80035b8 <_svfiprintf_r+0x124>
 8003626:	9105      	str	r1, [sp, #20]
 8003628:	e7c6      	b.n	80035b8 <_svfiprintf_r+0x124>
 800362a:	fb05 2101 	mla	r1, r5, r1, r2
 800362e:	2301      	movs	r3, #1
 8003630:	4607      	mov	r7, r0
 8003632:	e7f0      	b.n	8003616 <_svfiprintf_r+0x182>
 8003634:	ab03      	add	r3, sp, #12
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	4622      	mov	r2, r4
 800363a:	4b11      	ldr	r3, [pc, #68]	; (8003680 <_svfiprintf_r+0x1ec>)
 800363c:	a904      	add	r1, sp, #16
 800363e:	4640      	mov	r0, r8
 8003640:	f3af 8000 	nop.w
 8003644:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003648:	4681      	mov	r9, r0
 800364a:	d1d6      	bne.n	80035fa <_svfiprintf_r+0x166>
 800364c:	89a3      	ldrh	r3, [r4, #12]
 800364e:	065b      	lsls	r3, r3, #25
 8003650:	f53f af35 	bmi.w	80034be <_svfiprintf_r+0x2a>
 8003654:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003656:	b01d      	add	sp, #116	; 0x74
 8003658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800365c:	ab03      	add	r3, sp, #12
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	4622      	mov	r2, r4
 8003662:	4b07      	ldr	r3, [pc, #28]	; (8003680 <_svfiprintf_r+0x1ec>)
 8003664:	a904      	add	r1, sp, #16
 8003666:	4640      	mov	r0, r8
 8003668:	f000 f882 	bl	8003770 <_printf_i>
 800366c:	e7ea      	b.n	8003644 <_svfiprintf_r+0x1b0>
 800366e:	bf00      	nop
 8003670:	08003a8c 	.word	0x08003a8c
 8003674:	08003a92 	.word	0x08003a92
 8003678:	08003a96 	.word	0x08003a96
 800367c:	00000000 	.word	0x00000000
 8003680:	080033e1 	.word	0x080033e1

08003684 <_printf_common>:
 8003684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003688:	4691      	mov	r9, r2
 800368a:	461f      	mov	r7, r3
 800368c:	688a      	ldr	r2, [r1, #8]
 800368e:	690b      	ldr	r3, [r1, #16]
 8003690:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003694:	4293      	cmp	r3, r2
 8003696:	bfb8      	it	lt
 8003698:	4613      	movlt	r3, r2
 800369a:	f8c9 3000 	str.w	r3, [r9]
 800369e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80036a2:	4606      	mov	r6, r0
 80036a4:	460c      	mov	r4, r1
 80036a6:	b112      	cbz	r2, 80036ae <_printf_common+0x2a>
 80036a8:	3301      	adds	r3, #1
 80036aa:	f8c9 3000 	str.w	r3, [r9]
 80036ae:	6823      	ldr	r3, [r4, #0]
 80036b0:	0699      	lsls	r1, r3, #26
 80036b2:	bf42      	ittt	mi
 80036b4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80036b8:	3302      	addmi	r3, #2
 80036ba:	f8c9 3000 	strmi.w	r3, [r9]
 80036be:	6825      	ldr	r5, [r4, #0]
 80036c0:	f015 0506 	ands.w	r5, r5, #6
 80036c4:	d107      	bne.n	80036d6 <_printf_common+0x52>
 80036c6:	f104 0a19 	add.w	sl, r4, #25
 80036ca:	68e3      	ldr	r3, [r4, #12]
 80036cc:	f8d9 2000 	ldr.w	r2, [r9]
 80036d0:	1a9b      	subs	r3, r3, r2
 80036d2:	42ab      	cmp	r3, r5
 80036d4:	dc28      	bgt.n	8003728 <_printf_common+0xa4>
 80036d6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80036da:	6822      	ldr	r2, [r4, #0]
 80036dc:	3300      	adds	r3, #0
 80036de:	bf18      	it	ne
 80036e0:	2301      	movne	r3, #1
 80036e2:	0692      	lsls	r2, r2, #26
 80036e4:	d42d      	bmi.n	8003742 <_printf_common+0xbe>
 80036e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036ea:	4639      	mov	r1, r7
 80036ec:	4630      	mov	r0, r6
 80036ee:	47c0      	blx	r8
 80036f0:	3001      	adds	r0, #1
 80036f2:	d020      	beq.n	8003736 <_printf_common+0xb2>
 80036f4:	6823      	ldr	r3, [r4, #0]
 80036f6:	68e5      	ldr	r5, [r4, #12]
 80036f8:	f8d9 2000 	ldr.w	r2, [r9]
 80036fc:	f003 0306 	and.w	r3, r3, #6
 8003700:	2b04      	cmp	r3, #4
 8003702:	bf08      	it	eq
 8003704:	1aad      	subeq	r5, r5, r2
 8003706:	68a3      	ldr	r3, [r4, #8]
 8003708:	6922      	ldr	r2, [r4, #16]
 800370a:	bf0c      	ite	eq
 800370c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003710:	2500      	movne	r5, #0
 8003712:	4293      	cmp	r3, r2
 8003714:	bfc4      	itt	gt
 8003716:	1a9b      	subgt	r3, r3, r2
 8003718:	18ed      	addgt	r5, r5, r3
 800371a:	f04f 0900 	mov.w	r9, #0
 800371e:	341a      	adds	r4, #26
 8003720:	454d      	cmp	r5, r9
 8003722:	d11a      	bne.n	800375a <_printf_common+0xd6>
 8003724:	2000      	movs	r0, #0
 8003726:	e008      	b.n	800373a <_printf_common+0xb6>
 8003728:	2301      	movs	r3, #1
 800372a:	4652      	mov	r2, sl
 800372c:	4639      	mov	r1, r7
 800372e:	4630      	mov	r0, r6
 8003730:	47c0      	blx	r8
 8003732:	3001      	adds	r0, #1
 8003734:	d103      	bne.n	800373e <_printf_common+0xba>
 8003736:	f04f 30ff 	mov.w	r0, #4294967295
 800373a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800373e:	3501      	adds	r5, #1
 8003740:	e7c3      	b.n	80036ca <_printf_common+0x46>
 8003742:	18e1      	adds	r1, r4, r3
 8003744:	1c5a      	adds	r2, r3, #1
 8003746:	2030      	movs	r0, #48	; 0x30
 8003748:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800374c:	4422      	add	r2, r4
 800374e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003752:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003756:	3302      	adds	r3, #2
 8003758:	e7c5      	b.n	80036e6 <_printf_common+0x62>
 800375a:	2301      	movs	r3, #1
 800375c:	4622      	mov	r2, r4
 800375e:	4639      	mov	r1, r7
 8003760:	4630      	mov	r0, r6
 8003762:	47c0      	blx	r8
 8003764:	3001      	adds	r0, #1
 8003766:	d0e6      	beq.n	8003736 <_printf_common+0xb2>
 8003768:	f109 0901 	add.w	r9, r9, #1
 800376c:	e7d8      	b.n	8003720 <_printf_common+0x9c>
	...

08003770 <_printf_i>:
 8003770:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003774:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003778:	460c      	mov	r4, r1
 800377a:	7e09      	ldrb	r1, [r1, #24]
 800377c:	b085      	sub	sp, #20
 800377e:	296e      	cmp	r1, #110	; 0x6e
 8003780:	4617      	mov	r7, r2
 8003782:	4606      	mov	r6, r0
 8003784:	4698      	mov	r8, r3
 8003786:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003788:	f000 80b3 	beq.w	80038f2 <_printf_i+0x182>
 800378c:	d822      	bhi.n	80037d4 <_printf_i+0x64>
 800378e:	2963      	cmp	r1, #99	; 0x63
 8003790:	d036      	beq.n	8003800 <_printf_i+0x90>
 8003792:	d80a      	bhi.n	80037aa <_printf_i+0x3a>
 8003794:	2900      	cmp	r1, #0
 8003796:	f000 80b9 	beq.w	800390c <_printf_i+0x19c>
 800379a:	2958      	cmp	r1, #88	; 0x58
 800379c:	f000 8083 	beq.w	80038a6 <_printf_i+0x136>
 80037a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037a4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80037a8:	e032      	b.n	8003810 <_printf_i+0xa0>
 80037aa:	2964      	cmp	r1, #100	; 0x64
 80037ac:	d001      	beq.n	80037b2 <_printf_i+0x42>
 80037ae:	2969      	cmp	r1, #105	; 0x69
 80037b0:	d1f6      	bne.n	80037a0 <_printf_i+0x30>
 80037b2:	6820      	ldr	r0, [r4, #0]
 80037b4:	6813      	ldr	r3, [r2, #0]
 80037b6:	0605      	lsls	r5, r0, #24
 80037b8:	f103 0104 	add.w	r1, r3, #4
 80037bc:	d52a      	bpl.n	8003814 <_printf_i+0xa4>
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6011      	str	r1, [r2, #0]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	da03      	bge.n	80037ce <_printf_i+0x5e>
 80037c6:	222d      	movs	r2, #45	; 0x2d
 80037c8:	425b      	negs	r3, r3
 80037ca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80037ce:	486f      	ldr	r0, [pc, #444]	; (800398c <_printf_i+0x21c>)
 80037d0:	220a      	movs	r2, #10
 80037d2:	e039      	b.n	8003848 <_printf_i+0xd8>
 80037d4:	2973      	cmp	r1, #115	; 0x73
 80037d6:	f000 809d 	beq.w	8003914 <_printf_i+0x1a4>
 80037da:	d808      	bhi.n	80037ee <_printf_i+0x7e>
 80037dc:	296f      	cmp	r1, #111	; 0x6f
 80037de:	d020      	beq.n	8003822 <_printf_i+0xb2>
 80037e0:	2970      	cmp	r1, #112	; 0x70
 80037e2:	d1dd      	bne.n	80037a0 <_printf_i+0x30>
 80037e4:	6823      	ldr	r3, [r4, #0]
 80037e6:	f043 0320 	orr.w	r3, r3, #32
 80037ea:	6023      	str	r3, [r4, #0]
 80037ec:	e003      	b.n	80037f6 <_printf_i+0x86>
 80037ee:	2975      	cmp	r1, #117	; 0x75
 80037f0:	d017      	beq.n	8003822 <_printf_i+0xb2>
 80037f2:	2978      	cmp	r1, #120	; 0x78
 80037f4:	d1d4      	bne.n	80037a0 <_printf_i+0x30>
 80037f6:	2378      	movs	r3, #120	; 0x78
 80037f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80037fc:	4864      	ldr	r0, [pc, #400]	; (8003990 <_printf_i+0x220>)
 80037fe:	e055      	b.n	80038ac <_printf_i+0x13c>
 8003800:	6813      	ldr	r3, [r2, #0]
 8003802:	1d19      	adds	r1, r3, #4
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6011      	str	r1, [r2, #0]
 8003808:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800380c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003810:	2301      	movs	r3, #1
 8003812:	e08c      	b.n	800392e <_printf_i+0x1be>
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6011      	str	r1, [r2, #0]
 8003818:	f010 0f40 	tst.w	r0, #64	; 0x40
 800381c:	bf18      	it	ne
 800381e:	b21b      	sxthne	r3, r3
 8003820:	e7cf      	b.n	80037c2 <_printf_i+0x52>
 8003822:	6813      	ldr	r3, [r2, #0]
 8003824:	6825      	ldr	r5, [r4, #0]
 8003826:	1d18      	adds	r0, r3, #4
 8003828:	6010      	str	r0, [r2, #0]
 800382a:	0628      	lsls	r0, r5, #24
 800382c:	d501      	bpl.n	8003832 <_printf_i+0xc2>
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	e002      	b.n	8003838 <_printf_i+0xc8>
 8003832:	0668      	lsls	r0, r5, #25
 8003834:	d5fb      	bpl.n	800382e <_printf_i+0xbe>
 8003836:	881b      	ldrh	r3, [r3, #0]
 8003838:	4854      	ldr	r0, [pc, #336]	; (800398c <_printf_i+0x21c>)
 800383a:	296f      	cmp	r1, #111	; 0x6f
 800383c:	bf14      	ite	ne
 800383e:	220a      	movne	r2, #10
 8003840:	2208      	moveq	r2, #8
 8003842:	2100      	movs	r1, #0
 8003844:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003848:	6865      	ldr	r5, [r4, #4]
 800384a:	60a5      	str	r5, [r4, #8]
 800384c:	2d00      	cmp	r5, #0
 800384e:	f2c0 8095 	blt.w	800397c <_printf_i+0x20c>
 8003852:	6821      	ldr	r1, [r4, #0]
 8003854:	f021 0104 	bic.w	r1, r1, #4
 8003858:	6021      	str	r1, [r4, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d13d      	bne.n	80038da <_printf_i+0x16a>
 800385e:	2d00      	cmp	r5, #0
 8003860:	f040 808e 	bne.w	8003980 <_printf_i+0x210>
 8003864:	4665      	mov	r5, ip
 8003866:	2a08      	cmp	r2, #8
 8003868:	d10b      	bne.n	8003882 <_printf_i+0x112>
 800386a:	6823      	ldr	r3, [r4, #0]
 800386c:	07db      	lsls	r3, r3, #31
 800386e:	d508      	bpl.n	8003882 <_printf_i+0x112>
 8003870:	6923      	ldr	r3, [r4, #16]
 8003872:	6862      	ldr	r2, [r4, #4]
 8003874:	429a      	cmp	r2, r3
 8003876:	bfde      	ittt	le
 8003878:	2330      	movle	r3, #48	; 0x30
 800387a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800387e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003882:	ebac 0305 	sub.w	r3, ip, r5
 8003886:	6123      	str	r3, [r4, #16]
 8003888:	f8cd 8000 	str.w	r8, [sp]
 800388c:	463b      	mov	r3, r7
 800388e:	aa03      	add	r2, sp, #12
 8003890:	4621      	mov	r1, r4
 8003892:	4630      	mov	r0, r6
 8003894:	f7ff fef6 	bl	8003684 <_printf_common>
 8003898:	3001      	adds	r0, #1
 800389a:	d14d      	bne.n	8003938 <_printf_i+0x1c8>
 800389c:	f04f 30ff 	mov.w	r0, #4294967295
 80038a0:	b005      	add	sp, #20
 80038a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80038a6:	4839      	ldr	r0, [pc, #228]	; (800398c <_printf_i+0x21c>)
 80038a8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80038ac:	6813      	ldr	r3, [r2, #0]
 80038ae:	6821      	ldr	r1, [r4, #0]
 80038b0:	1d1d      	adds	r5, r3, #4
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6015      	str	r5, [r2, #0]
 80038b6:	060a      	lsls	r2, r1, #24
 80038b8:	d50b      	bpl.n	80038d2 <_printf_i+0x162>
 80038ba:	07ca      	lsls	r2, r1, #31
 80038bc:	bf44      	itt	mi
 80038be:	f041 0120 	orrmi.w	r1, r1, #32
 80038c2:	6021      	strmi	r1, [r4, #0]
 80038c4:	b91b      	cbnz	r3, 80038ce <_printf_i+0x15e>
 80038c6:	6822      	ldr	r2, [r4, #0]
 80038c8:	f022 0220 	bic.w	r2, r2, #32
 80038cc:	6022      	str	r2, [r4, #0]
 80038ce:	2210      	movs	r2, #16
 80038d0:	e7b7      	b.n	8003842 <_printf_i+0xd2>
 80038d2:	064d      	lsls	r5, r1, #25
 80038d4:	bf48      	it	mi
 80038d6:	b29b      	uxthmi	r3, r3
 80038d8:	e7ef      	b.n	80038ba <_printf_i+0x14a>
 80038da:	4665      	mov	r5, ip
 80038dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80038e0:	fb02 3311 	mls	r3, r2, r1, r3
 80038e4:	5cc3      	ldrb	r3, [r0, r3]
 80038e6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80038ea:	460b      	mov	r3, r1
 80038ec:	2900      	cmp	r1, #0
 80038ee:	d1f5      	bne.n	80038dc <_printf_i+0x16c>
 80038f0:	e7b9      	b.n	8003866 <_printf_i+0xf6>
 80038f2:	6813      	ldr	r3, [r2, #0]
 80038f4:	6825      	ldr	r5, [r4, #0]
 80038f6:	6961      	ldr	r1, [r4, #20]
 80038f8:	1d18      	adds	r0, r3, #4
 80038fa:	6010      	str	r0, [r2, #0]
 80038fc:	0628      	lsls	r0, r5, #24
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	d501      	bpl.n	8003906 <_printf_i+0x196>
 8003902:	6019      	str	r1, [r3, #0]
 8003904:	e002      	b.n	800390c <_printf_i+0x19c>
 8003906:	066a      	lsls	r2, r5, #25
 8003908:	d5fb      	bpl.n	8003902 <_printf_i+0x192>
 800390a:	8019      	strh	r1, [r3, #0]
 800390c:	2300      	movs	r3, #0
 800390e:	6123      	str	r3, [r4, #16]
 8003910:	4665      	mov	r5, ip
 8003912:	e7b9      	b.n	8003888 <_printf_i+0x118>
 8003914:	6813      	ldr	r3, [r2, #0]
 8003916:	1d19      	adds	r1, r3, #4
 8003918:	6011      	str	r1, [r2, #0]
 800391a:	681d      	ldr	r5, [r3, #0]
 800391c:	6862      	ldr	r2, [r4, #4]
 800391e:	2100      	movs	r1, #0
 8003920:	4628      	mov	r0, r5
 8003922:	f7fc fc7d 	bl	8000220 <memchr>
 8003926:	b108      	cbz	r0, 800392c <_printf_i+0x1bc>
 8003928:	1b40      	subs	r0, r0, r5
 800392a:	6060      	str	r0, [r4, #4]
 800392c:	6863      	ldr	r3, [r4, #4]
 800392e:	6123      	str	r3, [r4, #16]
 8003930:	2300      	movs	r3, #0
 8003932:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003936:	e7a7      	b.n	8003888 <_printf_i+0x118>
 8003938:	6923      	ldr	r3, [r4, #16]
 800393a:	462a      	mov	r2, r5
 800393c:	4639      	mov	r1, r7
 800393e:	4630      	mov	r0, r6
 8003940:	47c0      	blx	r8
 8003942:	3001      	adds	r0, #1
 8003944:	d0aa      	beq.n	800389c <_printf_i+0x12c>
 8003946:	6823      	ldr	r3, [r4, #0]
 8003948:	079b      	lsls	r3, r3, #30
 800394a:	d413      	bmi.n	8003974 <_printf_i+0x204>
 800394c:	68e0      	ldr	r0, [r4, #12]
 800394e:	9b03      	ldr	r3, [sp, #12]
 8003950:	4298      	cmp	r0, r3
 8003952:	bfb8      	it	lt
 8003954:	4618      	movlt	r0, r3
 8003956:	e7a3      	b.n	80038a0 <_printf_i+0x130>
 8003958:	2301      	movs	r3, #1
 800395a:	464a      	mov	r2, r9
 800395c:	4639      	mov	r1, r7
 800395e:	4630      	mov	r0, r6
 8003960:	47c0      	blx	r8
 8003962:	3001      	adds	r0, #1
 8003964:	d09a      	beq.n	800389c <_printf_i+0x12c>
 8003966:	3501      	adds	r5, #1
 8003968:	68e3      	ldr	r3, [r4, #12]
 800396a:	9a03      	ldr	r2, [sp, #12]
 800396c:	1a9b      	subs	r3, r3, r2
 800396e:	42ab      	cmp	r3, r5
 8003970:	dcf2      	bgt.n	8003958 <_printf_i+0x1e8>
 8003972:	e7eb      	b.n	800394c <_printf_i+0x1dc>
 8003974:	2500      	movs	r5, #0
 8003976:	f104 0919 	add.w	r9, r4, #25
 800397a:	e7f5      	b.n	8003968 <_printf_i+0x1f8>
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1ac      	bne.n	80038da <_printf_i+0x16a>
 8003980:	7803      	ldrb	r3, [r0, #0]
 8003982:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003986:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800398a:	e76c      	b.n	8003866 <_printf_i+0xf6>
 800398c:	08003a9d 	.word	0x08003a9d
 8003990:	08003aae 	.word	0x08003aae

08003994 <memmove>:
 8003994:	4288      	cmp	r0, r1
 8003996:	b510      	push	{r4, lr}
 8003998:	eb01 0302 	add.w	r3, r1, r2
 800399c:	d807      	bhi.n	80039ae <memmove+0x1a>
 800399e:	1e42      	subs	r2, r0, #1
 80039a0:	4299      	cmp	r1, r3
 80039a2:	d00a      	beq.n	80039ba <memmove+0x26>
 80039a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039a8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80039ac:	e7f8      	b.n	80039a0 <memmove+0xc>
 80039ae:	4283      	cmp	r3, r0
 80039b0:	d9f5      	bls.n	800399e <memmove+0xa>
 80039b2:	1881      	adds	r1, r0, r2
 80039b4:	1ad2      	subs	r2, r2, r3
 80039b6:	42d3      	cmn	r3, r2
 80039b8:	d100      	bne.n	80039bc <memmove+0x28>
 80039ba:	bd10      	pop	{r4, pc}
 80039bc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80039c0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80039c4:	e7f7      	b.n	80039b6 <memmove+0x22>

080039c6 <_realloc_r>:
 80039c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039c8:	4607      	mov	r7, r0
 80039ca:	4614      	mov	r4, r2
 80039cc:	460e      	mov	r6, r1
 80039ce:	b921      	cbnz	r1, 80039da <_realloc_r+0x14>
 80039d0:	4611      	mov	r1, r2
 80039d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80039d6:	f7ff bc77 	b.w	80032c8 <_malloc_r>
 80039da:	b922      	cbnz	r2, 80039e6 <_realloc_r+0x20>
 80039dc:	f7ff fc26 	bl	800322c <_free_r>
 80039e0:	4625      	mov	r5, r4
 80039e2:	4628      	mov	r0, r5
 80039e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039e6:	f000 f814 	bl	8003a12 <_malloc_usable_size_r>
 80039ea:	42a0      	cmp	r0, r4
 80039ec:	d20f      	bcs.n	8003a0e <_realloc_r+0x48>
 80039ee:	4621      	mov	r1, r4
 80039f0:	4638      	mov	r0, r7
 80039f2:	f7ff fc69 	bl	80032c8 <_malloc_r>
 80039f6:	4605      	mov	r5, r0
 80039f8:	2800      	cmp	r0, #0
 80039fa:	d0f2      	beq.n	80039e2 <_realloc_r+0x1c>
 80039fc:	4631      	mov	r1, r6
 80039fe:	4622      	mov	r2, r4
 8003a00:	f7ff fc00 	bl	8003204 <memcpy>
 8003a04:	4631      	mov	r1, r6
 8003a06:	4638      	mov	r0, r7
 8003a08:	f7ff fc10 	bl	800322c <_free_r>
 8003a0c:	e7e9      	b.n	80039e2 <_realloc_r+0x1c>
 8003a0e:	4635      	mov	r5, r6
 8003a10:	e7e7      	b.n	80039e2 <_realloc_r+0x1c>

08003a12 <_malloc_usable_size_r>:
 8003a12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a16:	1f18      	subs	r0, r3, #4
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	bfbc      	itt	lt
 8003a1c:	580b      	ldrlt	r3, [r1, r0]
 8003a1e:	18c0      	addlt	r0, r0, r3
 8003a20:	4770      	bx	lr
	...

08003a24 <_init>:
 8003a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a26:	bf00      	nop
 8003a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a2a:	bc08      	pop	{r3}
 8003a2c:	469e      	mov	lr, r3
 8003a2e:	4770      	bx	lr

08003a30 <_fini>:
 8003a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a32:	bf00      	nop
 8003a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a36:	bc08      	pop	{r3}
 8003a38:	469e      	mov	lr, r3
 8003a3a:	4770      	bx	lr
