
Temp1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e7c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  0800504c  0800504c  0001504c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005150  08005150  00015150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005158  08005158  00015158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800515c  0800515c  0001515c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  20000000  08005160  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000041d0  20000078  080051d8  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20004248  080051d8  00024248  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f622  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004aee  00000000  00000000  0003f6ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000c720  00000000  00000000  000441b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001360  00000000  00000000  000508d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001730  00000000  00000000  00051c38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00025a0f  00000000  00000000  00053368  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00012389  00000000  00000000  00078d77  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000deb17  00000000  00000000  0008b100  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      000000f7  00000000  00000000  00169c17  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00004040  00000000  00000000  00169d10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005034 	.word	0x08005034

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08005034 	.word	0x08005034

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005b0:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005b2:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <HAL_Init+0x30>)
 80005b4:	681a      	ldr	r2, [r3, #0]
 80005b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005ba:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005bc:	681a      	ldr	r2, [r3, #0]
 80005be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005c2:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005c4:	681a      	ldr	r2, [r3, #0]
 80005c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005ca:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005cc:	2003      	movs	r0, #3
 80005ce:	f000 f809 	bl	80005e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005d2:	2000      	movs	r0, #0
 80005d4:	f002 fefc 	bl	80033d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005d8:	f002 fe38 	bl	800324c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80005dc:	2000      	movs	r0, #0
 80005de:	bd08      	pop	{r3, pc}
 80005e0:	40023c00 	.word	0x40023c00

080005e4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005e4:	4a07      	ldr	r2, [pc, #28]	; (8000604 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005e6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005e8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005ec:	041b      	lsls	r3, r3, #16
 80005ee:	0c1b      	lsrs	r3, r3, #16
 80005f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005f4:	0200      	lsls	r0, r0, #8
 80005f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005fa:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005fe:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000600:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000602:	4770      	bx	lr
 8000604:	e000ed00 	.word	0xe000ed00

08000608 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000608:	4b17      	ldr	r3, [pc, #92]	; (8000668 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800060a:	b570      	push	{r4, r5, r6, lr}
 800060c:	68dc      	ldr	r4, [r3, #12]
 800060e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000612:	f1c4 0507 	rsb	r5, r4, #7
 8000616:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000618:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800061c:	bf28      	it	cs
 800061e:	2504      	movcs	r5, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000620:	f04f 36ff 	mov.w	r6, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000624:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000626:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800062a:	bf8c      	ite	hi
 800062c:	3c03      	subhi	r4, #3
 800062e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000630:	ea21 0303 	bic.w	r3, r1, r3
 8000634:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000636:	fa06 f404 	lsl.w	r4, r6, r4
 800063a:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 800063e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000640:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000644:	bfa8      	it	ge
 8000646:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 800064a:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800064e:	bfbc      	itt	lt
 8000650:	f000 000f 	andlt.w	r0, r0, #15
 8000654:	4a05      	ldrlt	r2, [pc, #20]	; (800066c <HAL_NVIC_SetPriority+0x64>)
 8000656:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000658:	bfaa      	itet	ge
 800065a:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065e:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000660:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000664:	bd70      	pop	{r4, r5, r6, pc}
 8000666:	bf00      	nop
 8000668:	e000ed00 	.word	0xe000ed00
 800066c:	e000ed14 	.word	0xe000ed14

08000670 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000670:	2800      	cmp	r0, #0
 8000672:	db08      	blt.n	8000686 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000674:	0942      	lsrs	r2, r0, #5
 8000676:	2301      	movs	r3, #1
 8000678:	f000 001f 	and.w	r0, r0, #31
 800067c:	fa03 f000 	lsl.w	r0, r3, r0
 8000680:	4b01      	ldr	r3, [pc, #4]	; (8000688 <HAL_NVIC_EnableIRQ+0x18>)
 8000682:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000686:	4770      	bx	lr
 8000688:	e000e100 	.word	0xe000e100

0800068c <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800068c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000690:	2b02      	cmp	r3, #2
 8000692:	d003      	beq.n	800069c <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000694:	2380      	movs	r3, #128	; 0x80
 8000696:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000698:	2001      	movs	r0, #1
 800069a:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800069c:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800069e:	2305      	movs	r3, #5
 80006a0:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80006a4:	6813      	ldr	r3, [r2, #0]
 80006a6:	f023 0301 	bic.w	r3, r3, #1
 80006aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80006ac:	2000      	movs	r0, #0
}
 80006ae:	4770      	bx	lr

080006b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006b4:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006b6:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006b8:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800085c <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006bc:	4a65      	ldr	r2, [pc, #404]	; (8000854 <HAL_GPIO_Init+0x1a4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006be:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8000860 <HAL_GPIO_Init+0x1b0>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006c2:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80006c4:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80006c6:	f04f 0c01 	mov.w	ip, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006ca:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 80006cc:	fa0c fc03 	lsl.w	ip, ip, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006d0:	ea04 060c 	and.w	r6, r4, ip
    if(iocurrent == ioposition)
 80006d4:	45b4      	cmp	ip, r6
 80006d6:	f040 80aa 	bne.w	800082e <HAL_GPIO_Init+0x17e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006da:	684c      	ldr	r4, [r1, #4]
 80006dc:	f024 0710 	bic.w	r7, r4, #16
 80006e0:	2f02      	cmp	r7, #2
 80006e2:	d116      	bne.n	8000712 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 80006e4:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80006e8:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006ec:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80006f0:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006f4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80006f8:	f04f 0e0f 	mov.w	lr, #15
 80006fc:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000700:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000704:	690d      	ldr	r5, [r1, #16]
 8000706:	fa05 f50b 	lsl.w	r5, r5, fp
 800070a:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 800070e:	f8ca 5020 	str.w	r5, [sl, #32]
 8000712:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000716:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000718:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800071c:	fa05 f50a 	lsl.w	r5, r5, sl
 8000720:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000722:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000726:	ea05 0b0b 	and.w	fp, r5, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800072a:	fa0e fe0a 	lsl.w	lr, lr, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800072e:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000730:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000734:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000736:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800073a:	d811      	bhi.n	8000760 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 800073c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800073e:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000742:	68cf      	ldr	r7, [r1, #12]
 8000744:	fa07 fe0a 	lsl.w	lr, r7, sl
 8000748:	ea4e 070b 	orr.w	r7, lr, fp
        GPIOx->OSPEEDR = temp;
 800074c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800074e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000750:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000754:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000758:	409f      	lsls	r7, r3
 800075a:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 800075e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000760:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000762:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000764:	688f      	ldr	r7, [r1, #8]
 8000766:	fa07 f70a 	lsl.w	r7, r7, sl
 800076a:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800076c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800076e:	00e5      	lsls	r5, r4, #3
 8000770:	d55d      	bpl.n	800082e <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000772:	f04f 0b00 	mov.w	fp, #0
 8000776:	f8cd b00c 	str.w	fp, [sp, #12]
 800077a:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800077e:	4d36      	ldr	r5, [pc, #216]	; (8000858 <HAL_GPIO_Init+0x1a8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000780:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000784:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000788:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800078c:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000790:	9703      	str	r7, [sp, #12]
 8000792:	9f03      	ldr	r7, [sp, #12]
 8000794:	f023 0703 	bic.w	r7, r3, #3
 8000798:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800079c:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007a0:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80007a4:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007a8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80007ac:	f04f 0c0f 	mov.w	ip, #15
 80007b0:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007b4:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007b6:	ea2a 0c0c 	bic.w	ip, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007ba:	d03f      	beq.n	800083c <HAL_GPIO_Init+0x18c>
 80007bc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007c0:	42a8      	cmp	r0, r5
 80007c2:	d03d      	beq.n	8000840 <HAL_GPIO_Init+0x190>
 80007c4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007c8:	42a8      	cmp	r0, r5
 80007ca:	d03b      	beq.n	8000844 <HAL_GPIO_Init+0x194>
 80007cc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007d0:	42a8      	cmp	r0, r5
 80007d2:	d039      	beq.n	8000848 <HAL_GPIO_Init+0x198>
 80007d4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007d8:	42a8      	cmp	r0, r5
 80007da:	d037      	beq.n	800084c <HAL_GPIO_Init+0x19c>
 80007dc:	4548      	cmp	r0, r9
 80007de:	d037      	beq.n	8000850 <HAL_GPIO_Init+0x1a0>
 80007e0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80007e4:	42a8      	cmp	r0, r5
 80007e6:	bf14      	ite	ne
 80007e8:	2507      	movne	r5, #7
 80007ea:	2506      	moveq	r5, #6
 80007ec:	fa05 f50e 	lsl.w	r5, r5, lr
 80007f0:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 80007f4:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80007f6:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80007f8:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007fa:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80007fe:	bf0c      	ite	eq
 8000800:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000802:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000804:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000806:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000808:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800080c:	bf0c      	ite	eq
 800080e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000810:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000812:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000814:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000816:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800081a:	bf0c      	ite	eq
 800081c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800081e:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000820:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000822:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000824:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000826:	bf54      	ite	pl
 8000828:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800082a:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 800082c:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800082e:	3301      	adds	r3, #1
 8000830:	2b10      	cmp	r3, #16
 8000832:	f47f af48 	bne.w	80006c6 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000836:	b005      	add	sp, #20
 8000838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800083c:	465d      	mov	r5, fp
 800083e:	e7d5      	b.n	80007ec <HAL_GPIO_Init+0x13c>
 8000840:	2501      	movs	r5, #1
 8000842:	e7d3      	b.n	80007ec <HAL_GPIO_Init+0x13c>
 8000844:	2502      	movs	r5, #2
 8000846:	e7d1      	b.n	80007ec <HAL_GPIO_Init+0x13c>
 8000848:	2503      	movs	r5, #3
 800084a:	e7cf      	b.n	80007ec <HAL_GPIO_Init+0x13c>
 800084c:	2504      	movs	r5, #4
 800084e:	e7cd      	b.n	80007ec <HAL_GPIO_Init+0x13c>
 8000850:	2505      	movs	r5, #5
 8000852:	e7cb      	b.n	80007ec <HAL_GPIO_Init+0x13c>
 8000854:	40013c00 	.word	0x40013c00
 8000858:	40020000 	.word	0x40020000
 800085c:	40023800 	.word	0x40023800
 8000860:	40021400 	.word	0x40021400

08000864 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000864:	6903      	ldr	r3, [r0, #16]
 8000866:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000868:	bf14      	ite	ne
 800086a:	2001      	movne	r0, #1
 800086c:	2000      	moveq	r0, #0
 800086e:	4770      	bx	lr

08000870 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000870:	b10a      	cbz	r2, 8000876 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000872:	6181      	str	r1, [r0, #24]
  }
}
 8000874:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000876:	0409      	lsls	r1, r1, #16
 8000878:	e7fb      	b.n	8000872 <HAL_GPIO_WritePin+0x2>
	...

0800087c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800087c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	9301      	str	r3, [sp, #4]
 8000882:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000884:	4c18      	ldr	r4, [pc, #96]	; (80008e8 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000886:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000888:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800088c:	641a      	str	r2, [r3, #64]	; 0x40
 800088e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000894:	9301      	str	r3, [sp, #4]
 8000896:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000898:	4b14      	ldr	r3, [pc, #80]	; (80008ec <HAL_PWREx_EnableOverDrive+0x70>)
 800089a:	2201      	movs	r2, #1
 800089c:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800089e:	f002 fead 	bl	80035fc <HAL_GetTick>
 80008a2:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80008a4:	6863      	ldr	r3, [r4, #4]
 80008a6:	03da      	lsls	r2, r3, #15
 80008a8:	d50b      	bpl.n	80008c2 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <HAL_PWREx_EnableOverDrive+0x74>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80008ac:	4c0e      	ldr	r4, [pc, #56]	; (80008e8 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80008ae:	2201      	movs	r2, #1
 80008b0:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80008b2:	f002 fea3 	bl	80035fc <HAL_GetTick>
 80008b6:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80008b8:	6863      	ldr	r3, [r4, #4]
 80008ba:	039b      	lsls	r3, r3, #14
 80008bc:	d50a      	bpl.n	80008d4 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80008be:	2000      	movs	r0, #0
 80008c0:	e006      	b.n	80008d0 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80008c2:	f002 fe9b 	bl	80035fc <HAL_GetTick>
 80008c6:	1b40      	subs	r0, r0, r5
 80008c8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80008cc:	d9ea      	bls.n	80008a4 <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 80008ce:	2003      	movs	r0, #3
}
 80008d0:	b003      	add	sp, #12
 80008d2:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80008d4:	f002 fe92 	bl	80035fc <HAL_GetTick>
 80008d8:	1b40      	subs	r0, r0, r5
 80008da:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80008de:	d9eb      	bls.n	80008b8 <HAL_PWREx_EnableOverDrive+0x3c>
 80008e0:	e7f5      	b.n	80008ce <HAL_PWREx_EnableOverDrive+0x52>
 80008e2:	bf00      	nop
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40007000 	.word	0x40007000
 80008ec:	420e0040 	.word	0x420e0040
 80008f0:	420e0044 	.word	0x420e0044

080008f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80008f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008f8:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80008fa:	4604      	mov	r4, r0
 80008fc:	b910      	cbnz	r0, 8000904 <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 80008fe:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);

  return HAL_OK;
}
 8000900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000904:	4b43      	ldr	r3, [pc, #268]	; (8000a14 <HAL_RCC_ClockConfig+0x120>)
 8000906:	681a      	ldr	r2, [r3, #0]
 8000908:	f002 020f 	and.w	r2, r2, #15
 800090c:	428a      	cmp	r2, r1
 800090e:	d327      	bcc.n	8000960 <HAL_RCC_ClockConfig+0x6c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000910:	6821      	ldr	r1, [r4, #0]
 8000912:	078f      	lsls	r7, r1, #30
 8000914:	d42c      	bmi.n	8000970 <HAL_RCC_ClockConfig+0x7c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000916:	07c8      	lsls	r0, r1, #31
 8000918:	d43f      	bmi.n	800099a <HAL_RCC_ClockConfig+0xa6>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800091a:	4b3e      	ldr	r3, [pc, #248]	; (8000a14 <HAL_RCC_ClockConfig+0x120>)
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	f002 020f 	and.w	r2, r2, #15
 8000922:	42aa      	cmp	r2, r5
 8000924:	d864      	bhi.n	80009f0 <HAL_RCC_ClockConfig+0xfc>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000926:	6822      	ldr	r2, [r4, #0]
 8000928:	0751      	lsls	r1, r2, #29
 800092a:	d46a      	bmi.n	8000a02 <HAL_RCC_ClockConfig+0x10e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800092c:	0713      	lsls	r3, r2, #28
 800092e:	d507      	bpl.n	8000940 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000930:	4a39      	ldr	r2, [pc, #228]	; (8000a18 <HAL_RCC_ClockConfig+0x124>)
 8000932:	6921      	ldr	r1, [r4, #16]
 8000934:	6893      	ldr	r3, [r2, #8]
 8000936:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800093a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800093e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000940:	f000 fabc 	bl	8000ebc <HAL_RCC_GetSysClockFreq>
 8000944:	4b34      	ldr	r3, [pc, #208]	; (8000a18 <HAL_RCC_ClockConfig+0x124>)
 8000946:	4a35      	ldr	r2, [pc, #212]	; (8000a1c <HAL_RCC_ClockConfig+0x128>)
 8000948:	689b      	ldr	r3, [r3, #8]
 800094a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800094e:	5cd3      	ldrb	r3, [r2, r3]
 8000950:	40d8      	lsrs	r0, r3
 8000952:	4b33      	ldr	r3, [pc, #204]	; (8000a20 <HAL_RCC_ClockConfig+0x12c>)
 8000954:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000956:	2000      	movs	r0, #0
 8000958:	f002 fd3a 	bl	80033d0 <HAL_InitTick>
  return HAL_OK;
 800095c:	2000      	movs	r0, #0
 800095e:	e7cf      	b.n	8000900 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000960:	b2ca      	uxtb	r2, r1
 8000962:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	f003 030f 	and.w	r3, r3, #15
 800096a:	428b      	cmp	r3, r1
 800096c:	d1c7      	bne.n	80008fe <HAL_RCC_ClockConfig+0xa>
 800096e:	e7cf      	b.n	8000910 <HAL_RCC_ClockConfig+0x1c>
 8000970:	4b29      	ldr	r3, [pc, #164]	; (8000a18 <HAL_RCC_ClockConfig+0x124>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000972:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000976:	bf1e      	ittt	ne
 8000978:	689a      	ldrne	r2, [r3, #8]
 800097a:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 800097e:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000980:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000982:	bf42      	ittt	mi
 8000984:	689a      	ldrmi	r2, [r3, #8]
 8000986:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 800098a:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800098c:	689a      	ldr	r2, [r3, #8]
 800098e:	68a0      	ldr	r0, [r4, #8]
 8000990:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000994:	4302      	orrs	r2, r0
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	e7bd      	b.n	8000916 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800099a:	6862      	ldr	r2, [r4, #4]
 800099c:	4b1e      	ldr	r3, [pc, #120]	; (8000a18 <HAL_RCC_ClockConfig+0x124>)
 800099e:	2a01      	cmp	r2, #1
 80009a0:	d11c      	bne.n	80009dc <HAL_RCC_ClockConfig+0xe8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009a8:	d0a9      	beq.n	80008fe <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80009aa:	4e1b      	ldr	r6, [pc, #108]	; (8000a18 <HAL_RCC_ClockConfig+0x124>)
 80009ac:	68b3      	ldr	r3, [r6, #8]
 80009ae:	f023 0303 	bic.w	r3, r3, #3
 80009b2:	4313      	orrs	r3, r2
 80009b4:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80009b6:	f002 fe21 	bl	80035fc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009ba:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80009be:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80009c0:	68b3      	ldr	r3, [r6, #8]
 80009c2:	6862      	ldr	r2, [r4, #4]
 80009c4:	f003 030c 	and.w	r3, r3, #12
 80009c8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80009cc:	d0a5      	beq.n	800091a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009ce:	f002 fe15 	bl	80035fc <HAL_GetTick>
 80009d2:	1bc0      	subs	r0, r0, r7
 80009d4:	4540      	cmp	r0, r8
 80009d6:	d9f3      	bls.n	80009c0 <HAL_RCC_ClockConfig+0xcc>
        return HAL_TIMEOUT;
 80009d8:	2003      	movs	r0, #3
 80009da:	e791      	b.n	8000900 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80009dc:	1e91      	subs	r1, r2, #2
 80009de:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80009e0:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80009e2:	d802      	bhi.n	80009ea <HAL_RCC_ClockConfig+0xf6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80009e4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80009e8:	e7de      	b.n	80009a8 <HAL_RCC_ClockConfig+0xb4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009ea:	f013 0f02 	tst.w	r3, #2
 80009ee:	e7db      	b.n	80009a8 <HAL_RCC_ClockConfig+0xb4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80009f0:	b2ea      	uxtb	r2, r5
 80009f2:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f003 030f 	and.w	r3, r3, #15
 80009fa:	42ab      	cmp	r3, r5
 80009fc:	f47f af7f 	bne.w	80008fe <HAL_RCC_ClockConfig+0xa>
 8000a00:	e791      	b.n	8000926 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000a02:	4905      	ldr	r1, [pc, #20]	; (8000a18 <HAL_RCC_ClockConfig+0x124>)
 8000a04:	68e0      	ldr	r0, [r4, #12]
 8000a06:	688b      	ldr	r3, [r1, #8]
 8000a08:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000a0c:	4303      	orrs	r3, r0
 8000a0e:	608b      	str	r3, [r1, #8]
 8000a10:	e78c      	b.n	800092c <HAL_RCC_ClockConfig+0x38>
 8000a12:	bf00      	nop
 8000a14:	40023c00 	.word	0x40023c00
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	0800509f 	.word	0x0800509f
 8000a20:	20000010 	.word	0x20000010

08000a24 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000a24:	4b01      	ldr	r3, [pc, #4]	; (8000a2c <HAL_RCC_GetHCLKFreq+0x8>)
 8000a26:	6818      	ldr	r0, [r3, #0]
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	20000010 	.word	0x20000010

08000a30 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000a30:	4b04      	ldr	r3, [pc, #16]	; (8000a44 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000a32:	4a05      	ldr	r2, [pc, #20]	; (8000a48 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000a34:	689b      	ldr	r3, [r3, #8]
 8000a36:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000a3a:	5cd3      	ldrb	r3, [r2, r3]
 8000a3c:	4a03      	ldr	r2, [pc, #12]	; (8000a4c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000a3e:	6810      	ldr	r0, [r2, #0]
}
 8000a40:	40d8      	lsrs	r0, r3
 8000a42:	4770      	bx	lr
 8000a44:	40023800 	.word	0x40023800
 8000a48:	080050af 	.word	0x080050af
 8000a4c:	20000010 	.word	0x20000010

08000a50 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000a50:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000a52:	4a05      	ldr	r2, [pc, #20]	; (8000a68 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000a54:	689b      	ldr	r3, [r3, #8]
 8000a56:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000a5a:	5cd3      	ldrb	r3, [r2, r3]
 8000a5c:	4a03      	ldr	r2, [pc, #12]	; (8000a6c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000a5e:	6810      	ldr	r0, [r2, #0]
}
 8000a60:	40d8      	lsrs	r0, r3
 8000a62:	4770      	bx	lr
 8000a64:	40023800 	.word	0x40023800
 8000a68:	080050af 	.word	0x080050af
 8000a6c:	20000010 	.word	0x20000010

08000a70 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000a70:	230f      	movs	r3, #15
 8000a72:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000a74:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <HAL_RCC_GetClockConfig+0x34>)
 8000a76:	689a      	ldr	r2, [r3, #8]
 8000a78:	f002 0203 	and.w	r2, r2, #3
 8000a7c:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8000a7e:	689a      	ldr	r2, [r3, #8]
 8000a80:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8000a84:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8000a86:	689a      	ldr	r2, [r3, #8]
 8000a88:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8000a8c:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	08db      	lsrs	r3, r3, #3
 8000a92:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000a96:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000a98:	4b03      	ldr	r3, [pc, #12]	; (8000aa8 <HAL_RCC_GetClockConfig+0x38>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f003 030f 	and.w	r3, r3, #15
 8000aa0:	600b      	str	r3, [r1, #0]
}
 8000aa2:	4770      	bx	lr
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40023c00 	.word	0x40023c00

08000aac <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8000aac:	6803      	ldr	r3, [r0, #0]
{
 8000aae:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8000ab2:	f013 0601 	ands.w	r6, r3, #1
{
 8000ab6:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8000ab8:	d00b      	beq.n	8000ad2 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8000aba:	49aa      	ldr	r1, [pc, #680]	; (8000d64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8000abc:	6b86      	ldr	r6, [r0, #56]	; 0x38
 8000abe:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8000ac2:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8000ac6:	4332      	orrs	r2, r6
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8000ac8:	fab6 f686 	clz	r6, r6
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8000acc:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8000ad0:	0976      	lsrs	r6, r6, #5
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8000ad2:	079d      	lsls	r5, r3, #30
 8000ad4:	d50b      	bpl.n	8000aee <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8000ad6:	48a3      	ldr	r0, [pc, #652]	; (8000d64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8000ad8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8000ada:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8000ade:	f022 52c0 	bic.w	r2, r2, #402653184	; 0x18000000
 8000ae2:	430a      	orrs	r2, r1
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
    {
      plli2sused = 1U;
 8000ae4:	2900      	cmp	r1, #0
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8000ae6:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
      plli2sused = 1U;
 8000aea:	bf08      	it	eq
 8000aec:	2601      	moveq	r6, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8000aee:	f013 0504 	ands.w	r5, r3, #4
 8000af2:	d012      	beq.n	8000b1a <HAL_RCCEx_PeriphCLKConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8000af4:	499b      	ldr	r1, [pc, #620]	; (8000d64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8000af6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8000af8:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8000afc:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8000b00:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8000b04:	ea42 0205 	orr.w	r2, r2, r5
    {
      plli2sused = 1U;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8000b08:	bf18      	it	ne
 8000b0a:	fab5 f585 	clzne	r5, r5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8000b0e:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8000b12:	bf12      	itee	ne
 8000b14:	096d      	lsrne	r5, r5, #5
  uint32_t pllsaiused = 0U;
 8000b16:	2500      	moveq	r5, #0
      plli2sused = 1U;
 8000b18:	2601      	moveq	r6, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8000b1a:	0718      	lsls	r0, r3, #28
 8000b1c:	d50f      	bpl.n	8000b3e <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8000b1e:	4891      	ldr	r0, [pc, #580]	; (8000d64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8000b20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000b22:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8000b26:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8000b2a:	430a      	orrs	r2, r1

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8000b2c:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8000b30:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8000b34:	f000 8109 	beq.w	8000d4a <HAL_RCCEx_PeriphCLKConfig+0x29e>
      plli2sused = 1U;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1U;
 8000b38:	2900      	cmp	r1, #0
 8000b3a:	bf08      	it	eq
 8000b3c:	2501      	moveq	r5, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000b3e:	0699      	lsls	r1, r3, #26
 8000b40:	d533      	bpl.n	8000baa <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	9301      	str	r3, [sp, #4]
 8000b46:	4b87      	ldr	r3, [pc, #540]	; (8000d64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8000b48:	4f87      	ldr	r7, [pc, #540]	; (8000d68 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8000b4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b4c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000b50:	641a      	str	r2, [r3, #64]	; 0x40
 8000b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b58:	9301      	str	r3, [sp, #4]
 8000b5a:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b62:	603b      	str	r3, [r7, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000b64:	f002 fd4a 	bl	80035fc <HAL_GetTick>
 8000b68:	4680      	mov	r8, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	05da      	lsls	r2, r3, #23
 8000b6e:	f140 80ee 	bpl.w	8000d4e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000b72:	4f7c      	ldr	r7, [pc, #496]	; (8000d64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8000b74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000b76:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000b7a:	f040 80fb 	bne.w	8000d74 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000b7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b80:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8000b84:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8000b88:	4a76      	ldr	r2, [pc, #472]	; (8000d64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8000b8a:	f040 8116 	bne.w	8000dba <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8000b8e:	6891      	ldr	r1, [r2, #8]
 8000b90:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8000b94:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8000b98:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8000b9c:	4301      	orrs	r1, r0
 8000b9e:	6091      	str	r1, [r2, #8]
 8000ba0:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8000ba2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ba6:	430b      	orrs	r3, r1
 8000ba8:	6713      	str	r3, [r2, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8000baa:	6823      	ldr	r3, [r4, #0]
 8000bac:	06d9      	lsls	r1, r3, #27
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8000bae:	bf42      	ittt	mi
 8000bb0:	4b6e      	ldrmi	r3, [pc, #440]	; (8000d6c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8000bb2:	f894 2058 	ldrbmi.w	r2, [r4, #88]	; 0x58
 8000bb6:	601a      	strmi	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8000bb8:	6823      	ldr	r3, [r4, #0]
 8000bba:	061a      	lsls	r2, r3, #24
 8000bbc:	d508      	bpl.n	8000bd0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8000bbe:	4969      	ldr	r1, [pc, #420]	; (8000d64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8000bc0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8000bc2:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 8000bc6:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8000bca:	4302      	orrs	r2, r0
 8000bcc:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8000bd0:	065f      	lsls	r7, r3, #25
 8000bd2:	d508      	bpl.n	8000be6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8000bd4:	4963      	ldr	r1, [pc, #396]	; (8000d64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8000bd6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8000bd8:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 8000bdc:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8000be0:	4302      	orrs	r2, r0
 8000be2:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8000be6:	05d8      	lsls	r0, r3, #23
 8000be8:	d50c      	bpl.n	8000c04 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8000bea:	485e      	ldr	r0, [pc, #376]	; (8000d64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8000bec:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8000bee:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 8000bf2:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 8000bf6:	430a      	orrs	r2, r1

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
    {
      pllsaiused = 1U;
 8000bf8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8000bfc:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
      pllsaiused = 1U;
 8000c00:	bf08      	it	eq
 8000c02:	2501      	moveq	r5, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8000c04:	0599      	lsls	r1, r3, #22
 8000c06:	d508      	bpl.n	8000c1a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8000c08:	4956      	ldr	r1, [pc, #344]	; (8000d64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8000c0a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8000c0c:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 8000c10:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8000c14:	4302      	orrs	r2, r0
 8000c16:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8000c1a:	055a      	lsls	r2, r3, #21
 8000c1c:	f100 80d1 	bmi.w	8000dc2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8000c20:	2e01      	cmp	r6, #1
 8000c22:	f040 80dc 	bne.w	8000dde <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8000c26:	4e52      	ldr	r6, [pc, #328]	; (8000d70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8000c28:	4f4e      	ldr	r7, [pc, #312]	; (8000d64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
    __HAL_RCC_PLLI2S_DISABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8000c2e:	f002 fce5 	bl	80035fc <HAL_GetTick>
 8000c32:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	011b      	lsls	r3, r3, #4
 8000c38:	f100 8125 	bmi.w	8000e86 <HAL_RCCEx_PeriphCLKConfig+0x3da>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8000c3c:	6822      	ldr	r2, [r4, #0]
 8000c3e:	07d0      	lsls	r0, r2, #31
 8000c40:	d501      	bpl.n	8000c46 <HAL_RCCEx_PeriphCLKConfig+0x19a>
 8000c42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000c44:	b11b      	cbz	r3, 8000c4e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8000c46:	0791      	lsls	r1, r2, #30
 8000c48:	d515      	bpl.n	8000c76 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8000c4a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000c4c:	b99b      	cbnz	r3, 8000c76 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8000c4e:	4945      	ldr	r1, [pc, #276]	; (8000d64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8000c50:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8000c54:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8000c58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c5c:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8000c60:	4303      	orrs	r3, r0
 8000c62:	6860      	ldr	r0, [r4, #4]
 8000c64:	4303      	orrs	r3, r0
 8000c66:	68a0      	ldr	r0, [r4, #8]
 8000c68:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8000c6c:	6960      	ldr	r0, [r4, #20]
 8000c6e:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 8000c72:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8000c76:	0753      	lsls	r3, r2, #29
 8000c78:	d503      	bpl.n	8000c82 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 8000c7a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000c7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000c80:	d005      	beq.n	8000c8e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8000c82:	0717      	lsls	r7, r2, #28
 8000c84:	d520      	bpl.n	8000cc8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8000c86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000c88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000c8c:	d11c      	bne.n	8000cc8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8000c8e:	4935      	ldr	r1, [pc, #212]	; (8000d64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8000c90:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8000c94:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8000c98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c9c:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8000ca0:	4303      	orrs	r3, r0
 8000ca2:	6860      	ldr	r0, [r4, #4]
 8000ca4:	4303      	orrs	r3, r0
 8000ca6:	68a0      	ldr	r0, [r4, #8]
 8000ca8:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8000cac:	6920      	ldr	r0, [r4, #16]
 8000cae:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8000cb2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8000cb6:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8000cba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000cbc:	f020 001f 	bic.w	r0, r0, #31
 8000cc0:	3b01      	subs	r3, #1
 8000cc2:	4303      	orrs	r3, r0
 8000cc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8000cc8:	0550      	lsls	r0, r2, #21
 8000cca:	d51b      	bpl.n	8000d04 <HAL_RCCEx_PeriphCLKConfig+0x258>
 8000ccc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000cce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000cd2:	d117      	bne.n	8000d04 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8000cd4:	4823      	ldr	r0, [pc, #140]	; (8000d64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8000cd6:	6867      	ldr	r7, [r4, #4]
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8000cd8:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8000cdc:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8000ce0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8000ce4:	433b      	orrs	r3, r7
 8000ce6:	68a7      	ldr	r7, [r4, #8]
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8000ce8:	f3c1 4101 	ubfx	r1, r1, #16, #2
 8000cec:	3101      	adds	r1, #1
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8000cee:	ea43 1387 	orr.w	r3, r3, r7, lsl #6
 8000cf2:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8000cf6:	68e1      	ldr	r1, [r4, #12]
 8000cf8:	0849      	lsrs	r1, r1, #1
 8000cfa:	3901      	subs	r1, #1
 8000cfc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d00:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8000d04:	0511      	lsls	r1, r2, #20
 8000d06:	d511      	bpl.n	8000d2c <HAL_RCCEx_PeriphCLKConfig+0x280>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8000d08:	6923      	ldr	r3, [r4, #16]
 8000d0a:	68a2      	ldr	r2, [r4, #8]
 8000d0c:	061b      	lsls	r3, r3, #24
 8000d0e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000d12:	6862      	ldr	r2, [r4, #4]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	6962      	ldr	r2, [r4, #20]
 8000d18:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8000d1c:	68e2      	ldr	r2, [r4, #12]
 8000d1e:	0852      	lsrs	r2, r2, #1
 8000d20:	3a01      	subs	r2, #1
 8000d22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d26:	4a0f      	ldr	r2, [pc, #60]	; (8000d64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8000d28:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	6033      	str	r3, [r6, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8000d30:	f002 fc64 	bl	80035fc <HAL_GetTick>
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8000d34:	4e0b      	ldr	r6, [pc, #44]	; (8000d64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
    tickstart = HAL_GetTick();
 8000d36:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8000d38:	6833      	ldr	r3, [r6, #0]
 8000d3a:	011a      	lsls	r2, r3, #4
 8000d3c:	d453      	bmi.n	8000de6 <HAL_RCCEx_PeriphCLKConfig+0x33a>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8000d3e:	f002 fc5d 	bl	80035fc <HAL_GetTick>
 8000d42:	1bc0      	subs	r0, r0, r7
 8000d44:	2802      	cmp	r0, #2
 8000d46:	d9f7      	bls.n	8000d38 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8000d48:	e008      	b.n	8000d5c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      plli2sused = 1U;
 8000d4a:	2601      	movs	r6, #1
 8000d4c:	e6f7      	b.n	8000b3e <HAL_RCCEx_PeriphCLKConfig+0x92>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000d4e:	f002 fc55 	bl	80035fc <HAL_GetTick>
 8000d52:	eba0 0008 	sub.w	r0, r0, r8
 8000d56:	2802      	cmp	r0, #2
 8000d58:	f67f af07 	bls.w	8000b6a <HAL_RCCEx_PeriphCLKConfig+0xbe>
        return HAL_TIMEOUT;
 8000d5c:	2003      	movs	r0, #3
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
}
 8000d5e:	b003      	add	sp, #12
 8000d60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000d64:	40023800 	.word	0x40023800
 8000d68:	40007000 	.word	0x40007000
 8000d6c:	424711e0 	.word	0x424711e0
 8000d70:	42470068 	.word	0x42470068
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000d74:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000d76:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	f43f aeff 	beq.w	8000b7e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000d80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8000d82:	4a4b      	ldr	r2, [pc, #300]	; (8000eb0 <HAL_RCCEx_PeriphCLKConfig+0x404>)
 8000d84:	2101      	movs	r1, #1
 8000d86:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000d88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 8000d90:	673b      	str	r3, [r7, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8000d92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000d94:	07db      	lsls	r3, r3, #31
 8000d96:	f57f aef2 	bpl.w	8000b7e <HAL_RCCEx_PeriphCLKConfig+0xd2>
        tickstart = HAL_GetTick();
 8000d9a:	f002 fc2f 	bl	80035fc <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d9e:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8000da2:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000da4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000da6:	0798      	lsls	r0, r3, #30
 8000da8:	f53f aee9 	bmi.w	8000b7e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000dac:	f002 fc26 	bl	80035fc <HAL_GetTick>
 8000db0:	eba0 0008 	sub.w	r0, r0, r8
 8000db4:	4548      	cmp	r0, r9
 8000db6:	d9f5      	bls.n	8000da4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8000db8:	e7d0      	b.n	8000d5c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000dba:	6891      	ldr	r1, [r2, #8]
 8000dbc:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8000dc0:	e6ed      	b.n	8000b9e <HAL_RCCEx_PeriphCLKConfig+0xf2>
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8000dc2:	483c      	ldr	r0, [pc, #240]	; (8000eb4 <HAL_RCCEx_PeriphCLKConfig+0x408>)
 8000dc4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8000dc6:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 8000dca:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8000dce:	430a      	orrs	r2, r1
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8000dd0:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8000dd4:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8000dd8:	f47f af22 	bne.w	8000c20 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8000ddc:	e723      	b.n	8000c26 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8000dde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000de2:	f43f af20 	beq.w	8000c26 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  if(pllsaiused == 1U)
 8000de6:	2d01      	cmp	r5, #1
 8000de8:	d14b      	bne.n	8000e82 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    __HAL_RCC_PLLSAI_DISABLE();
 8000dea:	4d33      	ldr	r5, [pc, #204]	; (8000eb8 <HAL_RCCEx_PeriphCLKConfig+0x40c>)
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8000dec:	4e31      	ldr	r6, [pc, #196]	; (8000eb4 <HAL_RCCEx_PeriphCLKConfig+0x408>)
    __HAL_RCC_PLLSAI_DISABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8000df2:	f002 fc03 	bl	80035fc <HAL_GetTick>
 8000df6:	4607      	mov	r7, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8000df8:	6833      	ldr	r3, [r6, #0]
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	d44b      	bmi.n	8000e96 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8000dfe:	6821      	ldr	r1, [r4, #0]
 8000e00:	074e      	lsls	r6, r1, #29
 8000e02:	d501      	bpl.n	8000e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8000e04:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000e06:	b11b      	cbz	r3, 8000e10 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8000e08:	0708      	lsls	r0, r1, #28
 8000e0a:	d51a      	bpl.n	8000e42 <HAL_RCCEx_PeriphCLKConfig+0x396>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8000e0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000e0e:	b9c3      	cbnz	r3, 8000e42 <HAL_RCCEx_PeriphCLKConfig+0x396>
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8000e10:	4a28      	ldr	r2, [pc, #160]	; (8000eb4 <HAL_RCCEx_PeriphCLKConfig+0x408>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8000e12:	69a0      	ldr	r0, [r4, #24]
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8000e14:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8000e18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e1c:	4303      	orrs	r3, r0
 8000e1e:	69e0      	ldr	r0, [r4, #28]
 8000e20:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8000e24:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000e26:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8000e2a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8000e2e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8000e32:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8000e34:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8000e38:	3801      	subs	r0, #1
 8000e3a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8000e3e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8000e42:	05ca      	lsls	r2, r1, #23
 8000e44:	d514      	bpl.n	8000e70 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8000e46:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000e48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000e4c:	d110      	bne.n	8000e70 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8000e4e:	4919      	ldr	r1, [pc, #100]	; (8000eb4 <HAL_RCCEx_PeriphCLKConfig+0x408>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8000e50:	69a2      	ldr	r2, [r4, #24]
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8000e52:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8000e56:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	69e2      	ldr	r2, [r4, #28]
 8000e5e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000e62:	6a22      	ldr	r2, [r4, #32]
 8000e64:	0852      	lsrs	r2, r2, #1
 8000e66:	3a01      	subs	r2, #1
 8000e68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    __HAL_RCC_PLLSAI_ENABLE();
 8000e70:	2301      	movs	r3, #1
 8000e72:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8000e74:	f002 fbc2 	bl	80035fc <HAL_GetTick>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8000e78:	4c0e      	ldr	r4, [pc, #56]	; (8000eb4 <HAL_RCCEx_PeriphCLKConfig+0x408>)
    tickstart = HAL_GetTick();
 8000e7a:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8000e7c:	6823      	ldr	r3, [r4, #0]
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	d50f      	bpl.n	8000ea2 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
  return HAL_OK;
 8000e82:	2000      	movs	r0, #0
 8000e84:	e76b      	b.n	8000d5e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8000e86:	f002 fbb9 	bl	80035fc <HAL_GetTick>
 8000e8a:	eba0 0008 	sub.w	r0, r0, r8
 8000e8e:	2802      	cmp	r0, #2
 8000e90:	f67f aed0 	bls.w	8000c34 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8000e94:	e762      	b.n	8000d5c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8000e96:	f002 fbb1 	bl	80035fc <HAL_GetTick>
 8000e9a:	1bc0      	subs	r0, r0, r7
 8000e9c:	2802      	cmp	r0, #2
 8000e9e:	d9ab      	bls.n	8000df8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8000ea0:	e75c      	b.n	8000d5c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8000ea2:	f002 fbab 	bl	80035fc <HAL_GetTick>
 8000ea6:	1b40      	subs	r0, r0, r5
 8000ea8:	2802      	cmp	r0, #2
 8000eaa:	d9e7      	bls.n	8000e7c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8000eac:	e756      	b.n	8000d5c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8000eae:	bf00      	nop
 8000eb0:	42470e40 	.word	0x42470e40
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	42470070 	.word	0x42470070

08000ebc <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ebc:	4920      	ldr	r1, [pc, #128]	; (8000f40 <HAL_RCC_GetSysClockFreq+0x84>)
{
 8000ebe:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ec0:	688b      	ldr	r3, [r1, #8]
 8000ec2:	f003 030c 	and.w	r3, r3, #12
 8000ec6:	2b08      	cmp	r3, #8
 8000ec8:	d007      	beq.n	8000eda <HAL_RCC_GetSysClockFreq+0x1e>
 8000eca:	2b0c      	cmp	r3, #12
 8000ecc:	d020      	beq.n	8000f10 <HAL_RCC_GetSysClockFreq+0x54>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000ece:	481d      	ldr	r0, [pc, #116]	; (8000f44 <HAL_RCC_GetSysClockFreq+0x88>)
 8000ed0:	4a1d      	ldr	r2, [pc, #116]	; (8000f48 <HAL_RCC_GetSysClockFreq+0x8c>)
 8000ed2:	2b04      	cmp	r3, #4
 8000ed4:	bf18      	it	ne
 8000ed6:	4610      	movne	r0, r2
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000ed8:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000eda:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000edc:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ede:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000ee0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ee4:	bf14      	ite	ne
 8000ee6:	4817      	ldrne	r0, [pc, #92]	; (8000f44 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ee8:	4817      	ldreq	r0, [pc, #92]	; (8000f48 <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000eea:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000eee:	bf18      	it	ne
 8000ef0:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000ef2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ef6:	fba1 0100 	umull	r0, r1, r1, r0
 8000efa:	f7ff f9d9 	bl	80002b0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000efe:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <HAL_RCC_GetSysClockFreq+0x84>)
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000f06:	3301      	adds	r3, #1
 8000f08:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllr;
 8000f0a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8000f0e:	e7e3      	b.n	8000ed8 <HAL_RCC_GetSysClockFreq+0x1c>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f10:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000f12:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f14:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000f16:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f1a:	bf14      	ite	ne
 8000f1c:	4809      	ldrne	r0, [pc, #36]	; (8000f44 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f1e:	480a      	ldreq	r0, [pc, #40]	; (8000f48 <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f20:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000f24:	bf18      	it	ne
 8000f26:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f28:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f2c:	fba1 0100 	umull	r0, r1, r1, r0
 8000f30:	f7ff f9be 	bl	80002b0 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8000f34:	4b02      	ldr	r3, [pc, #8]	; (8000f40 <HAL_RCC_GetSysClockFreq+0x84>)
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8000f3c:	e7e5      	b.n	8000f0a <HAL_RCC_GetSysClockFreq+0x4e>
 8000f3e:	bf00      	nop
 8000f40:	40023800 	.word	0x40023800
 8000f44:	007a1200 	.word	0x007a1200
 8000f48:	00f42400 	.word	0x00f42400

08000f4c <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f4c:	6803      	ldr	r3, [r0, #0]
{
 8000f4e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f52:	07df      	lsls	r7, r3, #31
{
 8000f54:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f56:	d410      	bmi.n	8000f7a <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f58:	6823      	ldr	r3, [r4, #0]
 8000f5a:	079e      	lsls	r6, r3, #30
 8000f5c:	d467      	bmi.n	800102e <HAL_RCC_OscConfig+0xe2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f5e:	6823      	ldr	r3, [r4, #0]
 8000f60:	071a      	lsls	r2, r3, #28
 8000f62:	f100 80b2 	bmi.w	80010ca <HAL_RCC_OscConfig+0x17e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f66:	6823      	ldr	r3, [r4, #0]
 8000f68:	075b      	lsls	r3, r3, #29
 8000f6a:	f100 80d0 	bmi.w	800110e <HAL_RCC_OscConfig+0x1c2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f6e:	69a2      	ldr	r2, [r4, #24]
 8000f70:	2a00      	cmp	r2, #0
 8000f72:	f040 8139 	bne.w	80011e8 <HAL_RCC_OscConfig+0x29c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000f76:	2000      	movs	r0, #0
 8000f78:	e01e      	b.n	8000fb8 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000f7a:	4b97      	ldr	r3, [pc, #604]	; (80011d8 <HAL_RCC_OscConfig+0x28c>)
 8000f7c:	689a      	ldr	r2, [r3, #8]
 8000f7e:	f002 020c 	and.w	r2, r2, #12
 8000f82:	2a04      	cmp	r2, #4
 8000f84:	d010      	beq.n	8000fa8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000f86:	689a      	ldr	r2, [r3, #8]
 8000f88:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000f8c:	2a08      	cmp	r2, #8
 8000f8e:	d102      	bne.n	8000f96 <HAL_RCC_OscConfig+0x4a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	025d      	lsls	r5, r3, #9
 8000f94:	d408      	bmi.n	8000fa8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f96:	4b90      	ldr	r3, [pc, #576]	; (80011d8 <HAL_RCC_OscConfig+0x28c>)
 8000f98:	689a      	ldr	r2, [r3, #8]
 8000f9a:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000f9e:	2a0c      	cmp	r2, #12
 8000fa0:	d10d      	bne.n	8000fbe <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fa2:	685a      	ldr	r2, [r3, #4]
 8000fa4:	0250      	lsls	r0, r2, #9
 8000fa6:	d50a      	bpl.n	8000fbe <HAL_RCC_OscConfig+0x72>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fa8:	4b8b      	ldr	r3, [pc, #556]	; (80011d8 <HAL_RCC_OscConfig+0x28c>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	0399      	lsls	r1, r3, #14
 8000fae:	d5d3      	bpl.n	8000f58 <HAL_RCC_OscConfig+0xc>
 8000fb0:	6863      	ldr	r3, [r4, #4]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d1d0      	bne.n	8000f58 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000fb6:	2001      	movs	r0, #1
}
 8000fb8:	b002      	add	sp, #8
 8000fba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fbe:	6862      	ldr	r2, [r4, #4]
 8000fc0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000fc4:	d111      	bne.n	8000fea <HAL_RCC_OscConfig+0x9e>
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000fcc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000fce:	f002 fb15 	bl	80035fc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fd2:	4d81      	ldr	r5, [pc, #516]	; (80011d8 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8000fd4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fd6:	682b      	ldr	r3, [r5, #0]
 8000fd8:	039a      	lsls	r2, r3, #14
 8000fda:	d4bd      	bmi.n	8000f58 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fdc:	f002 fb0e 	bl	80035fc <HAL_GetTick>
 8000fe0:	1b80      	subs	r0, r0, r6
 8000fe2:	2864      	cmp	r0, #100	; 0x64
 8000fe4:	d9f7      	bls.n	8000fd6 <HAL_RCC_OscConfig+0x8a>
            return HAL_TIMEOUT;
 8000fe6:	2003      	movs	r0, #3
 8000fe8:	e7e6      	b.n	8000fb8 <HAL_RCC_OscConfig+0x6c>
 8000fea:	4d7b      	ldr	r5, [pc, #492]	; (80011d8 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fec:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000ff0:	682b      	ldr	r3, [r5, #0]
 8000ff2:	d107      	bne.n	8001004 <HAL_RCC_OscConfig+0xb8>
 8000ff4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ff8:	602b      	str	r3, [r5, #0]
 8000ffa:	682b      	ldr	r3, [r5, #0]
 8000ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001000:	602b      	str	r3, [r5, #0]
 8001002:	e7e4      	b.n	8000fce <HAL_RCC_OscConfig+0x82>
 8001004:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001008:	602b      	str	r3, [r5, #0]
 800100a:	682b      	ldr	r3, [r5, #0]
 800100c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001010:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001012:	2a00      	cmp	r2, #0
 8001014:	d1db      	bne.n	8000fce <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8001016:	f002 faf1 	bl	80035fc <HAL_GetTick>
 800101a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800101c:	682b      	ldr	r3, [r5, #0]
 800101e:	039b      	lsls	r3, r3, #14
 8001020:	d59a      	bpl.n	8000f58 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001022:	f002 faeb 	bl	80035fc <HAL_GetTick>
 8001026:	1b80      	subs	r0, r0, r6
 8001028:	2864      	cmp	r0, #100	; 0x64
 800102a:	d9f7      	bls.n	800101c <HAL_RCC_OscConfig+0xd0>
 800102c:	e7db      	b.n	8000fe6 <HAL_RCC_OscConfig+0x9a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800102e:	4b6a      	ldr	r3, [pc, #424]	; (80011d8 <HAL_RCC_OscConfig+0x28c>)
 8001030:	689a      	ldr	r2, [r3, #8]
 8001032:	f012 0f0c 	tst.w	r2, #12
 8001036:	d010      	beq.n	800105a <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001038:	689a      	ldr	r2, [r3, #8]
 800103a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800103e:	2a08      	cmp	r2, #8
 8001040:	d102      	bne.n	8001048 <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	025f      	lsls	r7, r3, #9
 8001046:	d508      	bpl.n	800105a <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001048:	4a63      	ldr	r2, [pc, #396]	; (80011d8 <HAL_RCC_OscConfig+0x28c>)
 800104a:	6893      	ldr	r3, [r2, #8]
 800104c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001050:	2b0c      	cmp	r3, #12
 8001052:	d111      	bne.n	8001078 <HAL_RCC_OscConfig+0x12c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001054:	6853      	ldr	r3, [r2, #4]
 8001056:	025e      	lsls	r6, r3, #9
 8001058:	d40e      	bmi.n	8001078 <HAL_RCC_OscConfig+0x12c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800105a:	4b5f      	ldr	r3, [pc, #380]	; (80011d8 <HAL_RCC_OscConfig+0x28c>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	0795      	lsls	r5, r2, #30
 8001060:	d502      	bpl.n	8001068 <HAL_RCC_OscConfig+0x11c>
 8001062:	68e2      	ldr	r2, [r4, #12]
 8001064:	2a01      	cmp	r2, #1
 8001066:	d1a6      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	6921      	ldr	r1, [r4, #16]
 800106c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001070:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001074:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001076:	e772      	b.n	8000f5e <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001078:	68e2      	ldr	r2, [r4, #12]
 800107a:	4b58      	ldr	r3, [pc, #352]	; (80011dc <HAL_RCC_OscConfig+0x290>)
 800107c:	b1b2      	cbz	r2, 80010ac <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_ENABLE();
 800107e:	2201      	movs	r2, #1
 8001080:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001082:	f002 fabb 	bl	80035fc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001086:	4d54      	ldr	r5, [pc, #336]	; (80011d8 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8001088:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800108a:	682b      	ldr	r3, [r5, #0]
 800108c:	0798      	lsls	r0, r3, #30
 800108e:	d507      	bpl.n	80010a0 <HAL_RCC_OscConfig+0x154>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001090:	682b      	ldr	r3, [r5, #0]
 8001092:	6922      	ldr	r2, [r4, #16]
 8001094:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001098:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800109c:	602b      	str	r3, [r5, #0]
 800109e:	e75e      	b.n	8000f5e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010a0:	f002 faac 	bl	80035fc <HAL_GetTick>
 80010a4:	1b80      	subs	r0, r0, r6
 80010a6:	2802      	cmp	r0, #2
 80010a8:	d9ef      	bls.n	800108a <HAL_RCC_OscConfig+0x13e>
 80010aa:	e79c      	b.n	8000fe6 <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_HSI_DISABLE();
 80010ac:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80010ae:	f002 faa5 	bl	80035fc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010b2:	4d49      	ldr	r5, [pc, #292]	; (80011d8 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 80010b4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010b6:	682b      	ldr	r3, [r5, #0]
 80010b8:	0799      	lsls	r1, r3, #30
 80010ba:	f57f af50 	bpl.w	8000f5e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010be:	f002 fa9d 	bl	80035fc <HAL_GetTick>
 80010c2:	1b80      	subs	r0, r0, r6
 80010c4:	2802      	cmp	r0, #2
 80010c6:	d9f6      	bls.n	80010b6 <HAL_RCC_OscConfig+0x16a>
 80010c8:	e78d      	b.n	8000fe6 <HAL_RCC_OscConfig+0x9a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80010ca:	6962      	ldr	r2, [r4, #20]
 80010cc:	4b44      	ldr	r3, [pc, #272]	; (80011e0 <HAL_RCC_OscConfig+0x294>)
 80010ce:	b17a      	cbz	r2, 80010f0 <HAL_RCC_OscConfig+0x1a4>
      __HAL_RCC_LSI_ENABLE();
 80010d0:	2201      	movs	r2, #1
 80010d2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80010d4:	f002 fa92 	bl	80035fc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010d8:	4d3f      	ldr	r5, [pc, #252]	; (80011d8 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 80010da:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010dc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80010de:	079f      	lsls	r7, r3, #30
 80010e0:	f53f af41 	bmi.w	8000f66 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010e4:	f002 fa8a 	bl	80035fc <HAL_GetTick>
 80010e8:	1b80      	subs	r0, r0, r6
 80010ea:	2802      	cmp	r0, #2
 80010ec:	d9f6      	bls.n	80010dc <HAL_RCC_OscConfig+0x190>
 80010ee:	e77a      	b.n	8000fe6 <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_LSI_DISABLE();
 80010f0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80010f2:	f002 fa83 	bl	80035fc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010f6:	4d38      	ldr	r5, [pc, #224]	; (80011d8 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 80010f8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010fa:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80010fc:	0798      	lsls	r0, r3, #30
 80010fe:	f57f af32 	bpl.w	8000f66 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001102:	f002 fa7b 	bl	80035fc <HAL_GetTick>
 8001106:	1b80      	subs	r0, r0, r6
 8001108:	2802      	cmp	r0, #2
 800110a:	d9f6      	bls.n	80010fa <HAL_RCC_OscConfig+0x1ae>
 800110c:	e76b      	b.n	8000fe6 <HAL_RCC_OscConfig+0x9a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800110e:	4b32      	ldr	r3, [pc, #200]	; (80011d8 <HAL_RCC_OscConfig+0x28c>)
 8001110:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001112:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001116:	d128      	bne.n	800116a <HAL_RCC_OscConfig+0x21e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001118:	9201      	str	r2, [sp, #4]
 800111a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800111c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001120:	641a      	str	r2, [r3, #64]	; 0x40
 8001122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001128:	9301      	str	r3, [sp, #4]
 800112a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800112c:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800112e:	4d2d      	ldr	r5, [pc, #180]	; (80011e4 <HAL_RCC_OscConfig+0x298>)
 8001130:	682b      	ldr	r3, [r5, #0]
 8001132:	05d9      	lsls	r1, r3, #23
 8001134:	d51b      	bpl.n	800116e <HAL_RCC_OscConfig+0x222>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001136:	68a3      	ldr	r3, [r4, #8]
 8001138:	4d27      	ldr	r5, [pc, #156]	; (80011d8 <HAL_RCC_OscConfig+0x28c>)
 800113a:	2b01      	cmp	r3, #1
 800113c:	d127      	bne.n	800118e <HAL_RCC_OscConfig+0x242>
 800113e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001146:	f002 fa59 	bl	80035fc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800114a:	4d23      	ldr	r5, [pc, #140]	; (80011d8 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 800114c:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800114e:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001152:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001154:	079b      	lsls	r3, r3, #30
 8001156:	d539      	bpl.n	80011cc <HAL_RCC_OscConfig+0x280>
    if(pwrclkchanged == SET)
 8001158:	2e00      	cmp	r6, #0
 800115a:	f43f af08 	beq.w	8000f6e <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 800115e:	4a1e      	ldr	r2, [pc, #120]	; (80011d8 <HAL_RCC_OscConfig+0x28c>)
 8001160:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001162:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001166:	6413      	str	r3, [r2, #64]	; 0x40
 8001168:	e701      	b.n	8000f6e <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 800116a:	2600      	movs	r6, #0
 800116c:	e7df      	b.n	800112e <HAL_RCC_OscConfig+0x1e2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800116e:	682b      	ldr	r3, [r5, #0]
 8001170:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001174:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001176:	f002 fa41 	bl	80035fc <HAL_GetTick>
 800117a:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800117c:	682b      	ldr	r3, [r5, #0]
 800117e:	05da      	lsls	r2, r3, #23
 8001180:	d4d9      	bmi.n	8001136 <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001182:	f002 fa3b 	bl	80035fc <HAL_GetTick>
 8001186:	1bc0      	subs	r0, r0, r7
 8001188:	2802      	cmp	r0, #2
 800118a:	d9f7      	bls.n	800117c <HAL_RCC_OscConfig+0x230>
 800118c:	e72b      	b.n	8000fe6 <HAL_RCC_OscConfig+0x9a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800118e:	2b05      	cmp	r3, #5
 8001190:	d104      	bne.n	800119c <HAL_RCC_OscConfig+0x250>
 8001192:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001194:	f043 0304 	orr.w	r3, r3, #4
 8001198:	672b      	str	r3, [r5, #112]	; 0x70
 800119a:	e7d0      	b.n	800113e <HAL_RCC_OscConfig+0x1f2>
 800119c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800119e:	f022 0201 	bic.w	r2, r2, #1
 80011a2:	672a      	str	r2, [r5, #112]	; 0x70
 80011a4:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80011a6:	f022 0204 	bic.w	r2, r2, #4
 80011aa:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d1ca      	bne.n	8001146 <HAL_RCC_OscConfig+0x1fa>
      tickstart = HAL_GetTick();
 80011b0:	f002 fa24 	bl	80035fc <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011b4:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80011b8:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011ba:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80011bc:	0798      	lsls	r0, r3, #30
 80011be:	d5cb      	bpl.n	8001158 <HAL_RCC_OscConfig+0x20c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011c0:	f002 fa1c 	bl	80035fc <HAL_GetTick>
 80011c4:	1bc0      	subs	r0, r0, r7
 80011c6:	4540      	cmp	r0, r8
 80011c8:	d9f7      	bls.n	80011ba <HAL_RCC_OscConfig+0x26e>
 80011ca:	e70c      	b.n	8000fe6 <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011cc:	f002 fa16 	bl	80035fc <HAL_GetTick>
 80011d0:	1bc0      	subs	r0, r0, r7
 80011d2:	4540      	cmp	r0, r8
 80011d4:	d9bd      	bls.n	8001152 <HAL_RCC_OscConfig+0x206>
 80011d6:	e706      	b.n	8000fe6 <HAL_RCC_OscConfig+0x9a>
 80011d8:	40023800 	.word	0x40023800
 80011dc:	42470000 	.word	0x42470000
 80011e0:	42470e80 	.word	0x42470e80
 80011e4:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80011e8:	4d23      	ldr	r5, [pc, #140]	; (8001278 <HAL_RCC_OscConfig+0x32c>)
 80011ea:	68ab      	ldr	r3, [r5, #8]
 80011ec:	f003 030c 	and.w	r3, r3, #12
 80011f0:	2b08      	cmp	r3, #8
 80011f2:	f43f aee0 	beq.w	8000fb6 <HAL_RCC_OscConfig+0x6a>
 80011f6:	4e21      	ldr	r6, [pc, #132]	; (800127c <HAL_RCC_OscConfig+0x330>)
 80011f8:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011fa:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80011fc:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011fe:	d12d      	bne.n	800125c <HAL_RCC_OscConfig+0x310>
        tickstart = HAL_GetTick();
 8001200:	f002 f9fc 	bl	80035fc <HAL_GetTick>
 8001204:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001206:	682b      	ldr	r3, [r5, #0]
 8001208:	0199      	lsls	r1, r3, #6
 800120a:	d421      	bmi.n	8001250 <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800120c:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8001210:	4313      	orrs	r3, r2
 8001212:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001214:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001218:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800121a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800121e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001220:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001224:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001226:	4c14      	ldr	r4, [pc, #80]	; (8001278 <HAL_RCC_OscConfig+0x32c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001228:	0852      	lsrs	r2, r2, #1
 800122a:	3a01      	subs	r2, #1
 800122c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001230:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001232:	2301      	movs	r3, #1
 8001234:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001236:	f002 f9e1 	bl	80035fc <HAL_GetTick>
 800123a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800123c:	6823      	ldr	r3, [r4, #0]
 800123e:	019a      	lsls	r2, r3, #6
 8001240:	f53f ae99 	bmi.w	8000f76 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001244:	f002 f9da 	bl	80035fc <HAL_GetTick>
 8001248:	1b40      	subs	r0, r0, r5
 800124a:	2802      	cmp	r0, #2
 800124c:	d9f6      	bls.n	800123c <HAL_RCC_OscConfig+0x2f0>
 800124e:	e6ca      	b.n	8000fe6 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001250:	f002 f9d4 	bl	80035fc <HAL_GetTick>
 8001254:	1bc0      	subs	r0, r0, r7
 8001256:	2802      	cmp	r0, #2
 8001258:	d9d5      	bls.n	8001206 <HAL_RCC_OscConfig+0x2ba>
 800125a:	e6c4      	b.n	8000fe6 <HAL_RCC_OscConfig+0x9a>
        tickstart = HAL_GetTick();
 800125c:	f002 f9ce 	bl	80035fc <HAL_GetTick>
 8001260:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001262:	682b      	ldr	r3, [r5, #0]
 8001264:	019b      	lsls	r3, r3, #6
 8001266:	f57f ae86 	bpl.w	8000f76 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800126a:	f002 f9c7 	bl	80035fc <HAL_GetTick>
 800126e:	1b00      	subs	r0, r0, r4
 8001270:	2802      	cmp	r0, #2
 8001272:	d9f6      	bls.n	8001262 <HAL_RCC_OscConfig+0x316>
 8001274:	e6b7      	b.n	8000fe6 <HAL_RCC_OscConfig+0x9a>
 8001276:	bf00      	nop
 8001278:	40023800 	.word	0x40023800
 800127c:	42470060 	.word	0x42470060

08001280 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001280:	6802      	ldr	r2, [r0, #0]
{
 8001282:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001284:	68d3      	ldr	r3, [r2, #12]
 8001286:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800128a:	60d3      	str	r3, [r2, #12]
{
 800128c:	4604      	mov	r4, r0

    /* Get tick */
    tickstart = HAL_GetTick();
 800128e:	f002 f9b5 	bl	80035fc <HAL_GetTick>
 8001292:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8001294:	6823      	ldr	r3, [r4, #0]
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	069b      	lsls	r3, r3, #26
 800129a:	d501      	bpl.n	80012a0 <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 800129c:	2000      	movs	r0, #0
}
 800129e:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80012a0:	f002 f9ac 	bl	80035fc <HAL_GetTick>
 80012a4:	1b40      	subs	r0, r0, r5
 80012a6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80012aa:	d9f3      	bls.n	8001294 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 80012ac:	2003      	movs	r0, #3
 80012ae:	e7f6      	b.n	800129e <HAL_RTC_WaitForSynchro+0x1e>

080012b0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80012b0:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80012b2:	6803      	ldr	r3, [r0, #0]
 80012b4:	68da      	ldr	r2, [r3, #12]
 80012b6:	0652      	lsls	r2, r2, #25
{
 80012b8:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80012ba:	d501      	bpl.n	80012c0 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80012bc:	2000      	movs	r0, #0
}
 80012be:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80012c0:	f04f 32ff 	mov.w	r2, #4294967295
 80012c4:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80012c6:	f002 f999 	bl	80035fc <HAL_GetTick>
 80012ca:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80012cc:	6823      	ldr	r3, [r4, #0]
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	065b      	lsls	r3, r3, #25
 80012d2:	d4f3      	bmi.n	80012bc <RTC_EnterInitMode+0xc>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80012d4:	f002 f992 	bl	80035fc <HAL_GetTick>
 80012d8:	1b40      	subs	r0, r0, r5
 80012da:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80012de:	d9f5      	bls.n	80012cc <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 80012e0:	2003      	movs	r0, #3
 80012e2:	e7ec      	b.n	80012be <RTC_EnterInitMode+0xe>

080012e4 <HAL_RTC_Init>:
{
 80012e4:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 80012e6:	4604      	mov	r4, r0
 80012e8:	b1b8      	cbz	r0, 800131a <HAL_RTC_Init+0x36>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80012ea:	7f43      	ldrb	r3, [r0, #29]
 80012ec:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80012f0:	b913      	cbnz	r3, 80012f8 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 80012f2:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 80012f4:	f002 f860 	bl	80033b8 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80012f8:	2302      	movs	r3, #2
 80012fa:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80012fc:	6823      	ldr	r3, [r4, #0]
 80012fe:	22ca      	movs	r2, #202	; 0xca
 8001300:	625a      	str	r2, [r3, #36]	; 0x24
 8001302:	2253      	movs	r2, #83	; 0x53
 8001304:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001306:	4620      	mov	r0, r4
 8001308:	f7ff ffd2 	bl	80012b0 <RTC_EnterInitMode>
 800130c:	6823      	ldr	r3, [r4, #0]
 800130e:	4605      	mov	r5, r0
 8001310:	b128      	cbz	r0, 800131e <HAL_RTC_Init+0x3a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001312:	22ff      	movs	r2, #255	; 0xff
 8001314:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001316:	2304      	movs	r3, #4
 8001318:	7763      	strb	r3, [r4, #29]
     return HAL_ERROR;
 800131a:	2501      	movs	r5, #1
 800131c:	e02e      	b.n	800137c <HAL_RTC_Init+0x98>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800131e:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001320:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001322:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8001326:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800132a:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800132c:	6862      	ldr	r2, [r4, #4]
 800132e:	6899      	ldr	r1, [r3, #8]
 8001330:	4302      	orrs	r2, r0
 8001332:	6960      	ldr	r0, [r4, #20]
 8001334:	4302      	orrs	r2, r0
 8001336:	430a      	orrs	r2, r1
 8001338:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800133a:	68e2      	ldr	r2, [r4, #12]
 800133c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800133e:	691a      	ldr	r2, [r3, #16]
 8001340:	68a1      	ldr	r1, [r4, #8]
 8001342:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001346:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8001348:	68da      	ldr	r2, [r3, #12]
 800134a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800134e:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	069b      	lsls	r3, r3, #26
 8001354:	d405      	bmi.n	8001362 <HAL_RTC_Init+0x7e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001356:	4620      	mov	r0, r4
 8001358:	f7ff ff92 	bl	8001280 <HAL_RTC_WaitForSynchro>
 800135c:	b108      	cbz	r0, 8001362 <HAL_RTC_Init+0x7e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800135e:	6823      	ldr	r3, [r4, #0]
 8001360:	e7d7      	b.n	8001312 <HAL_RTC_Init+0x2e>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001362:	6823      	ldr	r3, [r4, #0]
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001364:	69a1      	ldr	r1, [r4, #24]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001366:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001368:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800136c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800136e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001370:	430a      	orrs	r2, r1
 8001372:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001374:	22ff      	movs	r2, #255	; 0xff
 8001376:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8001378:	2301      	movs	r3, #1
 800137a:	7763      	strb	r3, [r4, #29]
}
 800137c:	4628      	mov	r0, r5
 800137e:	bd38      	pop	{r3, r4, r5, pc}

08001380 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8001380:	2300      	movs	r3, #0

  while(Value >= 10U)
 8001382:	2809      	cmp	r0, #9
 8001384:	d803      	bhi.n	800138e <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10U;
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8001386:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 800138a:	b2c0      	uxtb	r0, r0
 800138c:	4770      	bx	lr
    Value -= 10U;
 800138e:	380a      	subs	r0, #10
    bcdhigh++;
 8001390:	3301      	adds	r3, #1
    Value -= 10U;
 8001392:	b2c0      	uxtb	r0, r0
 8001394:	e7f5      	b.n	8001382 <RTC_ByteToBcd2+0x2>

08001396 <HAL_RTC_SetTime>:
  __HAL_LOCK(hrtc);
 8001396:	7f03      	ldrb	r3, [r0, #28]
 8001398:	2b01      	cmp	r3, #1
{
 800139a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800139e:	4606      	mov	r6, r0
 80013a0:	460f      	mov	r7, r1
 80013a2:	f04f 0502 	mov.w	r5, #2
  __HAL_LOCK(hrtc);
 80013a6:	d02e      	beq.n	8001406 <HAL_RTC_SetTime+0x70>
 80013a8:	2301      	movs	r3, #1
 80013aa:	6801      	ldr	r1, [r0, #0]
 80013ac:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80013ae:	7745      	strb	r5, [r0, #29]
 80013b0:	7838      	ldrb	r0, [r7, #0]
 80013b2:	787d      	ldrb	r5, [r7, #1]
 80013b4:	78bc      	ldrb	r4, [r7, #2]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80013b6:	688b      	ldr	r3, [r1, #8]
  if(Format == RTC_FORMAT_BIN)
 80013b8:	bb42      	cbnz	r2, 800140c <HAL_RTC_SetTime+0x76>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80013ba:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sTime->TimeFormat = 0x00U;
 80013be:	bf08      	it	eq
 80013c0:	70fb      	strbeq	r3, [r7, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80013c2:	f7ff ffdd 	bl	8001380 <RTC_ByteToBcd2>
 80013c6:	4680      	mov	r8, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80013c8:	4628      	mov	r0, r5
 80013ca:	f7ff ffd9 	bl	8001380 <RTC_ByteToBcd2>
 80013ce:	4602      	mov	r2, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80013d0:	4620      	mov	r0, r4
 80013d2:	f7ff ffd5 	bl	8001380 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80013d6:	78fb      	ldrb	r3, [r7, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80013d8:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80013dc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80013e0:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80013e4:	23ca      	movs	r3, #202	; 0xca
 80013e6:	624b      	str	r3, [r1, #36]	; 0x24
 80013e8:	2353      	movs	r3, #83	; 0x53
 80013ea:	624b      	str	r3, [r1, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80013ec:	4630      	mov	r0, r6
 80013ee:	f7ff ff5f 	bl	80012b0 <RTC_EnterInitMode>
 80013f2:	6833      	ldr	r3, [r6, #0]
 80013f4:	4605      	mov	r5, r0
 80013f6:	b1b0      	cbz	r0, 8001426 <HAL_RTC_SetTime+0x90>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80013f8:	22ff      	movs	r2, #255	; 0xff
 80013fa:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80013fc:	2304      	movs	r3, #4
 80013fe:	7773      	strb	r3, [r6, #29]
    __HAL_UNLOCK(hrtc);
 8001400:	2300      	movs	r3, #0
 8001402:	7733      	strb	r3, [r6, #28]
        return HAL_ERROR;
 8001404:	2501      	movs	r5, #1
}
 8001406:	4628      	mov	r0, r5
 8001408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800140c:	f013 0340 	ands.w	r3, r3, #64	; 0x40
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001410:	ea4f 2505 	mov.w	r5, r5, lsl #8
      sTime->TimeFormat = 0x00U;
 8001414:	bf08      	it	eq
 8001416:	70fb      	strbeq	r3, [r7, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001418:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800141c:	4320      	orrs	r0, r4
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800141e:	78fc      	ldrb	r4, [r7, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001420:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8001424:	e7de      	b.n	80013e4 <HAL_RTC_SetTime+0x4e>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001426:	f004 347f 	and.w	r4, r4, #2139062143	; 0x7f7f7f7f
 800142a:	f024 44fe 	bic.w	r4, r4, #2130706432	; 0x7f000000
 800142e:	601c      	str	r4, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8001430:	689a      	ldr	r2, [r3, #8]
 8001432:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001436:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001438:	e9d7 2003 	ldrd	r2, r0, [r7, #12]
 800143c:	6899      	ldr	r1, [r3, #8]
 800143e:	4302      	orrs	r2, r0
 8001440:	430a      	orrs	r2, r1
 8001442:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8001444:	68da      	ldr	r2, [r3, #12]
 8001446:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800144a:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	069b      	lsls	r3, r3, #26
 8001450:	d40a      	bmi.n	8001468 <HAL_RTC_SetTime+0xd2>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001452:	4630      	mov	r0, r6
 8001454:	f7ff ff14 	bl	8001280 <HAL_RTC_WaitForSynchro>
 8001458:	b130      	cbz	r0, 8001468 <HAL_RTC_SetTime+0xd2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800145a:	6833      	ldr	r3, [r6, #0]
 800145c:	22ff      	movs	r2, #255	; 0xff
 800145e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001460:	2304      	movs	r3, #4
 8001462:	7773      	strb	r3, [r6, #29]
        __HAL_UNLOCK(hrtc);
 8001464:	7735      	strb	r5, [r6, #28]
 8001466:	e7cd      	b.n	8001404 <HAL_RTC_SetTime+0x6e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001468:	6833      	ldr	r3, [r6, #0]
 800146a:	22ff      	movs	r2, #255	; 0xff
 800146c:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 800146e:	2301      	movs	r3, #1
 8001470:	7773      	strb	r3, [r6, #29]
   __HAL_UNLOCK(hrtc);
 8001472:	2300      	movs	r3, #0
 8001474:	7733      	strb	r3, [r6, #28]
   return HAL_OK;
 8001476:	e7c6      	b.n	8001406 <HAL_RTC_SetTime+0x70>

08001478 <HAL_RTC_SetDate>:
{
 8001478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 800147a:	7f03      	ldrb	r3, [r0, #28]
 800147c:	2b01      	cmp	r3, #1
{
 800147e:	4606      	mov	r6, r0
 8001480:	f04f 0502 	mov.w	r5, #2
 __HAL_LOCK(hrtc);
 8001484:	d030      	beq.n	80014e8 <HAL_RTC_SetDate+0x70>
 8001486:	2301      	movs	r3, #1
 8001488:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800148a:	7745      	strb	r5, [r0, #29]
 800148c:	780d      	ldrb	r5, [r1, #0]
 800148e:	78c8      	ldrb	r0, [r1, #3]
 8001490:	784c      	ldrb	r4, [r1, #1]
 8001492:	788f      	ldrb	r7, [r1, #2]
 8001494:	036d      	lsls	r5, r5, #13
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8001496:	2a00      	cmp	r2, #0
 8001498:	d147      	bne.n	800152a <HAL_RTC_SetDate+0xb2>
 800149a:	06e2      	lsls	r2, r4, #27
 800149c:	d503      	bpl.n	80014a6 <HAL_RTC_SetDate+0x2e>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800149e:	f024 0410 	bic.w	r4, r4, #16
 80014a2:	340a      	adds	r4, #10
 80014a4:	704c      	strb	r4, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80014a6:	f7ff ff6b 	bl	8001380 <RTC_ByteToBcd2>
 80014aa:	4602      	mov	r2, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80014ac:	7848      	ldrb	r0, [r1, #1]
 80014ae:	f7ff ff67 	bl	8001380 <RTC_ByteToBcd2>
 80014b2:	4604      	mov	r4, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80014b4:	4638      	mov	r0, r7
 80014b6:	f7ff ff63 	bl	8001380 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80014ba:	4328      	orrs	r0, r5
 80014bc:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80014c0:	6833      	ldr	r3, [r6, #0]
 80014c2:	22ca      	movs	r2, #202	; 0xca
 80014c4:	625a      	str	r2, [r3, #36]	; 0x24
 80014c6:	2253      	movs	r2, #83	; 0x53
 80014c8:	625a      	str	r2, [r3, #36]	; 0x24
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80014ca:	ea40 2404 	orr.w	r4, r0, r4, lsl #8
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80014ce:	4630      	mov	r0, r6
 80014d0:	f7ff feee 	bl	80012b0 <RTC_EnterInitMode>
 80014d4:	6833      	ldr	r3, [r6, #0]
 80014d6:	4605      	mov	r5, r0
 80014d8:	b140      	cbz	r0, 80014ec <HAL_RTC_SetDate+0x74>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80014da:	22ff      	movs	r2, #255	; 0xff
 80014dc:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80014de:	2304      	movs	r3, #4
 80014e0:	7773      	strb	r3, [r6, #29]
    __HAL_UNLOCK(hrtc);
 80014e2:	2300      	movs	r3, #0
 80014e4:	7733      	strb	r3, [r6, #28]
        return HAL_ERROR;
 80014e6:	2501      	movs	r5, #1
}
 80014e8:	4628      	mov	r0, r5
 80014ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80014ec:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 80014f0:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 80014f4:	605c      	str	r4, [r3, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80014f6:	68da      	ldr	r2, [r3, #12]
 80014f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014fc:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	069b      	lsls	r3, r3, #26
 8001502:	d40a      	bmi.n	800151a <HAL_RTC_SetDate+0xa2>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001504:	4630      	mov	r0, r6
 8001506:	f7ff febb 	bl	8001280 <HAL_RTC_WaitForSynchro>
 800150a:	b130      	cbz	r0, 800151a <HAL_RTC_SetDate+0xa2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800150c:	6833      	ldr	r3, [r6, #0]
 800150e:	22ff      	movs	r2, #255	; 0xff
 8001510:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001512:	2304      	movs	r3, #4
 8001514:	7773      	strb	r3, [r6, #29]
        __HAL_UNLOCK(hrtc);
 8001516:	7735      	strb	r5, [r6, #28]
 8001518:	e7e5      	b.n	80014e6 <HAL_RTC_SetDate+0x6e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800151a:	6833      	ldr	r3, [r6, #0]
 800151c:	22ff      	movs	r2, #255	; 0xff
 800151e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8001520:	2301      	movs	r3, #1
 8001522:	7773      	strb	r3, [r6, #29]
    __HAL_UNLOCK(hrtc);
 8001524:	2300      	movs	r3, #0
 8001526:	7733      	strb	r3, [r6, #28]
    return HAL_OK;
 8001528:	e7de      	b.n	80014e8 <HAL_RTC_SetDate+0x70>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800152a:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
 800152e:	4338      	orrs	r0, r7
 8001530:	e7c6      	b.n	80014c0 <HAL_RTC_SetDate+0x48>

08001532 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8001532:	0903      	lsrs	r3, r0, #4
 8001534:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8001538:	f000 000f 	and.w	r0, r0, #15
 800153c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8001540:	b2c0      	uxtb	r0, r0
 8001542:	4770      	bx	lr

08001544 <HAL_RTC_GetTime>:
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8001544:	6803      	ldr	r3, [r0, #0]
 8001546:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001548:	6048      	str	r0, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800154a:	6918      	ldr	r0, [r3, #16]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8001552:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
{
 8001556:	b570      	push	{r4, r5, r6, lr}
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8001558:	f3c0 000e 	ubfx	r0, r0, #0, #15
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800155c:	0c1d      	lsrs	r5, r3, #16
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800155e:	6088      	str	r0, [r1, #8]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8001560:	f3c3 2606 	ubfx	r6, r3, #8, #7
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8001564:	f005 003f 	and.w	r0, r5, #63	; 0x3f
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8001568:	b2dc      	uxtb	r4, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800156a:	f005 0540 	and.w	r5, r5, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800156e:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8001570:	704e      	strb	r6, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8001572:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8001574:	70cd      	strb	r5, [r1, #3]
  if(Format == RTC_FORMAT_BIN)
 8001576:	b952      	cbnz	r2, 800158e <HAL_RTC_GetTime+0x4a>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8001578:	f7ff ffdb 	bl	8001532 <RTC_Bcd2ToByte>
 800157c:	7008      	strb	r0, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800157e:	4630      	mov	r0, r6
 8001580:	f7ff ffd7 	bl	8001532 <RTC_Bcd2ToByte>
 8001584:	7048      	strb	r0, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8001586:	4620      	mov	r0, r4
 8001588:	f7ff ffd3 	bl	8001532 <RTC_Bcd2ToByte>
 800158c:	7088      	strb	r0, [r1, #2]
}
 800158e:	2000      	movs	r0, #0
 8001590:	bd70      	pop	{r4, r5, r6, pc}

08001592 <HAL_RTC_GetDate>:
{
 8001592:	b538      	push	{r3, r4, r5, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8001594:	6803      	ldr	r3, [r0, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800159c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80015a0:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80015a2:	f3c3 2504 	ubfx	r5, r3, #8, #5
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80015a6:	b2dc      	uxtb	r4, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80015a8:	f3c3 3342 	ubfx	r3, r3, #13, #3
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80015ac:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80015ae:	704d      	strb	r5, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80015b0:	708c      	strb	r4, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80015b2:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 80015b4:	b952      	cbnz	r2, 80015cc <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80015b6:	f7ff ffbc 	bl	8001532 <RTC_Bcd2ToByte>
 80015ba:	70c8      	strb	r0, [r1, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80015bc:	4628      	mov	r0, r5
 80015be:	f7ff ffb8 	bl	8001532 <RTC_Bcd2ToByte>
 80015c2:	7048      	strb	r0, [r1, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80015c4:	4620      	mov	r0, r4
 80015c6:	f7ff ffb4 	bl	8001532 <RTC_Bcd2ToByte>
 80015ca:	7088      	strb	r0, [r1, #2]
}
 80015cc:	2000      	movs	r0, #0
 80015ce:	bd38      	pop	{r3, r4, r5, pc}

080015d0 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80015d0:	6803      	ldr	r3, [r0, #0]
 80015d2:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80015d4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 80015d8:	4770      	bx	lr

080015da <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80015da:	6803      	ldr	r3, [r0, #0]
 80015dc:	68da      	ldr	r2, [r3, #12]
 80015de:	f042 0201 	orr.w	r2, r2, #1
 80015e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80015e4:	689a      	ldr	r2, [r3, #8]
 80015e6:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80015ea:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 80015ec:	bf1e      	ittt	ne
 80015ee:	681a      	ldrne	r2, [r3, #0]
 80015f0:	f042 0201 	orrne.w	r2, r2, #1
 80015f4:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 80015f6:	2000      	movs	r0, #0
 80015f8:	4770      	bx	lr

080015fa <HAL_TIM_OC_DelayElapsedCallback>:
 80015fa:	4770      	bx	lr

080015fc <HAL_TIM_IC_CaptureCallback>:
 80015fc:	4770      	bx	lr

080015fe <HAL_TIM_PWM_PulseFinishedCallback>:
 80015fe:	4770      	bx	lr

08001600 <HAL_TIM_TriggerCallback>:
 8001600:	4770      	bx	lr

08001602 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001602:	6803      	ldr	r3, [r0, #0]
 8001604:	691a      	ldr	r2, [r3, #16]
 8001606:	0791      	lsls	r1, r2, #30
{
 8001608:	b510      	push	{r4, lr}
 800160a:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800160c:	d50e      	bpl.n	800162c <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800160e:	68da      	ldr	r2, [r3, #12]
 8001610:	0792      	lsls	r2, r2, #30
 8001612:	d50b      	bpl.n	800162c <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001614:	f06f 0202 	mvn.w	r2, #2
 8001618:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800161a:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800161c:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800161e:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001620:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001622:	d077      	beq.n	8001714 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001624:	f7ff ffea 	bl	80015fc <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001628:	2300      	movs	r3, #0
 800162a:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800162c:	6823      	ldr	r3, [r4, #0]
 800162e:	691a      	ldr	r2, [r3, #16]
 8001630:	0750      	lsls	r0, r2, #29
 8001632:	d510      	bpl.n	8001656 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001634:	68da      	ldr	r2, [r3, #12]
 8001636:	0751      	lsls	r1, r2, #29
 8001638:	d50d      	bpl.n	8001656 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800163a:	f06f 0204 	mvn.w	r2, #4
 800163e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001640:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001642:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001644:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001648:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800164a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800164c:	d068      	beq.n	8001720 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 800164e:	f7ff ffd5 	bl	80015fc <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001652:	2300      	movs	r3, #0
 8001654:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001656:	6823      	ldr	r3, [r4, #0]
 8001658:	691a      	ldr	r2, [r3, #16]
 800165a:	0712      	lsls	r2, r2, #28
 800165c:	d50f      	bpl.n	800167e <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800165e:	68da      	ldr	r2, [r3, #12]
 8001660:	0710      	lsls	r0, r2, #28
 8001662:	d50c      	bpl.n	800167e <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001664:	f06f 0208 	mvn.w	r2, #8
 8001668:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800166a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800166c:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800166e:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001670:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001672:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001674:	d05a      	beq.n	800172c <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001676:	f7ff ffc1 	bl	80015fc <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800167a:	2300      	movs	r3, #0
 800167c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800167e:	6823      	ldr	r3, [r4, #0]
 8001680:	691a      	ldr	r2, [r3, #16]
 8001682:	06d2      	lsls	r2, r2, #27
 8001684:	d510      	bpl.n	80016a8 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001686:	68da      	ldr	r2, [r3, #12]
 8001688:	06d0      	lsls	r0, r2, #27
 800168a:	d50d      	bpl.n	80016a8 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800168c:	f06f 0210 	mvn.w	r2, #16
 8001690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001692:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001694:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001696:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800169a:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800169c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800169e:	d04b      	beq.n	8001738 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80016a0:	f7ff ffac 	bl	80015fc <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016a4:	2300      	movs	r3, #0
 80016a6:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80016a8:	6823      	ldr	r3, [r4, #0]
 80016aa:	691a      	ldr	r2, [r3, #16]
 80016ac:	07d1      	lsls	r1, r2, #31
 80016ae:	d508      	bpl.n	80016c2 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80016b0:	68da      	ldr	r2, [r3, #12]
 80016b2:	07d2      	lsls	r2, r2, #31
 80016b4:	d505      	bpl.n	80016c2 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80016b6:	f06f 0201 	mvn.w	r2, #1
 80016ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80016bc:	4620      	mov	r0, r4
 80016be:	f001 fdbb 	bl	8003238 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80016c2:	6823      	ldr	r3, [r4, #0]
 80016c4:	691a      	ldr	r2, [r3, #16]
 80016c6:	0610      	lsls	r0, r2, #24
 80016c8:	d508      	bpl.n	80016dc <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80016ca:	68da      	ldr	r2, [r3, #12]
 80016cc:	0611      	lsls	r1, r2, #24
 80016ce:	d505      	bpl.n	80016dc <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80016d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80016d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80016d6:	4620      	mov	r0, r4
 80016d8:	f000 f8d5 	bl	8001886 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80016dc:	6823      	ldr	r3, [r4, #0]
 80016de:	691a      	ldr	r2, [r3, #16]
 80016e0:	0652      	lsls	r2, r2, #25
 80016e2:	d508      	bpl.n	80016f6 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80016e4:	68da      	ldr	r2, [r3, #12]
 80016e6:	0650      	lsls	r0, r2, #25
 80016e8:	d505      	bpl.n	80016f6 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80016ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80016ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80016f0:	4620      	mov	r0, r4
 80016f2:	f7ff ff85 	bl	8001600 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80016f6:	6823      	ldr	r3, [r4, #0]
 80016f8:	691a      	ldr	r2, [r3, #16]
 80016fa:	0691      	lsls	r1, r2, #26
 80016fc:	d522      	bpl.n	8001744 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80016fe:	68da      	ldr	r2, [r3, #12]
 8001700:	0692      	lsls	r2, r2, #26
 8001702:	d51f      	bpl.n	8001744 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001704:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001708:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800170a:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800170c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8001710:	f000 b8b8 	b.w	8001884 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001714:	f7ff ff71 	bl	80015fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001718:	4620      	mov	r0, r4
 800171a:	f7ff ff70 	bl	80015fe <HAL_TIM_PWM_PulseFinishedCallback>
 800171e:	e783      	b.n	8001628 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001720:	f7ff ff6b 	bl	80015fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001724:	4620      	mov	r0, r4
 8001726:	f7ff ff6a 	bl	80015fe <HAL_TIM_PWM_PulseFinishedCallback>
 800172a:	e792      	b.n	8001652 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800172c:	f7ff ff65 	bl	80015fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001730:	4620      	mov	r0, r4
 8001732:	f7ff ff64 	bl	80015fe <HAL_TIM_PWM_PulseFinishedCallback>
 8001736:	e7a0      	b.n	800167a <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001738:	f7ff ff5f 	bl	80015fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800173c:	4620      	mov	r0, r4
 800173e:	f7ff ff5e 	bl	80015fe <HAL_TIM_PWM_PulseFinishedCallback>
 8001742:	e7af      	b.n	80016a4 <HAL_TIM_IRQHandler+0xa2>
}
 8001744:	bd10      	pop	{r4, pc}
	...

08001748 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001748:	4a30      	ldr	r2, [pc, #192]	; (800180c <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800174a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800174c:	4290      	cmp	r0, r2
 800174e:	d012      	beq.n	8001776 <TIM_Base_SetConfig+0x2e>
 8001750:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001754:	d00f      	beq.n	8001776 <TIM_Base_SetConfig+0x2e>
 8001756:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800175a:	4290      	cmp	r0, r2
 800175c:	d00b      	beq.n	8001776 <TIM_Base_SetConfig+0x2e>
 800175e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001762:	4290      	cmp	r0, r2
 8001764:	d007      	beq.n	8001776 <TIM_Base_SetConfig+0x2e>
 8001766:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800176a:	4290      	cmp	r0, r2
 800176c:	d003      	beq.n	8001776 <TIM_Base_SetConfig+0x2e>
 800176e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001772:	4290      	cmp	r0, r2
 8001774:	d119      	bne.n	80017aa <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001776:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001778:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800177c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800177e:	4a23      	ldr	r2, [pc, #140]	; (800180c <TIM_Base_SetConfig+0xc4>)
 8001780:	4290      	cmp	r0, r2
 8001782:	d029      	beq.n	80017d8 <TIM_Base_SetConfig+0x90>
 8001784:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001788:	d026      	beq.n	80017d8 <TIM_Base_SetConfig+0x90>
 800178a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800178e:	4290      	cmp	r0, r2
 8001790:	d022      	beq.n	80017d8 <TIM_Base_SetConfig+0x90>
 8001792:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001796:	4290      	cmp	r0, r2
 8001798:	d01e      	beq.n	80017d8 <TIM_Base_SetConfig+0x90>
 800179a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800179e:	4290      	cmp	r0, r2
 80017a0:	d01a      	beq.n	80017d8 <TIM_Base_SetConfig+0x90>
 80017a2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80017a6:	4290      	cmp	r0, r2
 80017a8:	d016      	beq.n	80017d8 <TIM_Base_SetConfig+0x90>
 80017aa:	4a19      	ldr	r2, [pc, #100]	; (8001810 <TIM_Base_SetConfig+0xc8>)
 80017ac:	4290      	cmp	r0, r2
 80017ae:	d013      	beq.n	80017d8 <TIM_Base_SetConfig+0x90>
 80017b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017b4:	4290      	cmp	r0, r2
 80017b6:	d00f      	beq.n	80017d8 <TIM_Base_SetConfig+0x90>
 80017b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017bc:	4290      	cmp	r0, r2
 80017be:	d00b      	beq.n	80017d8 <TIM_Base_SetConfig+0x90>
 80017c0:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80017c4:	4290      	cmp	r0, r2
 80017c6:	d007      	beq.n	80017d8 <TIM_Base_SetConfig+0x90>
 80017c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017cc:	4290      	cmp	r0, r2
 80017ce:	d003      	beq.n	80017d8 <TIM_Base_SetConfig+0x90>
 80017d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017d4:	4290      	cmp	r0, r2
 80017d6:	d103      	bne.n	80017e0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017d8:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80017da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017de:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80017e0:	694a      	ldr	r2, [r1, #20]
 80017e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80017e6:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80017e8:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017ea:	688b      	ldr	r3, [r1, #8]
 80017ec:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80017ee:	680b      	ldr	r3, [r1, #0]
 80017f0:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <TIM_Base_SetConfig+0xc4>)
 80017f4:	4298      	cmp	r0, r3
 80017f6:	d003      	beq.n	8001800 <TIM_Base_SetConfig+0xb8>
 80017f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017fc:	4298      	cmp	r0, r3
 80017fe:	d101      	bne.n	8001804 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001800:	690b      	ldr	r3, [r1, #16]
 8001802:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001804:	2301      	movs	r3, #1
 8001806:	6143      	str	r3, [r0, #20]
}
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	40010000 	.word	0x40010000
 8001810:	40014000 	.word	0x40014000

08001814 <HAL_TIM_Base_Init>:
{
 8001814:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001816:	4604      	mov	r4, r0
 8001818:	b1a0      	cbz	r0, 8001844 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800181a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800181e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001822:	b91b      	cbnz	r3, 800182c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001824:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001828:	f001 fd30 	bl	800328c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800182c:	2302      	movs	r3, #2
 800182e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001832:	6820      	ldr	r0, [r4, #0]
 8001834:	1d21      	adds	r1, r4, #4
 8001836:	f7ff ff87 	bl	8001748 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800183a:	2301      	movs	r3, #1
 800183c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001840:	2000      	movs	r0, #0
}
 8001842:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001844:	2001      	movs	r0, #1
 8001846:	e7fc      	b.n	8001842 <HAL_TIM_Base_Init+0x2e>

08001848 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001848:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800184c:	2b01      	cmp	r3, #1
{
 800184e:	b530      	push	{r4, r5, lr}
 8001850:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001854:	d014      	beq.n	8001880 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001856:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001858:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 800185c:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800185e:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001860:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001862:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001864:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001868:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800186c:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800186e:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001870:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001872:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001874:	2301      	movs	r3, #1
 8001876:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800187a:	2300      	movs	r3, #0
 800187c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001880:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001882:	bd30      	pop	{r4, r5, pc}

08001884 <HAL_TIMEx_CommutCallback>:
 8001884:	4770      	bx	lr

08001886 <HAL_TIMEx_BreakCallback>:
 8001886:	4770      	bx	lr

08001888 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001888:	6803      	ldr	r3, [r0, #0]
 800188a:	68da      	ldr	r2, [r3, #12]
 800188c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001890:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001892:	695a      	ldr	r2, [r3, #20]
 8001894:	f022 0201 	bic.w	r2, r2, #1
 8001898:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800189a:	2320      	movs	r3, #32
 800189c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 80018a0:	4770      	bx	lr
	...

080018a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80018a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80018a8:	6803      	ldr	r3, [r0, #0]
 80018aa:	68c1      	ldr	r1, [r0, #12]
 80018ac:	691a      	ldr	r2, [r3, #16]
{
 80018ae:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80018b0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80018b4:	430a      	orrs	r2, r1
 80018b6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80018b8:	6925      	ldr	r5, [r4, #16]
 80018ba:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 80018bc:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80018be:	69c0      	ldr	r0, [r0, #28]
 80018c0:	432a      	orrs	r2, r5
 80018c2:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80018c4:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80018c8:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 80018ca:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80018ce:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80018d0:	430a      	orrs	r2, r1
 80018d2:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80018d4:	695a      	ldr	r2, [r3, #20]
 80018d6:	69a1      	ldr	r1, [r4, #24]
 80018d8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80018dc:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80018de:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80018e2:	615a      	str	r2, [r3, #20]
 80018e4:	4a7a      	ldr	r2, [pc, #488]	; (8001ad0 <UART_SetConfig+0x22c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80018e6:	d17b      	bne.n	80019e0 <UART_SetConfig+0x13c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d003      	beq.n	80018f4 <UART_SetConfig+0x50>
 80018ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d144      	bne.n	800197e <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80018f4:	f7ff f8ac 	bl	8000a50 <HAL_RCC_GetPCLK2Freq>
 80018f8:	6867      	ldr	r7, [r4, #4]
 80018fa:	2519      	movs	r5, #25
 80018fc:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001900:	fb05 f300 	mul.w	r3, r5, r0
 8001904:	007f      	lsls	r7, r7, #1
 8001906:	fbb3 f3f7 	udiv	r3, r3, r7
 800190a:	fbb3 f3f8 	udiv	r3, r3, r8
 800190e:	011f      	lsls	r7, r3, #4
 8001910:	f7ff f89e 	bl	8000a50 <HAL_RCC_GetPCLK2Freq>
 8001914:	6863      	ldr	r3, [r4, #4]
 8001916:	4368      	muls	r0, r5
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	fbb0 f6f3 	udiv	r6, r0, r3
 800191e:	f7ff f897 	bl	8000a50 <HAL_RCC_GetPCLK2Freq>
 8001922:	6863      	ldr	r3, [r4, #4]
 8001924:	4368      	muls	r0, r5
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	fbb0 f3f3 	udiv	r3, r0, r3
 800192c:	fbb3 f3f8 	udiv	r3, r3, r8
 8001930:	fb08 6313 	mls	r3, r8, r3, r6
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	3332      	adds	r3, #50	; 0x32
 8001938:	fbb3 f3f8 	udiv	r3, r3, r8
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 8001942:	f7ff f885 	bl	8000a50 <HAL_RCC_GetPCLK2Freq>
 8001946:	6862      	ldr	r2, [r4, #4]
 8001948:	4368      	muls	r0, r5
 800194a:	0052      	lsls	r2, r2, #1
 800194c:	fbb0 f9f2 	udiv	r9, r0, r2
 8001950:	f7ff f87e 	bl	8000a50 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001954:	6863      	ldr	r3, [r4, #4]
 8001956:	6822      	ldr	r2, [r4, #0]
 8001958:	4368      	muls	r0, r5
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001960:	fbb3 f3f8 	udiv	r3, r3, r8
 8001964:	fb08 9313 	mls	r3, r8, r3, r9
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	3332      	adds	r3, #50	; 0x32
 800196c:	fbb3 f3f8 	udiv	r3, r3, r8
 8001970:	f003 0307 	and.w	r3, r3, #7
 8001974:	443b      	add	r3, r7
 8001976:	4433      	add	r3, r6
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001978:	6093      	str	r3, [r2, #8]
    }
  }
}
 800197a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800197e:	f7ff f857 	bl	8000a30 <HAL_RCC_GetPCLK1Freq>
 8001982:	6867      	ldr	r7, [r4, #4]
 8001984:	2519      	movs	r5, #25
 8001986:	f04f 0864 	mov.w	r8, #100	; 0x64
 800198a:	fb05 f300 	mul.w	r3, r5, r0
 800198e:	007f      	lsls	r7, r7, #1
 8001990:	fbb3 f3f7 	udiv	r3, r3, r7
 8001994:	fbb3 f3f8 	udiv	r3, r3, r8
 8001998:	011f      	lsls	r7, r3, #4
 800199a:	f7ff f849 	bl	8000a30 <HAL_RCC_GetPCLK1Freq>
 800199e:	6863      	ldr	r3, [r4, #4]
 80019a0:	4368      	muls	r0, r5
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	fbb0 f6f3 	udiv	r6, r0, r3
 80019a8:	f7ff f842 	bl	8000a30 <HAL_RCC_GetPCLK1Freq>
 80019ac:	6863      	ldr	r3, [r4, #4]
 80019ae:	4368      	muls	r0, r5
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80019b6:	fbb3 f3f8 	udiv	r3, r3, r8
 80019ba:	fb08 6313 	mls	r3, r8, r3, r6
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	3332      	adds	r3, #50	; 0x32
 80019c2:	fbb3 f3f8 	udiv	r3, r3, r8
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 80019cc:	f7ff f830 	bl	8000a30 <HAL_RCC_GetPCLK1Freq>
 80019d0:	6862      	ldr	r2, [r4, #4]
 80019d2:	4368      	muls	r0, r5
 80019d4:	0052      	lsls	r2, r2, #1
 80019d6:	fbb0 f9f2 	udiv	r9, r0, r2
 80019da:	f7ff f829 	bl	8000a30 <HAL_RCC_GetPCLK1Freq>
 80019de:	e7b9      	b.n	8001954 <UART_SetConfig+0xb0>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d002      	beq.n	80019ea <UART_SetConfig+0x146>
 80019e4:	4a3b      	ldr	r2, [pc, #236]	; (8001ad4 <UART_SetConfig+0x230>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d141      	bne.n	8001a6e <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80019ea:	f7ff f831 	bl	8000a50 <HAL_RCC_GetPCLK2Freq>
 80019ee:	6867      	ldr	r7, [r4, #4]
 80019f0:	2519      	movs	r5, #25
 80019f2:	f04f 0864 	mov.w	r8, #100	; 0x64
 80019f6:	fb05 f300 	mul.w	r3, r5, r0
 80019fa:	00bf      	lsls	r7, r7, #2
 80019fc:	fbb3 f3f7 	udiv	r3, r3, r7
 8001a00:	fbb3 f3f8 	udiv	r3, r3, r8
 8001a04:	011f      	lsls	r7, r3, #4
 8001a06:	f7ff f823 	bl	8000a50 <HAL_RCC_GetPCLK2Freq>
 8001a0a:	6863      	ldr	r3, [r4, #4]
 8001a0c:	4368      	muls	r0, r5
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	fbb0 f6f3 	udiv	r6, r0, r3
 8001a14:	f7ff f81c 	bl	8000a50 <HAL_RCC_GetPCLK2Freq>
 8001a18:	6863      	ldr	r3, [r4, #4]
 8001a1a:	4368      	muls	r0, r5
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a22:	fbb3 f3f8 	udiv	r3, r3, r8
 8001a26:	fb08 6313 	mls	r3, r8, r3, r6
 8001a2a:	011b      	lsls	r3, r3, #4
 8001a2c:	3332      	adds	r3, #50	; 0x32
 8001a2e:	fbb3 f3f8 	udiv	r3, r3, r8
 8001a32:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 8001a36:	f7ff f80b 	bl	8000a50 <HAL_RCC_GetPCLK2Freq>
 8001a3a:	6862      	ldr	r2, [r4, #4]
 8001a3c:	4368      	muls	r0, r5
 8001a3e:	0092      	lsls	r2, r2, #2
 8001a40:	fbb0 f9f2 	udiv	r9, r0, r2
 8001a44:	f7ff f804 	bl	8000a50 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001a48:	6863      	ldr	r3, [r4, #4]
 8001a4a:	6822      	ldr	r2, [r4, #0]
 8001a4c:	4368      	muls	r0, r5
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a54:	fbb3 f3f8 	udiv	r3, r3, r8
 8001a58:	fb08 9313 	mls	r3, r8, r3, r9
 8001a5c:	011b      	lsls	r3, r3, #4
 8001a5e:	3332      	adds	r3, #50	; 0x32
 8001a60:	fbb3 f3f8 	udiv	r3, r3, r8
 8001a64:	f003 030f 	and.w	r3, r3, #15
 8001a68:	4333      	orrs	r3, r6
 8001a6a:	443b      	add	r3, r7
 8001a6c:	e784      	b.n	8001978 <UART_SetConfig+0xd4>
 8001a6e:	f7fe ffdf 	bl	8000a30 <HAL_RCC_GetPCLK1Freq>
 8001a72:	6867      	ldr	r7, [r4, #4]
 8001a74:	2519      	movs	r5, #25
 8001a76:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001a7a:	fb05 f300 	mul.w	r3, r5, r0
 8001a7e:	00bf      	lsls	r7, r7, #2
 8001a80:	fbb3 f3f7 	udiv	r3, r3, r7
 8001a84:	fbb3 f3f8 	udiv	r3, r3, r8
 8001a88:	011f      	lsls	r7, r3, #4
 8001a8a:	f7fe ffd1 	bl	8000a30 <HAL_RCC_GetPCLK1Freq>
 8001a8e:	6863      	ldr	r3, [r4, #4]
 8001a90:	4368      	muls	r0, r5
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	fbb0 f6f3 	udiv	r6, r0, r3
 8001a98:	f7fe ffca 	bl	8000a30 <HAL_RCC_GetPCLK1Freq>
 8001a9c:	6863      	ldr	r3, [r4, #4]
 8001a9e:	4368      	muls	r0, r5
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001aa6:	fbb3 f3f8 	udiv	r3, r3, r8
 8001aaa:	fb08 6313 	mls	r3, r8, r3, r6
 8001aae:	011b      	lsls	r3, r3, #4
 8001ab0:	3332      	adds	r3, #50	; 0x32
 8001ab2:	fbb3 f3f8 	udiv	r3, r3, r8
 8001ab6:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 8001aba:	f7fe ffb9 	bl	8000a30 <HAL_RCC_GetPCLK1Freq>
 8001abe:	6862      	ldr	r2, [r4, #4]
 8001ac0:	4368      	muls	r0, r5
 8001ac2:	0092      	lsls	r2, r2, #2
 8001ac4:	fbb0 f9f2 	udiv	r9, r0, r2
 8001ac8:	f7fe ffb2 	bl	8000a30 <HAL_RCC_GetPCLK1Freq>
 8001acc:	e7bc      	b.n	8001a48 <UART_SetConfig+0x1a4>
 8001ace:	bf00      	nop
 8001ad0:	40011000 	.word	0x40011000
 8001ad4:	40011400 	.word	0x40011400

08001ad8 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ada:	4604      	mov	r4, r0
 8001adc:	460e      	mov	r6, r1
 8001ade:	4617      	mov	r7, r2
 8001ae0:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ae2:	6821      	ldr	r1, [r4, #0]
 8001ae4:	680b      	ldr	r3, [r1, #0]
 8001ae6:	ea36 0303 	bics.w	r3, r6, r3
 8001aea:	d101      	bne.n	8001af0 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001aec:	2000      	movs	r0, #0
 8001aee:	e014      	b.n	8001b1a <UART_WaitOnFlagUntilTimeout.constprop.3+0x42>
    if (Timeout != HAL_MAX_DELAY)
 8001af0:	1c6b      	adds	r3, r5, #1
 8001af2:	d0f7      	beq.n	8001ae4 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001af4:	b995      	cbnz	r5, 8001b1c <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001af6:	6823      	ldr	r3, [r4, #0]
 8001af8:	68da      	ldr	r2, [r3, #12]
 8001afa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001afe:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b00:	695a      	ldr	r2, [r3, #20]
 8001b02:	f022 0201 	bic.w	r2, r2, #1
 8001b06:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001b08:	2320      	movs	r3, #32
 8001b0a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001b0e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001b12:	2300      	movs	r3, #0
 8001b14:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001b18:	2003      	movs	r0, #3
}
 8001b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001b1c:	f001 fd6e 	bl	80035fc <HAL_GetTick>
 8001b20:	1bc0      	subs	r0, r0, r7
 8001b22:	4285      	cmp	r5, r0
 8001b24:	d2dd      	bcs.n	8001ae2 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001b26:	e7e6      	b.n	8001af6 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001b28 <HAL_UART_Init>:
{
 8001b28:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001b2a:	4604      	mov	r4, r0
 8001b2c:	b340      	cbz	r0, 8001b80 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001b2e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001b32:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001b36:	b91b      	cbnz	r3, 8001b40 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001b38:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001b3c:	f001 fbc8 	bl	80032d0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001b40:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001b42:	2324      	movs	r3, #36	; 0x24
 8001b44:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001b48:	68d3      	ldr	r3, [r2, #12]
 8001b4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001b4e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001b50:	4620      	mov	r0, r4
 8001b52:	f7ff fea7 	bl	80018a4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b56:	6823      	ldr	r3, [r4, #0]
 8001b58:	691a      	ldr	r2, [r3, #16]
 8001b5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b5e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b60:	695a      	ldr	r2, [r3, #20]
 8001b62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b66:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001b68:	68da      	ldr	r2, [r3, #12]
 8001b6a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b6e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b70:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001b72:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b74:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001b76:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001b7a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8001b7e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001b80:	2001      	movs	r0, #1
 8001b82:	e7fc      	b.n	8001b7e <HAL_UART_Init+0x56>

08001b84 <HAL_UART_Transmit>:
{
 8001b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b88:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001b8a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001b8e:	2b20      	cmp	r3, #32
{
 8001b90:	4604      	mov	r4, r0
 8001b92:	460d      	mov	r5, r1
 8001b94:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001b96:	d14d      	bne.n	8001c34 <HAL_UART_Transmit+0xb0>
    if ((pData == NULL) || (Size == 0U))
 8001b98:	2900      	cmp	r1, #0
 8001b9a:	d049      	beq.n	8001c30 <HAL_UART_Transmit+0xac>
 8001b9c:	2a00      	cmp	r2, #0
 8001b9e:	d047      	beq.n	8001c30 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8001ba0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d045      	beq.n	8001c34 <HAL_UART_Transmit+0xb0>
 8001ba8:	2301      	movs	r3, #1
 8001baa:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001bb2:	2321      	movs	r3, #33	; 0x21
 8001bb4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001bb8:	f001 fd20 	bl	80035fc <HAL_GetTick>
    huart->TxXferSize = Size;
 8001bbc:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8001bc0:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001bc2:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001bc6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	b963      	cbnz	r3, 8001be6 <HAL_UART_Transmit+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001bcc:	463b      	mov	r3, r7
 8001bce:	4632      	mov	r2, r6
 8001bd0:	2140      	movs	r1, #64	; 0x40
 8001bd2:	4620      	mov	r0, r4
 8001bd4:	f7ff ff80 	bl	8001ad8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001bd8:	b9a8      	cbnz	r0, 8001c06 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8001bda:	2320      	movs	r3, #32
 8001bdc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8001be0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8001be4:	e010      	b.n	8001c08 <HAL_UART_Transmit+0x84>
      huart->TxXferCount--;
 8001be6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001be8:	3b01      	subs	r3, #1
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001bee:	68a3      	ldr	r3, [r4, #8]
 8001bf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001bf4:	4632      	mov	r2, r6
 8001bf6:	463b      	mov	r3, r7
 8001bf8:	f04f 0180 	mov.w	r1, #128	; 0x80
 8001bfc:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001bfe:	d10e      	bne.n	8001c1e <HAL_UART_Transmit+0x9a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c00:	f7ff ff6a 	bl	8001ad8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001c04:	b110      	cbz	r0, 8001c0c <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8001c06:	2003      	movs	r0, #3
}
 8001c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001c0c:	882b      	ldrh	r3, [r5, #0]
 8001c0e:	6822      	ldr	r2, [r4, #0]
 8001c10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c14:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001c16:	6923      	ldr	r3, [r4, #16]
 8001c18:	b943      	cbnz	r3, 8001c2c <HAL_UART_Transmit+0xa8>
          pData += 2U;
 8001c1a:	3502      	adds	r5, #2
 8001c1c:	e7d3      	b.n	8001bc6 <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c1e:	f7ff ff5b 	bl	8001ad8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001c22:	2800      	cmp	r0, #0
 8001c24:	d1ef      	bne.n	8001c06 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001c26:	6823      	ldr	r3, [r4, #0]
 8001c28:	782a      	ldrb	r2, [r5, #0]
 8001c2a:	605a      	str	r2, [r3, #4]
 8001c2c:	3501      	adds	r5, #1
 8001c2e:	e7ca      	b.n	8001bc6 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001c30:	2001      	movs	r0, #1
 8001c32:	e7e9      	b.n	8001c08 <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 8001c34:	2002      	movs	r0, #2
 8001c36:	e7e7      	b.n	8001c08 <HAL_UART_Transmit+0x84>

08001c38 <HAL_UART_Receive>:
{
 8001c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c3c:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8001c3e:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001c42:	2b20      	cmp	r3, #32
{
 8001c44:	4604      	mov	r4, r0
 8001c46:	460d      	mov	r5, r1
 8001c48:	4690      	mov	r8, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8001c4a:	d153      	bne.n	8001cf4 <HAL_UART_Receive+0xbc>
    if ((pData == NULL) || (Size == 0U))
 8001c4c:	2900      	cmp	r1, #0
 8001c4e:	d04f      	beq.n	8001cf0 <HAL_UART_Receive+0xb8>
 8001c50:	2a00      	cmp	r2, #0
 8001c52:	d04d      	beq.n	8001cf0 <HAL_UART_Receive+0xb8>
    __HAL_LOCK(huart);
 8001c54:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d04b      	beq.n	8001cf4 <HAL_UART_Receive+0xbc>
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c62:	2300      	movs	r3, #0
 8001c64:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001c66:	2322      	movs	r3, #34	; 0x22
 8001c68:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 8001c6c:	f001 fcc6 	bl	80035fc <HAL_GetTick>
    huart->RxXferSize = Size;
 8001c70:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    tickstart = HAL_GetTick();
 8001c74:	4606      	mov	r6, r0
    huart->RxXferCount = Size;
 8001c76:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001c7a:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8001c7c:	b280      	uxth	r0, r0
 8001c7e:	b928      	cbnz	r0, 8001c8c <HAL_UART_Receive+0x54>
    huart->RxState = HAL_UART_STATE_READY;
 8001c80:	2320      	movs	r3, #32
 8001c82:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    __HAL_UNLOCK(huart);
 8001c86:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8001c8a:	e010      	b.n	8001cae <HAL_UART_Receive+0x76>
      huart->RxXferCount--;
 8001c8c:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001c94:	68a3      	ldr	r3, [r4, #8]
 8001c96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001c9a:	4632      	mov	r2, r6
 8001c9c:	463b      	mov	r3, r7
 8001c9e:	f04f 0120 	mov.w	r1, #32
 8001ca2:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001ca4:	d116      	bne.n	8001cd4 <HAL_UART_Receive+0x9c>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001ca6:	f7ff ff17 	bl	8001ad8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001caa:	b110      	cbz	r0, 8001cb2 <HAL_UART_Receive+0x7a>
          return HAL_TIMEOUT;
 8001cac:	2003      	movs	r0, #3
}
 8001cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001cb2:	6922      	ldr	r2, [r4, #16]
 8001cb4:	6823      	ldr	r3, [r4, #0]
 8001cb6:	b93a      	cbnz	r2, 8001cc8 <HAL_UART_Receive+0x90>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001cb8:	685a      	ldr	r2, [r3, #4]
 8001cba:	462b      	mov	r3, r5
 8001cbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001cc0:	f823 2b02 	strh.w	r2, [r3], #2
{
 8001cc4:	461d      	mov	r5, r3
 8001cc6:	e7d8      	b.n	8001c7a <HAL_UART_Receive+0x42>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001cc8:	685a      	ldr	r2, [r3, #4]
 8001cca:	462b      	mov	r3, r5
 8001ccc:	b2d2      	uxtb	r2, r2
 8001cce:	f823 2b01 	strh.w	r2, [r3], #1
 8001cd2:	e7f7      	b.n	8001cc4 <HAL_UART_Receive+0x8c>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001cd4:	f7ff ff00 	bl	8001ad8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001cd8:	2800      	cmp	r0, #0
 8001cda:	d1e7      	bne.n	8001cac <HAL_UART_Receive+0x74>
 8001cdc:	6822      	ldr	r2, [r4, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001cde:	6921      	ldr	r1, [r4, #16]
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001ce0:	6852      	ldr	r2, [r2, #4]
 8001ce2:	1c6b      	adds	r3, r5, #1
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001ce4:	b909      	cbnz	r1, 8001cea <HAL_UART_Receive+0xb2>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001ce6:	702a      	strb	r2, [r5, #0]
 8001ce8:	e7ec      	b.n	8001cc4 <HAL_UART_Receive+0x8c>
 8001cea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001cee:	e7fa      	b.n	8001ce6 <HAL_UART_Receive+0xae>
      return  HAL_ERROR;
 8001cf0:	2001      	movs	r0, #1
 8001cf2:	e7dc      	b.n	8001cae <HAL_UART_Receive+0x76>
    return HAL_BUSY;
 8001cf4:	2002      	movs	r0, #2
 8001cf6:	e7da      	b.n	8001cae <HAL_UART_Receive+0x76>

08001cf8 <HAL_UART_TxCpltCallback>:
 8001cf8:	4770      	bx	lr

08001cfa <HAL_UART_RxCpltCallback>:
 8001cfa:	4770      	bx	lr

08001cfc <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001cfc:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001d00:	2b22      	cmp	r3, #34	; 0x22
{
 8001d02:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001d04:	d133      	bne.n	8001d6e <UART_Receive_IT+0x72>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001d06:	6881      	ldr	r1, [r0, #8]
 8001d08:	6904      	ldr	r4, [r0, #16]
 8001d0a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001d0c:	6802      	ldr	r2, [r0, #0]
 8001d0e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8001d12:	d123      	bne.n	8001d5c <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001d14:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001d16:	b9ec      	cbnz	r4, 8001d54 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001d18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d1c:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8001d20:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8001d22:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8001d24:	3c01      	subs	r4, #1
 8001d26:	b2a4      	uxth	r4, r4
 8001d28:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8001d2a:	b98c      	cbnz	r4, 8001d50 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001d2c:	6803      	ldr	r3, [r0, #0]
 8001d2e:	68da      	ldr	r2, [r3, #12]
 8001d30:	f022 0220 	bic.w	r2, r2, #32
 8001d34:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001d36:	68da      	ldr	r2, [r3, #12]
 8001d38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d3c:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001d3e:	695a      	ldr	r2, [r3, #20]
 8001d40:	f022 0201 	bic.w	r2, r2, #1
 8001d44:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001d46:	2320      	movs	r3, #32
 8001d48:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8001d4c:	f7ff ffd5 	bl	8001cfa <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 8001d50:	2000      	movs	r0, #0
 8001d52:	e00d      	b.n	8001d70 <UART_Receive_IT+0x74>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001d54:	b2d2      	uxtb	r2, r2
 8001d56:	f823 2b01 	strh.w	r2, [r3], #1
 8001d5a:	e7e1      	b.n	8001d20 <UART_Receive_IT+0x24>
 8001d5c:	1c59      	adds	r1, r3, #1
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001d5e:	6852      	ldr	r2, [r2, #4]
 8001d60:	6281      	str	r1, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001d62:	b90c      	cbnz	r4, 8001d68 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001d64:	701a      	strb	r2, [r3, #0]
 8001d66:	e7dc      	b.n	8001d22 <UART_Receive_IT+0x26>
 8001d68:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d6c:	e7fa      	b.n	8001d64 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8001d6e:	2002      	movs	r0, #2
}
 8001d70:	bd10      	pop	{r4, pc}

08001d72 <HAL_UART_ErrorCallback>:
 8001d72:	4770      	bx	lr

08001d74 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001d74:	6803      	ldr	r3, [r0, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001d78:	68d9      	ldr	r1, [r3, #12]
{
 8001d7a:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8001d7c:	0716      	lsls	r6, r2, #28
{
 8001d7e:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001d80:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8001d82:	d107      	bne.n	8001d94 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d84:	0696      	lsls	r6, r2, #26
 8001d86:	d558      	bpl.n	8001e3a <HAL_UART_IRQHandler+0xc6>
 8001d88:	068d      	lsls	r5, r1, #26
 8001d8a:	d556      	bpl.n	8001e3a <HAL_UART_IRQHandler+0xc6>
}
 8001d8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8001d90:	f7ff bfb4 	b.w	8001cfc <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001d94:	f015 0501 	ands.w	r5, r5, #1
 8001d98:	d102      	bne.n	8001da0 <HAL_UART_IRQHandler+0x2c>
 8001d9a:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001d9e:	d04c      	beq.n	8001e3a <HAL_UART_IRQHandler+0xc6>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001da0:	07d3      	lsls	r3, r2, #31
 8001da2:	d505      	bpl.n	8001db0 <HAL_UART_IRQHandler+0x3c>
 8001da4:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001da6:	bf42      	ittt	mi
 8001da8:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8001daa:	f043 0301 	orrmi.w	r3, r3, #1
 8001dae:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001db0:	0750      	lsls	r0, r2, #29
 8001db2:	d504      	bpl.n	8001dbe <HAL_UART_IRQHandler+0x4a>
 8001db4:	b11d      	cbz	r5, 8001dbe <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001db6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001db8:	f043 0302 	orr.w	r3, r3, #2
 8001dbc:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001dbe:	0793      	lsls	r3, r2, #30
 8001dc0:	d504      	bpl.n	8001dcc <HAL_UART_IRQHandler+0x58>
 8001dc2:	b11d      	cbz	r5, 8001dcc <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001dc4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001dc6:	f043 0304 	orr.w	r3, r3, #4
 8001dca:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001dcc:	0716      	lsls	r6, r2, #28
 8001dce:	d504      	bpl.n	8001dda <HAL_UART_IRQHandler+0x66>
 8001dd0:	b11d      	cbz	r5, 8001dda <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001dd2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001dd4:	f043 0308 	orr.w	r3, r3, #8
 8001dd8:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001dda:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001ddc:	b343      	cbz	r3, 8001e30 <HAL_UART_IRQHandler+0xbc>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001dde:	0695      	lsls	r5, r2, #26
 8001de0:	d504      	bpl.n	8001dec <HAL_UART_IRQHandler+0x78>
 8001de2:	0688      	lsls	r0, r1, #26
 8001de4:	d502      	bpl.n	8001dec <HAL_UART_IRQHandler+0x78>
        UART_Receive_IT(huart);
 8001de6:	4620      	mov	r0, r4
 8001de8:	f7ff ff88 	bl	8001cfc <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001dec:	6823      	ldr	r3, [r4, #0]
 8001dee:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001df0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001df2:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 8001df4:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001df6:	d402      	bmi.n	8001dfe <HAL_UART_IRQHandler+0x8a>
 8001df8:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8001dfc:	d019      	beq.n	8001e32 <HAL_UART_IRQHandler+0xbe>
        UART_EndRxTransfer(huart);
 8001dfe:	f7ff fd43 	bl	8001888 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e02:	6823      	ldr	r3, [r4, #0]
 8001e04:	695a      	ldr	r2, [r3, #20]
 8001e06:	0652      	lsls	r2, r2, #25
 8001e08:	d50f      	bpl.n	8001e2a <HAL_UART_IRQHandler+0xb6>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e0a:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8001e0c:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e12:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8001e14:	b148      	cbz	r0, 8001e2a <HAL_UART_IRQHandler+0xb6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001e16:	4b26      	ldr	r3, [pc, #152]	; (8001eb0 <HAL_UART_IRQHandler+0x13c>)
 8001e18:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001e1a:	f7fe fc37 	bl	800068c <HAL_DMA_Abort_IT>
 8001e1e:	b138      	cbz	r0, 8001e30 <HAL_UART_IRQHandler+0xbc>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001e20:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8001e22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001e26:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001e28:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8001e2a:	4620      	mov	r0, r4
 8001e2c:	f7ff ffa1 	bl	8001d72 <HAL_UART_ErrorCallback>
}
 8001e30:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8001e32:	f7ff ff9e 	bl	8001d72 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e36:	63e5      	str	r5, [r4, #60]	; 0x3c
 8001e38:	e7fa      	b.n	8001e30 <HAL_UART_IRQHandler+0xbc>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001e3a:	0616      	lsls	r6, r2, #24
 8001e3c:	d528      	bpl.n	8001e90 <HAL_UART_IRQHandler+0x11c>
 8001e3e:	060d      	lsls	r5, r1, #24
 8001e40:	d526      	bpl.n	8001e90 <HAL_UART_IRQHandler+0x11c>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001e42:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001e46:	2a21      	cmp	r2, #33	; 0x21
 8001e48:	d1f2      	bne.n	8001e30 <HAL_UART_IRQHandler+0xbc>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001e4a:	68a1      	ldr	r1, [r4, #8]
 8001e4c:	6a22      	ldr	r2, [r4, #32]
 8001e4e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8001e52:	d118      	bne.n	8001e86 <HAL_UART_IRQHandler+0x112>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001e54:	8811      	ldrh	r1, [r2, #0]
 8001e56:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001e5a:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001e5c:	6921      	ldr	r1, [r4, #16]
 8001e5e:	b981      	cbnz	r1, 8001e82 <HAL_UART_IRQHandler+0x10e>
        huart->pTxBuffPtr += 2U;
 8001e60:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8001e62:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8001e64:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001e66:	3a01      	subs	r2, #1
 8001e68:	b292      	uxth	r2, r2
 8001e6a:	84e2      	strh	r2, [r4, #38]	; 0x26
 8001e6c:	2a00      	cmp	r2, #0
 8001e6e:	d1df      	bne.n	8001e30 <HAL_UART_IRQHandler+0xbc>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001e70:	68da      	ldr	r2, [r3, #12]
 8001e72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e76:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001e78:	68da      	ldr	r2, [r3, #12]
 8001e7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e7e:	60da      	str	r2, [r3, #12]
 8001e80:	e7d6      	b.n	8001e30 <HAL_UART_IRQHandler+0xbc>
        huart->pTxBuffPtr += 1U;
 8001e82:	3201      	adds	r2, #1
 8001e84:	e7ed      	b.n	8001e62 <HAL_UART_IRQHandler+0xee>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001e86:	1c51      	adds	r1, r2, #1
 8001e88:	6221      	str	r1, [r4, #32]
 8001e8a:	7812      	ldrb	r2, [r2, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	e7e9      	b.n	8001e64 <HAL_UART_IRQHandler+0xf0>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001e90:	0650      	lsls	r0, r2, #25
 8001e92:	d5cd      	bpl.n	8001e30 <HAL_UART_IRQHandler+0xbc>
 8001e94:	064a      	lsls	r2, r1, #25
 8001e96:	d5cb      	bpl.n	8001e30 <HAL_UART_IRQHandler+0xbc>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001e98:	68da      	ldr	r2, [r3, #12]
 8001e9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e9e:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001ea0:	2320      	movs	r3, #32
 8001ea2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001ea6:	4620      	mov	r0, r4
 8001ea8:	f7ff ff26 	bl	8001cf8 <HAL_UART_TxCpltCallback>
 8001eac:	e7c0      	b.n	8001e30 <HAL_UART_IRQHandler+0xbc>
 8001eae:	bf00      	nop
 8001eb0:	08001eb5 	.word	0x08001eb5

08001eb4 <UART_DMAAbortOnError>:
{
 8001eb4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001eb6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001ebc:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8001ebe:	f7ff ff58 	bl	8001d72 <HAL_UART_ErrorCallback>
}
 8001ec2:	bd08      	pop	{r3, pc}

08001ec4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001ec4:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8001ec6:	f000 fa3b 	bl	8002340 <vTaskStartScheduler>
  
  return osOK;
}
 8001eca:	2000      	movs	r0, #0
 8001ecc:	bd08      	pop	{r3, pc}

08001ece <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001ece:	b570      	push	{r4, r5, r6, lr}
 8001ed0:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001ed2:	6946      	ldr	r6, [r0, #20]
 8001ed4:	692a      	ldr	r2, [r5, #16]
 8001ed6:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
{
 8001eda:	460b      	mov	r3, r1
 8001edc:	b086      	sub	sp, #24
 8001ede:	e9d0 1000 	ldrd	r1, r0, [r0]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001ee2:	b176      	cbz	r6, 8001f02 <osThreadCreate+0x34>
 8001ee4:	69ad      	ldr	r5, [r5, #24]
 8001ee6:	b165      	cbz	r5, 8001f02 <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 8001ee8:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8001eea:	bf14      	ite	ne
 8001eec:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001eee:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001ef0:	e9cd 6501 	strd	r6, r5, [sp, #4]
 8001ef4:	9400      	str	r4, [sp, #0]
 8001ef6:	f000 f9bf 	bl	8002278 <xTaskCreateStatic>
 8001efa:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001efc:	9805      	ldr	r0, [sp, #20]
}
 8001efe:	b006      	add	sp, #24
 8001f00:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 8001f02:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8001f04:	bf14      	ite	ne
 8001f06:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001f08:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f0a:	ad05      	add	r5, sp, #20
 8001f0c:	b292      	uxth	r2, r2
 8001f0e:	e9cd 4500 	strd	r4, r5, [sp]
 8001f12:	f000 f9e8 	bl	80022e6 <xTaskCreate>
 8001f16:	2801      	cmp	r0, #1
 8001f18:	d0f0      	beq.n	8001efc <osThreadCreate+0x2e>
      return NULL;
 8001f1a:	2000      	movs	r0, #0
 8001f1c:	e7ef      	b.n	8001efe <osThreadCreate+0x30>

08001f1e <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f1e:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001f22:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f26:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f28:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f2c:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001f32:	4770      	bx	lr

08001f34 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001f34:	2300      	movs	r3, #0
 8001f36:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001f38:	4770      	bx	lr

08001f3a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001f3a:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001f3c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001f42:	689a      	ldr	r2, [r3, #8]
 8001f44:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001f46:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001f48:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001f4a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	6003      	str	r3, [r0, #0]
}
 8001f50:	4770      	bx	lr

08001f52 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001f52:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001f54:	1c53      	adds	r3, r2, #1
{
 8001f56:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8001f58:	d10a      	bne.n	8001f70 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001f5a:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001f5c:	685a      	ldr	r2, [r3, #4]
 8001f5e:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001f60:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001f62:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001f64:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001f66:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001f68:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	6003      	str	r3, [r0, #0]
}
 8001f6e:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f70:	f100 0308 	add.w	r3, r0, #8
 8001f74:	685c      	ldr	r4, [r3, #4]
 8001f76:	6825      	ldr	r5, [r4, #0]
 8001f78:	4295      	cmp	r5, r2
 8001f7a:	d8ef      	bhi.n	8001f5c <vListInsert+0xa>
 8001f7c:	4623      	mov	r3, r4
 8001f7e:	e7f9      	b.n	8001f74 <vListInsert+0x22>

08001f80 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001f80:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001f84:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001f86:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001f88:	6882      	ldr	r2, [r0, #8]
 8001f8a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001f8c:	6859      	ldr	r1, [r3, #4]
 8001f8e:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001f90:	bf08      	it	eq
 8001f92:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001f94:	2200      	movs	r2, #0
 8001f96:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	3a01      	subs	r2, #1
 8001f9c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001f9e:	6818      	ldr	r0, [r3, #0]
}
 8001fa0:	4770      	bx	lr
	...

08001fa4 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fa8:	4606      	mov	r6, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001faa:	f000 fbd3 	bl	8002754 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001fae:	4b2e      	ldr	r3, [pc, #184]	; (8002068 <prvAddNewTaskToReadyList+0xc4>)
		if( pxCurrentTCB == NULL )
 8001fb0:	4c2e      	ldr	r4, [pc, #184]	; (800206c <prvAddNewTaskToReadyList+0xc8>)
		uxCurrentNumberOfTasks++;
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	4f2e      	ldr	r7, [pc, #184]	; (8002070 <prvAddNewTaskToReadyList+0xcc>)
 8001fb6:	3201      	adds	r2, #1
 8001fb8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8001fba:	6825      	ldr	r5, [r4, #0]
 8001fbc:	2d00      	cmp	r5, #0
 8001fbe:	d148      	bne.n	8002052 <prvAddNewTaskToReadyList+0xae>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001fc0:	6026      	str	r6, [r4, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d11f      	bne.n	8002008 <prvAddNewTaskToReadyList+0x64>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001fc8:	f04f 0814 	mov.w	r8, #20
 8001fcc:	fb08 7005 	mla	r0, r8, r5, r7
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001fd0:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001fd2:	f7ff ffa4 	bl	8001f1e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001fd6:	2d07      	cmp	r5, #7
 8001fd8:	d1f8      	bne.n	8001fcc <prvAddNewTaskToReadyList+0x28>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001fda:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800209c <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 8001fde:	4d25      	ldr	r5, [pc, #148]	; (8002074 <prvAddNewTaskToReadyList+0xd0>)
	vListInitialise( &xDelayedTaskList1 );
 8001fe0:	4640      	mov	r0, r8
 8001fe2:	f7ff ff9c 	bl	8001f1e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001fe6:	4628      	mov	r0, r5
 8001fe8:	f7ff ff99 	bl	8001f1e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001fec:	4822      	ldr	r0, [pc, #136]	; (8002078 <prvAddNewTaskToReadyList+0xd4>)
 8001fee:	f7ff ff96 	bl	8001f1e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001ff2:	4822      	ldr	r0, [pc, #136]	; (800207c <prvAddNewTaskToReadyList+0xd8>)
 8001ff4:	f7ff ff93 	bl	8001f1e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001ff8:	4821      	ldr	r0, [pc, #132]	; (8002080 <prvAddNewTaskToReadyList+0xdc>)
 8001ffa:	f7ff ff90 	bl	8001f1e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001ffe:	4b21      	ldr	r3, [pc, #132]	; (8002084 <prvAddNewTaskToReadyList+0xe0>)
 8002000:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002004:	4b20      	ldr	r3, [pc, #128]	; (8002088 <prvAddNewTaskToReadyList+0xe4>)
 8002006:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8002008:	4a20      	ldr	r2, [pc, #128]	; (800208c <prvAddNewTaskToReadyList+0xe8>)
		prvAddTaskToReadyList( pxNewTCB );
 800200a:	4921      	ldr	r1, [pc, #132]	; (8002090 <prvAddNewTaskToReadyList+0xec>)
		uxTaskNumber++;
 800200c:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800200e:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8002010:	3301      	adds	r3, #1
 8002012:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002014:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8002016:	2301      	movs	r3, #1
 8002018:	4093      	lsls	r3, r2
 800201a:	4303      	orrs	r3, r0
 800201c:	2014      	movs	r0, #20
 800201e:	600b      	str	r3, [r1, #0]
 8002020:	fb00 7002 	mla	r0, r0, r2, r7
 8002024:	1d31      	adds	r1, r6, #4
 8002026:	f7ff ff88 	bl	8001f3a <vListInsertEnd>
	taskEXIT_CRITICAL();
 800202a:	f000 fbb5 	bl	8002798 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800202e:	4b19      	ldr	r3, [pc, #100]	; (8002094 <prvAddNewTaskToReadyList+0xf0>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	b163      	cbz	r3, 800204e <prvAddNewTaskToReadyList+0xaa>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002034:	6823      	ldr	r3, [r4, #0]
 8002036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002038:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800203a:	429a      	cmp	r2, r3
 800203c:	d207      	bcs.n	800204e <prvAddNewTaskToReadyList+0xaa>
			taskYIELD_IF_USING_PREEMPTION();
 800203e:	4b16      	ldr	r3, [pc, #88]	; (8002098 <prvAddNewTaskToReadyList+0xf4>)
 8002040:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	f3bf 8f4f 	dsb	sy
 800204a:	f3bf 8f6f 	isb	sy
}
 800204e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8002052:	4b10      	ldr	r3, [pc, #64]	; (8002094 <prvAddNewTaskToReadyList+0xf0>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1d6      	bne.n	8002008 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800205a:	6823      	ldr	r3, [r4, #0]
 800205c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800205e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8002060:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8002062:	bf98      	it	ls
 8002064:	6026      	strls	r6, [r4, #0]
 8002066:	e7cf      	b.n	8002008 <prvAddNewTaskToReadyList+0x64>
 8002068:	2000012c 	.word	0x2000012c
 800206c:	20000094 	.word	0x20000094
 8002070:	200000a0 	.word	0x200000a0
 8002074:	20000158 	.word	0x20000158
 8002078:	20000174 	.word	0x20000174
 800207c:	200001a0 	.word	0x200001a0
 8002080:	2000018c 	.word	0x2000018c
 8002084:	20000098 	.word	0x20000098
 8002088:	2000009c 	.word	0x2000009c
 800208c:	2000013c 	.word	0x2000013c
 8002090:	20000140 	.word	0x20000140
 8002094:	20000188 	.word	0x20000188
 8002098:	e000ed04 	.word	0xe000ed04
 800209c:	20000144 	.word	0x20000144

080020a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80020a0:	b510      	push	{r4, lr}
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80020a2:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
	{
 80020a6:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80020a8:	b93b      	cbnz	r3, 80020ba <prvDeleteTCB+0x1a>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80020aa:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80020ac:	f000 fd20 	bl	8002af0 <vPortFree>
				vPortFree( pxTCB );
 80020b0:	4620      	mov	r0, r4
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80020b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 80020b6:	f000 bd1b 	b.w	8002af0 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d0f9      	beq.n	80020b2 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d008      	beq.n	80020d4 <prvDeleteTCB+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80020c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020c6:	f383 8811 	msr	BASEPRI, r3
 80020ca:	f3bf 8f6f 	isb	sy
 80020ce:	f3bf 8f4f 	dsb	sy
 80020d2:	e7fe      	b.n	80020d2 <prvDeleteTCB+0x32>
	}
 80020d4:	bd10      	pop	{r4, pc}
	...

080020d8 <prvIdleTask>:
{
 80020d8:	b580      	push	{r7, lr}
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80020da:	4e14      	ldr	r6, [pc, #80]	; (800212c <prvIdleTask+0x54>)
				taskYIELD();
 80020dc:	4f14      	ldr	r7, [pc, #80]	; (8002130 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80020de:	4c15      	ldr	r4, [pc, #84]	; (8002134 <prvIdleTask+0x5c>)
				--uxCurrentNumberOfTasks;
 80020e0:	4d15      	ldr	r5, [pc, #84]	; (8002138 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80020e2:	6823      	ldr	r3, [r4, #0]
 80020e4:	b96b      	cbnz	r3, 8002102 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80020e6:	4b15      	ldr	r3, [pc, #84]	; (800213c <prvIdleTask+0x64>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d906      	bls.n	80020fc <prvIdleTask+0x24>
				taskYIELD();
 80020ee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80020f2:	603b      	str	r3, [r7, #0]
 80020f4:	f3bf 8f4f 	dsb	sy
 80020f8:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 80020fc:	f000 fd30 	bl	8002b60 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8002100:	e7ed      	b.n	80020de <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 8002102:	f000 fb27 	bl	8002754 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002106:	68f3      	ldr	r3, [r6, #12]
 8002108:	f8d3 800c 	ldr.w	r8, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800210c:	f108 0004 	add.w	r0, r8, #4
 8002110:	f7ff ff36 	bl	8001f80 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002114:	682b      	ldr	r3, [r5, #0]
 8002116:	3b01      	subs	r3, #1
 8002118:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800211a:	6823      	ldr	r3, [r4, #0]
 800211c:	3b01      	subs	r3, #1
 800211e:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8002120:	f000 fb3a 	bl	8002798 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8002124:	4640      	mov	r0, r8
 8002126:	f7ff ffbb 	bl	80020a0 <prvDeleteTCB>
 800212a:	e7da      	b.n	80020e2 <prvIdleTask+0xa>
 800212c:	200001a0 	.word	0x200001a0
 8002130:	e000ed04 	.word	0xe000ed04
 8002134:	20000130 	.word	0x20000130
 8002138:	2000012c 	.word	0x2000012c
 800213c:	200000a0 	.word	0x200000a0

08002140 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002140:	4a06      	ldr	r2, [pc, #24]	; (800215c <prvResetNextTaskUnblockTime+0x1c>)
 8002142:	6813      	ldr	r3, [r2, #0]
 8002144:	6819      	ldr	r1, [r3, #0]
 8002146:	4b06      	ldr	r3, [pc, #24]	; (8002160 <prvResetNextTaskUnblockTime+0x20>)
 8002148:	b919      	cbnz	r1, 8002152 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800214a:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800214e:	601a      	str	r2, [r3, #0]
	}
}
 8002150:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002152:	6812      	ldr	r2, [r2, #0]
 8002154:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002156:	68d2      	ldr	r2, [r2, #12]
 8002158:	6852      	ldr	r2, [r2, #4]
 800215a:	e7f8      	b.n	800214e <prvResetNextTaskUnblockTime+0xe>
 800215c:	20000098 	.word	0x20000098
 8002160:	2000016c 	.word	0x2000016c

08002164 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8002164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002168:	e9dd 7409 	ldrd	r7, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800216c:	0096      	lsls	r6, r2, #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800216e:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002170:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8002172:	4680      	mov	r8, r0
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002174:	21a5      	movs	r1, #165	; 0xa5
 8002176:	6b20      	ldr	r0, [r4, #48]	; 0x30
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8002178:	4699      	mov	r9, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800217a:	f001 feb4 	bl	8003ee6 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800217e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002180:	3e04      	subs	r6, #4
 8002182:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002184:	f026 0607 	bic.w	r6, r6, #7
 8002188:	1e6b      	subs	r3, r5, #1
 800218a:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800218e:	350f      	adds	r5, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002190:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8002194:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8002198:	7819      	ldrb	r1, [r3, #0]
 800219a:	b109      	cbz	r1, 80021a0 <prvInitialiseNewTask.isra.2+0x3c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800219c:	42ab      	cmp	r3, r5
 800219e:	d1f7      	bne.n	8002190 <prvInitialiseNewTask.isra.2+0x2c>
 80021a0:	9d08      	ldr	r5, [sp, #32]
 80021a2:	2d06      	cmp	r5, #6
 80021a4:	bf28      	it	cs
 80021a6:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80021a8:	f04f 0a00 	mov.w	sl, #0
	pxNewTCB->uxPriority = uxPriority;
 80021ac:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
 80021ae:	e9c4 5a11 	strd	r5, sl, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80021b2:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80021b4:	f884 a043 	strb.w	sl, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80021b8:	f7ff febc 	bl	8001f34 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80021bc:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80021c0:	f104 0018 	add.w	r0, r4, #24
 80021c4:	f7ff feb6 	bl	8001f34 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80021c8:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80021cc:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80021ce:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80021d0:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80021d2:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80021d6:	464a      	mov	r2, r9
 80021d8:	4641      	mov	r1, r8
 80021da:	4630      	mov	r0, r6
 80021dc:	f000 fa92 	bl	8002704 <pxPortInitialiseStack>
 80021e0:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80021e2:	b107      	cbz	r7, 80021e6 <prvInitialiseNewTask.isra.2+0x82>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80021e4:	603c      	str	r4, [r7, #0]
}
 80021e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080021ec <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80021ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80021ee:	4b1b      	ldr	r3, [pc, #108]	; (800225c <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80021f0:	4e1b      	ldr	r6, [pc, #108]	; (8002260 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 80021f2:	681c      	ldr	r4, [r3, #0]
{
 80021f4:	4605      	mov	r5, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80021f6:	6830      	ldr	r0, [r6, #0]
 80021f8:	3004      	adds	r0, #4
{
 80021fa:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80021fc:	f7ff fec0 	bl	8001f80 <uxListRemove>
 8002200:	4633      	mov	r3, r6
 8002202:	b940      	cbnz	r0, 8002216 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002204:	6831      	ldr	r1, [r6, #0]
 8002206:	4e17      	ldr	r6, [pc, #92]	; (8002264 <prvAddCurrentTaskToDelayedList+0x78>)
 8002208:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800220a:	6832      	ldr	r2, [r6, #0]
 800220c:	2001      	movs	r0, #1
 800220e:	4088      	lsls	r0, r1
 8002210:	ea22 0200 	bic.w	r2, r2, r0
 8002214:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002216:	1c6a      	adds	r2, r5, #1
 8002218:	d107      	bne.n	800222a <prvAddCurrentTaskToDelayedList+0x3e>
 800221a:	b137      	cbz	r7, 800222a <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800221c:	6819      	ldr	r1, [r3, #0]
 800221e:	4812      	ldr	r0, [pc, #72]	; (8002268 <prvAddCurrentTaskToDelayedList+0x7c>)
 8002220:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002222:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002226:	f7ff be88 	b.w	8001f3a <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	1964      	adds	r4, r4, r5
 800222e:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8002230:	d307      	bcc.n	8002242 <prvAddCurrentTaskToDelayedList+0x56>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002232:	4a0e      	ldr	r2, [pc, #56]	; (800226c <prvAddCurrentTaskToDelayedList+0x80>)
 8002234:	6810      	ldr	r0, [r2, #0]
 8002236:	6819      	ldr	r1, [r3, #0]
}
 8002238:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800223c:	3104      	adds	r1, #4
 800223e:	f7ff be88 	b.w	8001f52 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002242:	4a0b      	ldr	r2, [pc, #44]	; (8002270 <prvAddCurrentTaskToDelayedList+0x84>)
 8002244:	6810      	ldr	r0, [r2, #0]
 8002246:	6819      	ldr	r1, [r3, #0]
 8002248:	3104      	adds	r1, #4
 800224a:	f7ff fe82 	bl	8001f52 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800224e:	4b09      	ldr	r3, [pc, #36]	; (8002274 <prvAddCurrentTaskToDelayedList+0x88>)
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8002254:	bf88      	it	hi
 8002256:	601c      	strhi	r4, [r3, #0]
}
 8002258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800225a:	bf00      	nop
 800225c:	200001b4 	.word	0x200001b4
 8002260:	20000094 	.word	0x20000094
 8002264:	20000140 	.word	0x20000140
 8002268:	2000018c 	.word	0x2000018c
 800226c:	2000009c 	.word	0x2000009c
 8002270:	20000098 	.word	0x20000098
 8002274:	2000016c 	.word	0x2000016c

08002278 <xTaskCreateStatic>:
	{
 8002278:	b570      	push	{r4, r5, r6, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8002280:	b945      	cbnz	r5, 8002294 <xTaskCreateStatic+0x1c>
 8002282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002286:	f383 8811 	msr	BASEPRI, r3
 800228a:	f3bf 8f6f 	isb	sy
 800228e:	f3bf 8f4f 	dsb	sy
 8002292:	e7fe      	b.n	8002292 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8002294:	b944      	cbnz	r4, 80022a8 <xTaskCreateStatic+0x30>
 8002296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800229a:	f383 8811 	msr	BASEPRI, r3
 800229e:	f3bf 8f6f 	isb	sy
 80022a2:	f3bf 8f4f 	dsb	sy
 80022a6:	e7fe      	b.n	80022a6 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 80022a8:	2654      	movs	r6, #84	; 0x54
 80022aa:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80022ac:	9e04      	ldr	r6, [sp, #16]
 80022ae:	2e54      	cmp	r6, #84	; 0x54
 80022b0:	d008      	beq.n	80022c4 <xTaskCreateStatic+0x4c>
 80022b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022b6:	f383 8811 	msr	BASEPRI, r3
 80022ba:	f3bf 8f6f 	isb	sy
 80022be:	f3bf 8f4f 	dsb	sy
 80022c2:	e7fe      	b.n	80022c2 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80022c4:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80022c6:	2502      	movs	r5, #2
 80022c8:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80022cc:	ad05      	add	r5, sp, #20
 80022ce:	9501      	str	r5, [sp, #4]
 80022d0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80022d2:	9402      	str	r4, [sp, #8]
 80022d4:	9500      	str	r5, [sp, #0]
 80022d6:	f7ff ff45 	bl	8002164 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 80022da:	4620      	mov	r0, r4
 80022dc:	f7ff fe62 	bl	8001fa4 <prvAddNewTaskToReadyList>
	}
 80022e0:	9805      	ldr	r0, [sp, #20]
 80022e2:	b006      	add	sp, #24
 80022e4:	bd70      	pop	{r4, r5, r6, pc}

080022e6 <xTaskCreate>:
	{
 80022e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80022ea:	4607      	mov	r7, r0
 80022ec:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022ee:	0090      	lsls	r0, r2, #2
	{
 80022f0:	4688      	mov	r8, r1
 80022f2:	4616      	mov	r6, r2
 80022f4:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022f6:	f000 fb6f 	bl	80029d8 <pvPortMalloc>
			if( pxStack != NULL )
 80022fa:	4605      	mov	r5, r0
 80022fc:	b1e8      	cbz	r0, 800233a <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80022fe:	2054      	movs	r0, #84	; 0x54
 8002300:	f000 fb6a 	bl	80029d8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8002304:	4604      	mov	r4, r0
 8002306:	b1a8      	cbz	r0, 8002334 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002308:	2300      	movs	r3, #0
 800230a:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800230e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 8002310:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002312:	9301      	str	r3, [sp, #4]
 8002314:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002316:	9002      	str	r0, [sp, #8]
 8002318:	9300      	str	r3, [sp, #0]
 800231a:	4632      	mov	r2, r6
 800231c:	464b      	mov	r3, r9
 800231e:	4641      	mov	r1, r8
 8002320:	4638      	mov	r0, r7
 8002322:	f7ff ff1f 	bl	8002164 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002326:	4620      	mov	r0, r4
 8002328:	f7ff fe3c 	bl	8001fa4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800232c:	2001      	movs	r0, #1
	}
 800232e:	b005      	add	sp, #20
 8002330:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8002334:	4628      	mov	r0, r5
 8002336:	f000 fbdb 	bl	8002af0 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800233a:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 800233e:	e7f6      	b.n	800232e <xTaskCreate+0x48>

08002340 <vTaskStartScheduler>:
{
 8002340:	b510      	push	{r4, lr}
 8002342:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002344:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002346:	aa07      	add	r2, sp, #28
 8002348:	a906      	add	r1, sp, #24
 800234a:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800234c:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002350:	f000 fc08 	bl	8002b64 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002354:	9b05      	ldr	r3, [sp, #20]
 8002356:	9302      	str	r3, [sp, #8]
 8002358:	9b06      	ldr	r3, [sp, #24]
 800235a:	9a07      	ldr	r2, [sp, #28]
 800235c:	490e      	ldr	r1, [pc, #56]	; (8002398 <vTaskStartScheduler+0x58>)
 800235e:	480f      	ldr	r0, [pc, #60]	; (800239c <vTaskStartScheduler+0x5c>)
 8002360:	e9cd 4300 	strd	r4, r3, [sp]
 8002364:	4623      	mov	r3, r4
 8002366:	f7ff ff87 	bl	8002278 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800236a:	b190      	cbz	r0, 8002392 <vTaskStartScheduler+0x52>
 800236c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002370:	f383 8811 	msr	BASEPRI, r3
 8002374:	f3bf 8f6f 	isb	sy
 8002378:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800237c:	4b08      	ldr	r3, [pc, #32]	; (80023a0 <vTaskStartScheduler+0x60>)
 800237e:	f04f 32ff 	mov.w	r2, #4294967295
 8002382:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002384:	4b07      	ldr	r3, [pc, #28]	; (80023a4 <vTaskStartScheduler+0x64>)
 8002386:	2201      	movs	r2, #1
 8002388:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800238a:	4b07      	ldr	r3, [pc, #28]	; (80023a8 <vTaskStartScheduler+0x68>)
 800238c:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800238e:	f000 fa79 	bl	8002884 <xPortStartScheduler>
}
 8002392:	b008      	add	sp, #32
 8002394:	bd10      	pop	{r4, pc}
 8002396:	bf00      	nop
 8002398:	08005068 	.word	0x08005068
 800239c:	080020d9 	.word	0x080020d9
 80023a0:	2000016c 	.word	0x2000016c
 80023a4:	20000188 	.word	0x20000188
 80023a8:	200001b4 	.word	0x200001b4

080023ac <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80023ac:	4a02      	ldr	r2, [pc, #8]	; (80023b8 <vTaskSuspendAll+0xc>)
 80023ae:	6813      	ldr	r3, [r2, #0]
 80023b0:	3301      	adds	r3, #1
 80023b2:	6013      	str	r3, [r2, #0]
}
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	20000138 	.word	0x20000138

080023bc <xTaskIncrementTick>:
{
 80023bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80023c0:	4b3c      	ldr	r3, [pc, #240]	; (80024b4 <xTaskIncrementTick+0xf8>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d16e      	bne.n	80024a6 <xTaskIncrementTick+0xea>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80023c8:	4b3b      	ldr	r3, [pc, #236]	; (80024b8 <xTaskIncrementTick+0xfc>)
 80023ca:	681c      	ldr	r4, [r3, #0]
 80023cc:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 80023ce:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80023d0:	b9bc      	cbnz	r4, 8002402 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80023d2:	4b3a      	ldr	r3, [pc, #232]	; (80024bc <xTaskIncrementTick+0x100>)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	6812      	ldr	r2, [r2, #0]
 80023d8:	b142      	cbz	r2, 80023ec <xTaskIncrementTick+0x30>
 80023da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023de:	f383 8811 	msr	BASEPRI, r3
 80023e2:	f3bf 8f6f 	isb	sy
 80023e6:	f3bf 8f4f 	dsb	sy
 80023ea:	e7fe      	b.n	80023ea <xTaskIncrementTick+0x2e>
 80023ec:	4a34      	ldr	r2, [pc, #208]	; (80024c0 <xTaskIncrementTick+0x104>)
 80023ee:	6819      	ldr	r1, [r3, #0]
 80023f0:	6810      	ldr	r0, [r2, #0]
 80023f2:	6018      	str	r0, [r3, #0]
 80023f4:	6011      	str	r1, [r2, #0]
 80023f6:	4a33      	ldr	r2, [pc, #204]	; (80024c4 <xTaskIncrementTick+0x108>)
 80023f8:	6813      	ldr	r3, [r2, #0]
 80023fa:	3301      	adds	r3, #1
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	f7ff fe9f 	bl	8002140 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002402:	4d31      	ldr	r5, [pc, #196]	; (80024c8 <xTaskIncrementTick+0x10c>)
 8002404:	4f31      	ldr	r7, [pc, #196]	; (80024cc <xTaskIncrementTick+0x110>)
 8002406:	682b      	ldr	r3, [r5, #0]
 8002408:	42a3      	cmp	r3, r4
BaseType_t xSwitchRequired = pdFALSE;
 800240a:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 800240e:	d911      	bls.n	8002434 <xTaskIncrementTick+0x78>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	4b2f      	ldr	r3, [pc, #188]	; (80024d0 <xTaskIncrementTick+0x114>)
 8002414:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002416:	2214      	movs	r2, #20
 8002418:	434a      	muls	r2, r1
 800241a:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 800241c:	2a02      	cmp	r2, #2
 800241e:	bf28      	it	cs
 8002420:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8002424:	4a2b      	ldr	r2, [pc, #172]	; (80024d4 <xTaskIncrementTick+0x118>)
 8002426:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8002428:	2a00      	cmp	r2, #0
}
 800242a:	bf0c      	ite	eq
 800242c:	4658      	moveq	r0, fp
 800242e:	2001      	movne	r0, #1
 8002430:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002434:	f8df a084 	ldr.w	sl, [pc, #132]	; 80024bc <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8002438:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 80024dc <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800243c:	f8da 2000 	ldr.w	r2, [sl]
 8002440:	6812      	ldr	r2, [r2, #0]
 8002442:	b91a      	cbnz	r2, 800244c <xTaskIncrementTick+0x90>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002444:	f04f 32ff 	mov.w	r2, #4294967295
 8002448:	602a      	str	r2, [r5, #0]
					break;
 800244a:	e7e1      	b.n	8002410 <xTaskIncrementTick+0x54>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800244c:	f8da 2000 	ldr.w	r2, [sl]
 8002450:	68d2      	ldr	r2, [r2, #12]
 8002452:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002454:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8002456:	428c      	cmp	r4, r1
 8002458:	d201      	bcs.n	800245e <xTaskIncrementTick+0xa2>
						xNextTaskUnblockTime = xItemValue;
 800245a:	6029      	str	r1, [r5, #0]
						break;
 800245c:	e7d8      	b.n	8002410 <xTaskIncrementTick+0x54>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800245e:	f106 0804 	add.w	r8, r6, #4
 8002462:	4640      	mov	r0, r8
 8002464:	f7ff fd8c 	bl	8001f80 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002468:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 800246a:	b119      	cbz	r1, 8002474 <xTaskIncrementTick+0xb8>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800246c:	f106 0018 	add.w	r0, r6, #24
 8002470:	f7ff fd86 	bl	8001f80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002474:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8002476:	f8d9 3000 	ldr.w	r3, [r9]
 800247a:	2201      	movs	r2, #1
 800247c:	fa02 f100 	lsl.w	r1, r2, r0
 8002480:	4319      	orrs	r1, r3
 8002482:	4b13      	ldr	r3, [pc, #76]	; (80024d0 <xTaskIncrementTick+0x114>)
 8002484:	f8c9 1000 	str.w	r1, [r9]
 8002488:	f04f 0c14 	mov.w	ip, #20
 800248c:	4641      	mov	r1, r8
 800248e:	fb0c 3000 	mla	r0, ip, r0, r3
 8002492:	f7ff fd52 	bl	8001f3a <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002496:	6838      	ldr	r0, [r7, #0]
 8002498:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 800249a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800249c:	4291      	cmp	r1, r2
 800249e:	bf28      	it	cs
 80024a0:	f04f 0b01 	movcs.w	fp, #1
 80024a4:	e7ca      	b.n	800243c <xTaskIncrementTick+0x80>
		++uxPendedTicks;
 80024a6:	4a0c      	ldr	r2, [pc, #48]	; (80024d8 <xTaskIncrementTick+0x11c>)
 80024a8:	6813      	ldr	r3, [r2, #0]
 80024aa:	3301      	adds	r3, #1
 80024ac:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80024ae:	f04f 0b00 	mov.w	fp, #0
 80024b2:	e7b7      	b.n	8002424 <xTaskIncrementTick+0x68>
 80024b4:	20000138 	.word	0x20000138
 80024b8:	200001b4 	.word	0x200001b4
 80024bc:	20000098 	.word	0x20000098
 80024c0:	2000009c 	.word	0x2000009c
 80024c4:	20000170 	.word	0x20000170
 80024c8:	2000016c 	.word	0x2000016c
 80024cc:	20000094 	.word	0x20000094
 80024d0:	200000a0 	.word	0x200000a0
 80024d4:	200001b8 	.word	0x200001b8
 80024d8:	20000134 	.word	0x20000134
 80024dc:	20000140 	.word	0x20000140

080024e0 <xTaskResumeAll>:
{
 80024e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 80024e4:	4c30      	ldr	r4, [pc, #192]	; (80025a8 <xTaskResumeAll+0xc8>)
 80024e6:	6823      	ldr	r3, [r4, #0]
 80024e8:	b943      	cbnz	r3, 80024fc <xTaskResumeAll+0x1c>
 80024ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ee:	f383 8811 	msr	BASEPRI, r3
 80024f2:	f3bf 8f6f 	isb	sy
 80024f6:	f3bf 8f4f 	dsb	sy
 80024fa:	e7fe      	b.n	80024fa <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 80024fc:	f000 f92a 	bl	8002754 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8002500:	6823      	ldr	r3, [r4, #0]
 8002502:	3b01      	subs	r3, #1
 8002504:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002506:	6824      	ldr	r4, [r4, #0]
 8002508:	b12c      	cbz	r4, 8002516 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800250a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800250c:	f000 f944 	bl	8002798 <vPortExitCritical>
}
 8002510:	4620      	mov	r0, r4
 8002512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002516:	4b25      	ldr	r3, [pc, #148]	; (80025ac <xTaskResumeAll+0xcc>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d0f5      	beq.n	800250a <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800251e:	4d24      	ldr	r5, [pc, #144]	; (80025b0 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 8002520:	4e24      	ldr	r6, [pc, #144]	; (80025b4 <xTaskResumeAll+0xd4>)
 8002522:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80025c8 <xTaskResumeAll+0xe8>
 8002526:	e01f      	b.n	8002568 <xTaskResumeAll+0x88>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002528:	68eb      	ldr	r3, [r5, #12]
 800252a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800252c:	f104 0904 	add.w	r9, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002530:	f104 0018 	add.w	r0, r4, #24
 8002534:	f7ff fd24 	bl	8001f80 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002538:	4648      	mov	r0, r9
 800253a:	f7ff fd21 	bl	8001f80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800253e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002540:	6831      	ldr	r1, [r6, #0]
 8002542:	2701      	movs	r7, #1
 8002544:	fa07 f302 	lsl.w	r3, r7, r2
 8002548:	2014      	movs	r0, #20
 800254a:	430b      	orrs	r3, r1
 800254c:	fb00 8002 	mla	r0, r0, r2, r8
 8002550:	4649      	mov	r1, r9
 8002552:	6033      	str	r3, [r6, #0]
 8002554:	f7ff fcf1 	bl	8001f3a <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002558:	4b17      	ldr	r3, [pc, #92]	; (80025b8 <xTaskResumeAll+0xd8>)
 800255a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002560:	429a      	cmp	r2, r3
 8002562:	d301      	bcc.n	8002568 <xTaskResumeAll+0x88>
						xYieldPending = pdTRUE;
 8002564:	4b15      	ldr	r3, [pc, #84]	; (80025bc <xTaskResumeAll+0xdc>)
 8002566:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002568:	682b      	ldr	r3, [r5, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1dc      	bne.n	8002528 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 800256e:	b10c      	cbz	r4, 8002574 <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
 8002570:	f7ff fde6 	bl	8002140 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002574:	4d12      	ldr	r5, [pc, #72]	; (80025c0 <xTaskResumeAll+0xe0>)
 8002576:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002578:	b144      	cbz	r4, 800258c <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 800257a:	4e10      	ldr	r6, [pc, #64]	; (80025bc <xTaskResumeAll+0xdc>)
 800257c:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800257e:	f7ff ff1d 	bl	80023bc <xTaskIncrementTick>
 8002582:	b100      	cbz	r0, 8002586 <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 8002584:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002586:	3c01      	subs	r4, #1
 8002588:	d1f9      	bne.n	800257e <xTaskResumeAll+0x9e>
						uxPendedTicks = 0;
 800258a:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800258c:	4b0b      	ldr	r3, [pc, #44]	; (80025bc <xTaskResumeAll+0xdc>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d0ba      	beq.n	800250a <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8002594:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <xTaskResumeAll+0xe4>)
 8002596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	f3bf 8f4f 	dsb	sy
 80025a0:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80025a4:	2401      	movs	r4, #1
 80025a6:	e7b1      	b.n	800250c <xTaskResumeAll+0x2c>
 80025a8:	20000138 	.word	0x20000138
 80025ac:	2000012c 	.word	0x2000012c
 80025b0:	20000174 	.word	0x20000174
 80025b4:	20000140 	.word	0x20000140
 80025b8:	20000094 	.word	0x20000094
 80025bc:	200001b8 	.word	0x200001b8
 80025c0:	20000134 	.word	0x20000134
 80025c4:	e000ed04 	.word	0xe000ed04
 80025c8:	200000a0 	.word	0x200000a0

080025cc <vTaskDelay>:
	{
 80025cc:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80025ce:	b940      	cbnz	r0, 80025e2 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 80025d0:	4b0e      	ldr	r3, [pc, #56]	; (800260c <vTaskDelay+0x40>)
 80025d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	f3bf 8f4f 	dsb	sy
 80025dc:	f3bf 8f6f 	isb	sy
	}
 80025e0:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80025e2:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <vTaskDelay+0x44>)
 80025e4:	6819      	ldr	r1, [r3, #0]
 80025e6:	b141      	cbz	r1, 80025fa <vTaskDelay+0x2e>
 80025e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ec:	f383 8811 	msr	BASEPRI, r3
 80025f0:	f3bf 8f6f 	isb	sy
 80025f4:	f3bf 8f4f 	dsb	sy
 80025f8:	e7fe      	b.n	80025f8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80025fa:	f7ff fed7 	bl	80023ac <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80025fe:	f7ff fdf5 	bl	80021ec <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8002602:	f7ff ff6d 	bl	80024e0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8002606:	2800      	cmp	r0, #0
 8002608:	d0e2      	beq.n	80025d0 <vTaskDelay+0x4>
 800260a:	e7e9      	b.n	80025e0 <vTaskDelay+0x14>
 800260c:	e000ed04 	.word	0xe000ed04
 8002610:	20000138 	.word	0x20000138

08002614 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002614:	4b17      	ldr	r3, [pc, #92]	; (8002674 <vTaskSwitchContext+0x60>)
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	4b17      	ldr	r3, [pc, #92]	; (8002678 <vTaskSwitchContext+0x64>)
{
 800261a:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800261c:	b112      	cbz	r2, 8002624 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800261e:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002620:	601a      	str	r2, [r3, #0]
}
 8002622:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8002624:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002626:	4b15      	ldr	r3, [pc, #84]	; (800267c <vTaskSwitchContext+0x68>)
 8002628:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800262a:	fab3 f383 	clz	r3, r3
 800262e:	b2db      	uxtb	r3, r3
 8002630:	f1c3 031f 	rsb	r3, r3, #31
 8002634:	2214      	movs	r2, #20
 8002636:	4912      	ldr	r1, [pc, #72]	; (8002680 <vTaskSwitchContext+0x6c>)
 8002638:	435a      	muls	r2, r3
 800263a:	1888      	adds	r0, r1, r2
 800263c:	588c      	ldr	r4, [r1, r2]
 800263e:	b944      	cbnz	r4, 8002652 <vTaskSwitchContext+0x3e>
	__asm volatile
 8002640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002644:	f383 8811 	msr	BASEPRI, r3
 8002648:	f3bf 8f6f 	isb	sy
 800264c:	f3bf 8f4f 	dsb	sy
 8002650:	e7fe      	b.n	8002650 <vTaskSwitchContext+0x3c>
 8002652:	6844      	ldr	r4, [r0, #4]
 8002654:	3208      	adds	r2, #8
 8002656:	6864      	ldr	r4, [r4, #4]
 8002658:	6044      	str	r4, [r0, #4]
 800265a:	440a      	add	r2, r1
 800265c:	4294      	cmp	r4, r2
 800265e:	bf04      	itt	eq
 8002660:	6862      	ldreq	r2, [r4, #4]
 8002662:	6042      	streq	r2, [r0, #4]
 8002664:	2214      	movs	r2, #20
 8002666:	fb02 1303 	mla	r3, r2, r3, r1
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	68da      	ldr	r2, [r3, #12]
 800266e:	4b05      	ldr	r3, [pc, #20]	; (8002684 <vTaskSwitchContext+0x70>)
 8002670:	e7d6      	b.n	8002620 <vTaskSwitchContext+0xc>
 8002672:	bf00      	nop
 8002674:	20000138 	.word	0x20000138
 8002678:	200001b8 	.word	0x200001b8
 800267c:	20000140 	.word	0x20000140
 8002680:	200000a0 	.word	0x200000a0
 8002684:	20000094 	.word	0x20000094

08002688 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002688:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800268a:	2300      	movs	r3, #0
 800268c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800268e:	4b0d      	ldr	r3, [pc, #52]	; (80026c4 <prvTaskExitError+0x3c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	3301      	adds	r3, #1
 8002694:	d008      	beq.n	80026a8 <prvTaskExitError+0x20>
 8002696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800269a:	f383 8811 	msr	BASEPRI, r3
 800269e:	f3bf 8f6f 	isb	sy
 80026a2:	f3bf 8f4f 	dsb	sy
 80026a6:	e7fe      	b.n	80026a6 <prvTaskExitError+0x1e>
 80026a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ac:	f383 8811 	msr	BASEPRI, r3
 80026b0:	f3bf 8f6f 	isb	sy
 80026b4:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80026b8:	9b01      	ldr	r3, [sp, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d0fc      	beq.n	80026b8 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80026be:	b002      	add	sp, #8
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	20000000 	.word	0x20000000

080026c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80026c8:	4808      	ldr	r0, [pc, #32]	; (80026ec <prvPortStartFirstTask+0x24>)
 80026ca:	6800      	ldr	r0, [r0, #0]
 80026cc:	6800      	ldr	r0, [r0, #0]
 80026ce:	f380 8808 	msr	MSP, r0
 80026d2:	f04f 0000 	mov.w	r0, #0
 80026d6:	f380 8814 	msr	CONTROL, r0
 80026da:	b662      	cpsie	i
 80026dc:	b661      	cpsie	f
 80026de:	f3bf 8f4f 	dsb	sy
 80026e2:	f3bf 8f6f 	isb	sy
 80026e6:	df00      	svc	0
 80026e8:	bf00      	nop
 80026ea:	0000      	.short	0x0000
 80026ec:	e000ed08 	.word	0xe000ed08

080026f0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80026f0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002700 <vPortEnableVFP+0x10>
 80026f4:	6801      	ldr	r1, [r0, #0]
 80026f6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80026fa:	6001      	str	r1, [r0, #0]
 80026fc:	4770      	bx	lr
 80026fe:	0000      	.short	0x0000
 8002700:	e000ed88 	.word	0xe000ed88

08002704 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002704:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002708:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800270c:	4b07      	ldr	r3, [pc, #28]	; (800272c <pxPortInitialiseStack+0x28>)
 800270e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002712:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002716:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800271a:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800271e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002722:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8002726:	3844      	subs	r0, #68	; 0x44
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	08002689 	.word	0x08002689

08002730 <SVC_Handler>:
	__asm volatile (
 8002730:	4b07      	ldr	r3, [pc, #28]	; (8002750 <pxCurrentTCBConst2>)
 8002732:	6819      	ldr	r1, [r3, #0]
 8002734:	6808      	ldr	r0, [r1, #0]
 8002736:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800273a:	f380 8809 	msr	PSP, r0
 800273e:	f3bf 8f6f 	isb	sy
 8002742:	f04f 0000 	mov.w	r0, #0
 8002746:	f380 8811 	msr	BASEPRI, r0
 800274a:	4770      	bx	lr
 800274c:	f3af 8000 	nop.w

08002750 <pxCurrentTCBConst2>:
 8002750:	20000094 	.word	0x20000094

08002754 <vPortEnterCritical>:
 8002754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002758:	f383 8811 	msr	BASEPRI, r3
 800275c:	f3bf 8f6f 	isb	sy
 8002760:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8002764:	4a0a      	ldr	r2, [pc, #40]	; (8002790 <vPortEnterCritical+0x3c>)
 8002766:	6813      	ldr	r3, [r2, #0]
 8002768:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800276a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800276c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800276e:	d10d      	bne.n	800278c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002770:	4b08      	ldr	r3, [pc, #32]	; (8002794 <vPortEnterCritical+0x40>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002778:	d008      	beq.n	800278c <vPortEnterCritical+0x38>
 800277a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800277e:	f383 8811 	msr	BASEPRI, r3
 8002782:	f3bf 8f6f 	isb	sy
 8002786:	f3bf 8f4f 	dsb	sy
 800278a:	e7fe      	b.n	800278a <vPortEnterCritical+0x36>
}
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	20000000 	.word	0x20000000
 8002794:	e000ed04 	.word	0xe000ed04

08002798 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8002798:	4a08      	ldr	r2, [pc, #32]	; (80027bc <vPortExitCritical+0x24>)
 800279a:	6813      	ldr	r3, [r2, #0]
 800279c:	b943      	cbnz	r3, 80027b0 <vPortExitCritical+0x18>
 800279e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a2:	f383 8811 	msr	BASEPRI, r3
 80027a6:	f3bf 8f6f 	isb	sy
 80027aa:	f3bf 8f4f 	dsb	sy
 80027ae:	e7fe      	b.n	80027ae <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80027b0:	3b01      	subs	r3, #1
 80027b2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80027b4:	b90b      	cbnz	r3, 80027ba <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80027b6:	f383 8811 	msr	BASEPRI, r3
}
 80027ba:	4770      	bx	lr
 80027bc:	20000000 	.word	0x20000000

080027c0 <PendSV_Handler>:
	__asm volatile
 80027c0:	f3ef 8009 	mrs	r0, PSP
 80027c4:	f3bf 8f6f 	isb	sy
 80027c8:	4b15      	ldr	r3, [pc, #84]	; (8002820 <pxCurrentTCBConst>)
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	f01e 0f10 	tst.w	lr, #16
 80027d0:	bf08      	it	eq
 80027d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80027d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027da:	6010      	str	r0, [r2, #0]
 80027dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80027e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80027e4:	f380 8811 	msr	BASEPRI, r0
 80027e8:	f3bf 8f4f 	dsb	sy
 80027ec:	f3bf 8f6f 	isb	sy
 80027f0:	f7ff ff10 	bl	8002614 <vTaskSwitchContext>
 80027f4:	f04f 0000 	mov.w	r0, #0
 80027f8:	f380 8811 	msr	BASEPRI, r0
 80027fc:	bc09      	pop	{r0, r3}
 80027fe:	6819      	ldr	r1, [r3, #0]
 8002800:	6808      	ldr	r0, [r1, #0]
 8002802:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002806:	f01e 0f10 	tst.w	lr, #16
 800280a:	bf08      	it	eq
 800280c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002810:	f380 8809 	msr	PSP, r0
 8002814:	f3bf 8f6f 	isb	sy
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	f3af 8000 	nop.w

08002820 <pxCurrentTCBConst>:
 8002820:	20000094 	.word	0x20000094

08002824 <SysTick_Handler>:
{
 8002824:	b508      	push	{r3, lr}
	__asm volatile
 8002826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800282a:	f383 8811 	msr	BASEPRI, r3
 800282e:	f3bf 8f6f 	isb	sy
 8002832:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8002836:	f7ff fdc1 	bl	80023bc <xTaskIncrementTick>
 800283a:	b118      	cbz	r0, 8002844 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800283c:	4b03      	ldr	r3, [pc, #12]	; (800284c <SysTick_Handler+0x28>)
 800283e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002842:	601a      	str	r2, [r3, #0]
	__asm volatile
 8002844:	2300      	movs	r3, #0
 8002846:	f383 8811 	msr	BASEPRI, r3
}
 800284a:	bd08      	pop	{r3, pc}
 800284c:	e000ed04 	.word	0xe000ed04

08002850 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002850:	4a08      	ldr	r2, [pc, #32]	; (8002874 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002852:	4909      	ldr	r1, [pc, #36]	; (8002878 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002854:	2300      	movs	r3, #0
 8002856:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002858:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800285a:	4b08      	ldr	r3, [pc, #32]	; (800287c <vPortSetupTimerInterrupt+0x2c>)
 800285c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	fbb3 f3f1 	udiv	r3, r3, r1
 8002866:	4906      	ldr	r1, [pc, #24]	; (8002880 <vPortSetupTimerInterrupt+0x30>)
 8002868:	3b01      	subs	r3, #1
 800286a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800286c:	2307      	movs	r3, #7
 800286e:	6013      	str	r3, [r2, #0]
}
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	e000e010 	.word	0xe000e010
 8002878:	e000e018 	.word	0xe000e018
 800287c:	20000010 	.word	0x20000010
 8002880:	e000e014 	.word	0xe000e014

08002884 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002884:	4b39      	ldr	r3, [pc, #228]	; (800296c <xPortStartScheduler+0xe8>)
 8002886:	4a3a      	ldr	r2, [pc, #232]	; (8002970 <xPortStartScheduler+0xec>)
{
 8002888:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800288a:	6819      	ldr	r1, [r3, #0]
 800288c:	4291      	cmp	r1, r2
 800288e:	d108      	bne.n	80028a2 <xPortStartScheduler+0x1e>
	__asm volatile
 8002890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002894:	f383 8811 	msr	BASEPRI, r3
 8002898:	f3bf 8f6f 	isb	sy
 800289c:	f3bf 8f4f 	dsb	sy
 80028a0:	e7fe      	b.n	80028a0 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	4b33      	ldr	r3, [pc, #204]	; (8002974 <xPortStartScheduler+0xf0>)
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d108      	bne.n	80028bc <xPortStartScheduler+0x38>
 80028aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ae:	f383 8811 	msr	BASEPRI, r3
 80028b2:	f3bf 8f6f 	isb	sy
 80028b6:	f3bf 8f4f 	dsb	sy
 80028ba:	e7fe      	b.n	80028ba <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80028bc:	4b2e      	ldr	r3, [pc, #184]	; (8002978 <xPortStartScheduler+0xf4>)
 80028be:	781a      	ldrb	r2, [r3, #0]
 80028c0:	b2d2      	uxtb	r2, r2
 80028c2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80028c4:	22ff      	movs	r2, #255	; 0xff
 80028c6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80028c8:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80028ca:	4a2c      	ldr	r2, [pc, #176]	; (800297c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80028d2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80028d6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80028da:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80028dc:	4b28      	ldr	r3, [pc, #160]	; (8002980 <xPortStartScheduler+0xfc>)
 80028de:	2207      	movs	r2, #7
 80028e0:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80028e2:	2100      	movs	r1, #0
 80028e4:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80028e8:	0600      	lsls	r0, r0, #24
 80028ea:	f102 34ff 	add.w	r4, r2, #4294967295
 80028ee:	d40d      	bmi.n	800290c <xPortStartScheduler+0x88>
 80028f0:	b101      	cbz	r1, 80028f4 <xPortStartScheduler+0x70>
 80028f2:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	2a03      	cmp	r2, #3
 80028f8:	d011      	beq.n	800291e <xPortStartScheduler+0x9a>
 80028fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028fe:	f383 8811 	msr	BASEPRI, r3
 8002902:	f3bf 8f6f 	isb	sy
 8002906:	f3bf 8f4f 	dsb	sy
 800290a:	e7fe      	b.n	800290a <xPortStartScheduler+0x86>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800290c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8002910:	0052      	lsls	r2, r2, #1
 8002912:	b2d2      	uxtb	r2, r2
 8002914:	f88d 2003 	strb.w	r2, [sp, #3]
 8002918:	2101      	movs	r1, #1
 800291a:	4622      	mov	r2, r4
 800291c:	e7e2      	b.n	80028e4 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800291e:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002920:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002924:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002926:	9b01      	ldr	r3, [sp, #4]
 8002928:	4a13      	ldr	r2, [pc, #76]	; (8002978 <xPortStartScheduler+0xf4>)
 800292a:	b2db      	uxtb	r3, r3
 800292c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800292e:	4b15      	ldr	r3, [pc, #84]	; (8002984 <xPortStartScheduler+0x100>)
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002936:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800293e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8002940:	f7ff ff86 	bl	8002850 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8002944:	4b10      	ldr	r3, [pc, #64]	; (8002988 <xPortStartScheduler+0x104>)
 8002946:	2400      	movs	r4, #0
 8002948:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 800294a:	f7ff fed1 	bl	80026f0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800294e:	4a0f      	ldr	r2, [pc, #60]	; (800298c <xPortStartScheduler+0x108>)
 8002950:	6813      	ldr	r3, [r2, #0]
 8002952:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002956:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8002958:	f7ff feb6 	bl	80026c8 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800295c:	f7ff fe5a 	bl	8002614 <vTaskSwitchContext>
	prvTaskExitError();
 8002960:	f7ff fe92 	bl	8002688 <prvTaskExitError>
}
 8002964:	4620      	mov	r0, r4
 8002966:	b002      	add	sp, #8
 8002968:	bd10      	pop	{r4, pc}
 800296a:	bf00      	nop
 800296c:	e000ed00 	.word	0xe000ed00
 8002970:	410fc271 	.word	0x410fc271
 8002974:	410fc270 	.word	0x410fc270
 8002978:	e000e400 	.word	0xe000e400
 800297c:	200001bc 	.word	0x200001bc
 8002980:	200001c0 	.word	0x200001c0
 8002984:	e000ed20 	.word	0xe000ed20
 8002988:	20000000 	.word	0x20000000
 800298c:	e000ef34 	.word	0xe000ef34

08002990 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002990:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002992:	4b0f      	ldr	r3, [pc, #60]	; (80029d0 <prvInsertBlockIntoFreeList+0x40>)
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	4282      	cmp	r2, r0
 8002998:	d318      	bcc.n	80029cc <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800299a:	685c      	ldr	r4, [r3, #4]
 800299c:	1919      	adds	r1, r3, r4
 800299e:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80029a0:	bf01      	itttt	eq
 80029a2:	6841      	ldreq	r1, [r0, #4]
 80029a4:	4618      	moveq	r0, r3
 80029a6:	1909      	addeq	r1, r1, r4
 80029a8:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80029aa:	6844      	ldr	r4, [r0, #4]
 80029ac:	1901      	adds	r1, r0, r4
 80029ae:	428a      	cmp	r2, r1
 80029b0:	d107      	bne.n	80029c2 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80029b2:	4908      	ldr	r1, [pc, #32]	; (80029d4 <prvInsertBlockIntoFreeList+0x44>)
 80029b4:	6809      	ldr	r1, [r1, #0]
 80029b6:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80029b8:	bf1f      	itttt	ne
 80029ba:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80029bc:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80029be:	1909      	addne	r1, r1, r4
 80029c0:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80029c2:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80029c4:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80029c6:	bf18      	it	ne
 80029c8:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80029ca:	bd10      	pop	{r4, pc}
 80029cc:	4613      	mov	r3, r2
 80029ce:	e7e1      	b.n	8002994 <prvInsertBlockIntoFreeList+0x4>
 80029d0:	20003dd4 	.word	0x20003dd4
 80029d4:	200001c4 	.word	0x200001c4

080029d8 <pvPortMalloc>:
{
 80029d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029dc:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80029de:	f7ff fce5 	bl	80023ac <vTaskSuspendAll>
		if( pxEnd == NULL )
 80029e2:	493d      	ldr	r1, [pc, #244]	; (8002ad8 <pvPortMalloc+0x100>)
 80029e4:	4d3d      	ldr	r5, [pc, #244]	; (8002adc <pvPortMalloc+0x104>)
 80029e6:	680b      	ldr	r3, [r1, #0]
 80029e8:	b9fb      	cbnz	r3, 8002a2a <pvPortMalloc+0x52>
	uxAddress = ( size_t ) ucHeap;
 80029ea:	4a3d      	ldr	r2, [pc, #244]	; (8002ae0 <pvPortMalloc+0x108>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80029ec:	0756      	lsls	r6, r2, #29
 80029ee:	f502 5370 	add.w	r3, r2, #15360	; 0x3c00
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80029f2:	bf1d      	ittte	ne
 80029f4:	3207      	addne	r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80029f6:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80029fa:	1a9b      	subne	r3, r3, r2
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80029fc:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002a00:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002a02:	4e38      	ldr	r6, [pc, #224]	; (8002ae4 <pvPortMalloc+0x10c>)
	uxAddress -= xHeapStructSize;
 8002a04:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002a06:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8002a0a:	2000      	movs	r0, #0
 8002a0c:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002a0e:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8002a10:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002a14:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 8002a16:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002a18:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002a1c:	4b32      	ldr	r3, [pc, #200]	; (8002ae8 <pvPortMalloc+0x110>)
 8002a1e:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002a20:	4b32      	ldr	r3, [pc, #200]	; (8002aec <pvPortMalloc+0x114>)
 8002a22:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002a24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002a28:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002a2a:	682f      	ldr	r7, [r5, #0]
 8002a2c:	4227      	tst	r7, r4
 8002a2e:	d14e      	bne.n	8002ace <pvPortMalloc+0xf6>
			if( xWantedSize > 0 )
 8002a30:	2c00      	cmp	r4, #0
 8002a32:	d03f      	beq.n	8002ab4 <pvPortMalloc+0xdc>
				xWantedSize += xHeapStructSize;
 8002a34:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002a38:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002a3a:	bf1c      	itt	ne
 8002a3c:	f023 0307 	bicne.w	r3, r3, #7
 8002a40:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d043      	beq.n	8002ace <pvPortMalloc+0xf6>
 8002a46:	4a29      	ldr	r2, [pc, #164]	; (8002aec <pvPortMalloc+0x114>)
 8002a48:	6816      	ldr	r6, [r2, #0]
 8002a4a:	429e      	cmp	r6, r3
 8002a4c:	4690      	mov	r8, r2
 8002a4e:	d33e      	bcc.n	8002ace <pvPortMalloc+0xf6>
				pxBlock = xStart.pxNextFreeBlock;
 8002a50:	4a24      	ldr	r2, [pc, #144]	; (8002ae4 <pvPortMalloc+0x10c>)
 8002a52:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002a54:	6868      	ldr	r0, [r5, #4]
 8002a56:	4298      	cmp	r0, r3
 8002a58:	d201      	bcs.n	8002a5e <pvPortMalloc+0x86>
 8002a5a:	682c      	ldr	r4, [r5, #0]
 8002a5c:	b9a4      	cbnz	r4, 8002a88 <pvPortMalloc+0xb0>
				if( pxBlock != pxEnd )
 8002a5e:	6809      	ldr	r1, [r1, #0]
 8002a60:	42a9      	cmp	r1, r5
 8002a62:	d034      	beq.n	8002ace <pvPortMalloc+0xf6>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002a64:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002a66:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002a68:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002a6a:	1ac2      	subs	r2, r0, r3
 8002a6c:	2a10      	cmp	r2, #16
 8002a6e:	d912      	bls.n	8002a96 <pvPortMalloc+0xbe>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002a70:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002a72:	0741      	lsls	r1, r0, #29
 8002a74:	d00b      	beq.n	8002a8e <pvPortMalloc+0xb6>
 8002a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a7a:	f383 8811 	msr	BASEPRI, r3
 8002a7e:	f3bf 8f6f 	isb	sy
 8002a82:	f3bf 8f4f 	dsb	sy
 8002a86:	e7fe      	b.n	8002a86 <pvPortMalloc+0xae>
 8002a88:	462a      	mov	r2, r5
 8002a8a:	4625      	mov	r5, r4
 8002a8c:	e7e2      	b.n	8002a54 <pvPortMalloc+0x7c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002a8e:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002a90:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002a92:	f7ff ff7d 	bl	8002990 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002a96:	4914      	ldr	r1, [pc, #80]	; (8002ae8 <pvPortMalloc+0x110>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002a98:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002a9a:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002a9c:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002a9e:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002aa0:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 8002aa2:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002aa6:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002aaa:	bf38      	it	cc
 8002aac:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002aae:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002ab0:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002ab2:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8002ab4:	f7ff fd14 	bl	80024e0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002ab8:	0763      	lsls	r3, r4, #29
 8002aba:	d00a      	beq.n	8002ad2 <pvPortMalloc+0xfa>
 8002abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ac0:	f383 8811 	msr	BASEPRI, r3
 8002ac4:	f3bf 8f6f 	isb	sy
 8002ac8:	f3bf 8f4f 	dsb	sy
 8002acc:	e7fe      	b.n	8002acc <pvPortMalloc+0xf4>
void *pvReturn = NULL;
 8002ace:	2400      	movs	r4, #0
 8002ad0:	e7f0      	b.n	8002ab4 <pvPortMalloc+0xdc>
}
 8002ad2:	4620      	mov	r0, r4
 8002ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ad8:	200001c4 	.word	0x200001c4
 8002adc:	20003dc8 	.word	0x20003dc8
 8002ae0:	200001c8 	.word	0x200001c8
 8002ae4:	20003dd4 	.word	0x20003dd4
 8002ae8:	20003dd0 	.word	0x20003dd0
 8002aec:	20003dcc 	.word	0x20003dcc

08002af0 <vPortFree>:
{
 8002af0:	b510      	push	{r4, lr}
	if( pv != NULL )
 8002af2:	4604      	mov	r4, r0
 8002af4:	b370      	cbz	r0, 8002b54 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002af6:	4a18      	ldr	r2, [pc, #96]	; (8002b58 <vPortFree+0x68>)
 8002af8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8002afc:	6812      	ldr	r2, [r2, #0]
 8002afe:	4213      	tst	r3, r2
 8002b00:	d108      	bne.n	8002b14 <vPortFree+0x24>
 8002b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b06:	f383 8811 	msr	BASEPRI, r3
 8002b0a:	f3bf 8f6f 	isb	sy
 8002b0e:	f3bf 8f4f 	dsb	sy
 8002b12:	e7fe      	b.n	8002b12 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002b14:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8002b18:	b141      	cbz	r1, 8002b2c <vPortFree+0x3c>
 8002b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b1e:	f383 8811 	msr	BASEPRI, r3
 8002b22:	f3bf 8f6f 	isb	sy
 8002b26:	f3bf 8f4f 	dsb	sy
 8002b2a:	e7fe      	b.n	8002b2a <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002b2c:	ea23 0302 	bic.w	r3, r3, r2
 8002b30:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8002b34:	f7ff fc3a 	bl	80023ac <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002b38:	4a08      	ldr	r2, [pc, #32]	; (8002b5c <vPortFree+0x6c>)
 8002b3a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8002b3e:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002b40:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002b44:	440b      	add	r3, r1
 8002b46:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002b48:	f7ff ff22 	bl	8002990 <prvInsertBlockIntoFreeList>
}
 8002b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8002b50:	f7ff bcc6 	b.w	80024e0 <xTaskResumeAll>
}
 8002b54:	bd10      	pop	{r4, pc}
 8002b56:	bf00      	nop
 8002b58:	20003dc8 	.word	0x20003dc8
 8002b5c:	20003dcc 	.word	0x20003dcc

08002b60 <vApplicationIdleHook>:
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8002b60:	4770      	bx	lr
	...

08002b64 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002b64:	4b03      	ldr	r3, [pc, #12]	; (8002b74 <vApplicationGetIdleTaskMemory+0x10>)
 8002b66:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002b68:	4b03      	ldr	r3, [pc, #12]	; (8002b78 <vApplicationGetIdleTaskMemory+0x14>)
 8002b6a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002b6c:	2380      	movs	r3, #128	; 0x80
 8002b6e:	6013      	str	r3, [r2, #0]
  /* place for user code */
}                   
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	20003fdc 	.word	0x20003fdc
 8002b78:	20003ddc 	.word	0x20003ddc

08002b7c <Delay>:
/**
 * @brief  Delays for amount of micro seconds
 * @param  micros: Number of microseconds for delay
 * @retval None
 */
__STATIC_INLINE void Delay(__IO uint32_t micros) {
 8002b7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
#if !defined(STM32F0xx)
	uint32_t start = DWT->CYCCNT;
 8002b7e:	4c09      	ldr	r4, [pc, #36]	; (8002ba4 <Delay+0x28>)
__STATIC_INLINE void Delay(__IO uint32_t micros) {
 8002b80:	9001      	str	r0, [sp, #4]
	uint32_t start = DWT->CYCCNT;
 8002b82:	6865      	ldr	r5, [r4, #4]
	
	/* Go to number of cycles for system */
	micros *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8002b84:	f7fd ff4e 	bl	8000a24 <HAL_RCC_GetHCLKFreq>
 8002b88:	9b01      	ldr	r3, [sp, #4]
 8002b8a:	4a07      	ldr	r2, [pc, #28]	; (8002ba8 <Delay+0x2c>)
 8002b8c:	fbb0 f0f2 	udiv	r0, r0, r2
 8002b90:	4343      	muls	r3, r0
 8002b92:	9301      	str	r3, [sp, #4]
	
	/* Delay till end */
	while ((DWT->CYCCNT - start) < micros);
 8002b94:	6863      	ldr	r3, [r4, #4]
 8002b96:	9a01      	ldr	r2, [sp, #4]
 8002b98:	1b5b      	subs	r3, r3, r5
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d3fa      	bcc.n	8002b94 <Delay+0x18>
	micros *= (SystemCoreClock / 1000000) / 5;
	
	/* Wait till done */
	while (micros--);
#endif
}
 8002b9e:	b003      	add	sp, #12
 8002ba0:	bd30      	pop	{r4, r5, pc}
 8002ba2:	bf00      	nop
 8002ba4:	e0001000 	.word	0xe0001000
 8002ba8:	000f4240 	.word	0x000f4240

08002bac <set_gpio_output>:
uint8_t presence = 0;
GPIO_InitTypeDef GPIO_InitStruct;

void set_gpio_output(void) {
	/*Configure GPIO pin output: PA2 */
	GPIO_InitStruct.Pin = DHT11_Pin;
 8002bac:	4905      	ldr	r1, [pc, #20]	; (8002bc4 <set_gpio_output+0x18>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8002bae:	4806      	ldr	r0, [pc, #24]	; (8002bc8 <set_gpio_output+0x1c>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bb6:	e9c1 2300 	strd	r2, r3, [r1]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60cb      	str	r3, [r1, #12]
	HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8002bbe:	f7fd bd77 	b.w	80006b0 <HAL_GPIO_Init>
 8002bc2:	bf00      	nop
 8002bc4:	20004168 	.word	0x20004168
 8002bc8:	40020000 	.word	0x40020000

08002bcc <set_gpio_input>:
}

void set_gpio_input(void) {
	/*Configure GPIO pin input: PA2 */
	GPIO_InitStruct.Pin = DHT11_Pin;
 8002bcc:	4904      	ldr	r1, [pc, #16]	; (8002be0 <set_gpio_input+0x14>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8002bce:	4805      	ldr	r0, [pc, #20]	; (8002be4 <set_gpio_input+0x18>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bd6:	e9c1 2300 	strd	r2, r3, [r1]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bda:	608b      	str	r3, [r1, #8]
	HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8002bdc:	f7fd bd68 	b.w	80006b0 <HAL_GPIO_Init>
 8002be0:	20004168 	.word	0x20004168
 8002be4:	40020000 	.word	0x40020000

08002be8 <DHT11_start>:
}

void DHT11_start(void) {
 8002be8:	b510      	push	{r4, lr}
	set_gpio_output();
	HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, 0);
 8002bea:	4c0d      	ldr	r4, [pc, #52]	; (8002c20 <DHT11_start+0x38>)
	set_gpio_output();
 8002bec:	f7ff ffde 	bl	8002bac <set_gpio_output>
	HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, 0);
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002bf6:	4620      	mov	r0, r4
 8002bf8:	f7fd fe3a 	bl	8000870 <HAL_GPIO_WritePin>
	Delay(18000);
 8002bfc:	f244 6050 	movw	r0, #18000	; 0x4650
 8002c00:	f7ff ffbc 	bl	8002b7c <Delay>
	HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, 1);
 8002c04:	4620      	mov	r0, r4
 8002c06:	2201      	movs	r2, #1
 8002c08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c0c:	f7fd fe30 	bl	8000870 <HAL_GPIO_WritePin>
	Delay(20);
 8002c10:	2014      	movs	r0, #20
 8002c12:	f7ff ffb3 	bl	8002b7c <Delay>
	set_gpio_input();
}
 8002c16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	set_gpio_input();
 8002c1a:	f7ff bfd7 	b.w	8002bcc <set_gpio_input>
 8002c1e:	bf00      	nop
 8002c20:	40020000 	.word	0x40020000

08002c24 <check_response>:

uint8_t check_response(void) {
 8002c24:	b538      	push	{r3, r4, r5, lr}
	uint8_t response = 0;
	Delay(40);
 8002c26:	2028      	movs	r0, #40	; 0x28
 8002c28:	f7ff ffa8 	bl	8002b7c <Delay>
	if (!(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin))) {
 8002c2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c30:	480d      	ldr	r0, [pc, #52]	; (8002c68 <check_response+0x44>)
 8002c32:	f7fd fe17 	bl	8000864 <HAL_GPIO_ReadPin>
 8002c36:	b9a8      	cbnz	r0, 8002c64 <check_response+0x40>
		Delay(80);
 8002c38:	2050      	movs	r0, #80	; 0x50
 8002c3a:	f7ff ff9f 	bl	8002b7c <Delay>
		if ((HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin)))
 8002c3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c42:	4809      	ldr	r0, [pc, #36]	; (8002c68 <check_response+0x44>)
 8002c44:	f7fd fe0e 	bl	8000864 <HAL_GPIO_ReadPin>
			response = 1;
		else
			response = -1;
 8002c48:	2800      	cmp	r0, #0
 8002c4a:	bf14      	ite	ne
 8002c4c:	2401      	movne	r4, #1
 8002c4e:	24ff      	moveq	r4, #255	; 0xff
	}
	while ((HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin)));
 8002c50:	4d05      	ldr	r5, [pc, #20]	; (8002c68 <check_response+0x44>)
 8002c52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c56:	4628      	mov	r0, r5
 8002c58:	f7fd fe04 	bl	8000864 <HAL_GPIO_ReadPin>
 8002c5c:	2800      	cmp	r0, #0
 8002c5e:	d1f8      	bne.n	8002c52 <check_response+0x2e>
	return response;
}
 8002c60:	4620      	mov	r0, r4
 8002c62:	bd38      	pop	{r3, r4, r5, pc}
	uint8_t response = 0;
 8002c64:	2400      	movs	r4, #0
 8002c66:	e7f3      	b.n	8002c50 <check_response+0x2c>
 8002c68:	40020000 	.word	0x40020000

08002c6c <read_data>:

uint8_t read_data(void) {
 8002c6c:	b570      	push	{r4, r5, r6, lr}
	uint8_t i, j;
	for (j = 0; j < 8; j++) {
		while (!(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin)));
 8002c6e:	4e14      	ldr	r6, [pc, #80]	; (8002cc0 <read_data+0x54>)
uint8_t read_data(void) {
 8002c70:	2400      	movs	r4, #0
 8002c72:	2507      	movs	r5, #7
		while (!(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin)));
 8002c74:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c78:	4811      	ldr	r0, [pc, #68]	; (8002cc0 <read_data+0x54>)
 8002c7a:	f7fd fdf3 	bl	8000864 <HAL_GPIO_ReadPin>
 8002c7e:	2800      	cmp	r0, #0
 8002c80:	d0f8      	beq.n	8002c74 <read_data+0x8>
		Delay(40);
 8002c82:	2028      	movs	r0, #40	; 0x28
 8002c84:	f7ff ff7a 	bl	8002b7c <Delay>
		if ((HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin)) == 0) {
 8002c88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c8c:	4630      	mov	r0, r6
 8002c8e:	f7fd fde9 	bl	8000864 <HAL_GPIO_ReadPin>
 8002c92:	2301      	movs	r3, #1
 8002c94:	40ab      	lsls	r3, r5
 8002c96:	b25b      	sxtb	r3, r3
 8002c98:	b264      	sxtb	r4, r4
 8002c9a:	b970      	cbnz	r0, 8002cba <read_data+0x4e>
			i &= ~(1 << (7 - j));
 8002c9c:	ea24 0403 	bic.w	r4, r4, r3
		} else
			i |= (1 << (7 - j));
 8002ca0:	b2e4      	uxtb	r4, r4
		while ((HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin)));
 8002ca2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002ca6:	4630      	mov	r0, r6
 8002ca8:	f7fd fddc 	bl	8000864 <HAL_GPIO_ReadPin>
 8002cac:	2800      	cmp	r0, #0
 8002cae:	d1f8      	bne.n	8002ca2 <read_data+0x36>
	for (j = 0; j < 8; j++) {
 8002cb0:	f115 35ff 	adds.w	r5, r5, #4294967295
 8002cb4:	d2de      	bcs.n	8002c74 <read_data+0x8>
	}
	return i;
}
 8002cb6:	4620      	mov	r0, r4
 8002cb8:	bd70      	pop	{r4, r5, r6, pc}
			i |= (1 << (7 - j));
 8002cba:	431c      	orrs	r4, r3
 8002cbc:	e7f0      	b.n	8002ca0 <read_data+0x34>
 8002cbe:	bf00      	nop
 8002cc0:	40020000 	.word	0x40020000

08002cc4 <checkHour>:

bool checkHour(void) {
 8002cc4:	b500      	push	{lr}
 8002cc6:	b089      	sub	sp, #36	; 0x24
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;
	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8002cc8:	2200      	movs	r2, #0
 8002cca:	a903      	add	r1, sp, #12
 8002ccc:	4811      	ldr	r0, [pc, #68]	; (8002d14 <checkHour+0x50>)
 8002cce:	f7fe fc39 	bl	8001544 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	a902      	add	r1, sp, #8
 8002cd6:	480f      	ldr	r0, [pc, #60]	; (8002d14 <checkHour+0x50>)
 8002cd8:	f7fe fc5b 	bl	8001592 <HAL_RTC_GetDate>
	/* Display time Format: hh:mm:ss */

	sprintf((char*) time_buffer, "%02d:%02d:%02d", gTime.Hours, gTime.Minutes,
 8002cdc:	f89d 100e 	ldrb.w	r1, [sp, #14]
 8002ce0:	9100      	str	r1, [sp, #0]
 8002ce2:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8002ce6:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8002cea:	490b      	ldr	r1, [pc, #44]	; (8002d18 <checkHour+0x54>)
 8002cec:	480b      	ldr	r0, [pc, #44]	; (8002d1c <checkHour+0x58>)
 8002cee:	f001 f9d3 	bl	8004098 <siprintf>
			gTime.Seconds);
	/* Display date Format: dd-mm-yy */
	if (gTime.Minutes == 00 && gTime.Hours != currentHour) {
 8002cf2:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8002cf6:	b950      	cbnz	r0, 8002d0e <checkHour+0x4a>
 8002cf8:	4b09      	ldr	r3, [pc, #36]	; (8002d20 <checkHour+0x5c>)
 8002cfa:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8002cfe:	7819      	ldrb	r1, [r3, #0]
 8002d00:	4291      	cmp	r1, r2
 8002d02:	d001      	beq.n	8002d08 <checkHour+0x44>
		currentHour = gTime.Hours;
 8002d04:	701a      	strb	r2, [r3, #0]
		return true;
 8002d06:	2001      	movs	r0, #1
	} else {
		return false;
	}
}
 8002d08:	b009      	add	sp, #36	; 0x24
 8002d0a:	f85d fb04 	ldr.w	pc, [sp], #4
		return false;
 8002d0e:	2000      	movs	r0, #0
 8002d10:	e7fa      	b.n	8002d08 <checkHour+0x44>
 8002d12:	bf00      	nop
 8002d14:	20004144 	.word	0x20004144
 8002d18:	08005084 	.word	0x08005084
 8002d1c:	200040ad 	.word	0x200040ad
 8002d20:	20000004 	.word	0x20000004

08002d24 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 8002d24:	e92d 4887 	stmdb	sp!, {r0, r1, r2, r7, fp, lr}
		sum = read_data();

		humidity_int_units = (Rh_byte1) % 10;
		humidity_int_decimals = (Rh_byte1) / 10;

		if (HAL_GPIO_ReadPin(BlueB_GPIO_Port, BlueB_Pin)) {
 8002d28:	4c6d      	ldr	r4, [pc, #436]	; (8002ee0 <StartDefaultTask+0x1bc>)
					}
				}
			}
		} else if (HAL_GPIO_ReadPin(BlueB_GPIO_Port, BlueB_Pin)
				== GPIO_PIN_RESET) {
			display_temp = !display_temp;
 8002d2a:	4d6e      	ldr	r5, [pc, #440]	; (8002ee4 <StartDefaultTask+0x1c0>)
 8002d2c:	4f6e      	ldr	r7, [pc, #440]	; (8002ee8 <StartDefaultTask+0x1c4>)
		Rh_byte1 = read_data();
 8002d2e:	4e6f      	ldr	r6, [pc, #444]	; (8002eec <StartDefaultTask+0x1c8>)
		humidity_int_units = (Rh_byte1) % 10;
 8002d30:	f8df 8204 	ldr.w	r8, [pc, #516]	; 8002f38 <StartDefaultTask+0x214>
		humidity_int_decimals = (Rh_byte1) / 10;
 8002d34:	f8df 9204 	ldr.w	r9, [pc, #516]	; 8002f3c <StartDefaultTask+0x218>
		DHT11_start();
 8002d38:	f7ff ff56 	bl	8002be8 <DHT11_start>
		presence = check_response();
 8002d3c:	f7ff ff72 	bl	8002c24 <check_response>
 8002d40:	4b6b      	ldr	r3, [pc, #428]	; (8002ef0 <StartDefaultTask+0x1cc>)
 8002d42:	7018      	strb	r0, [r3, #0]
		Rh_byte1 = read_data();
 8002d44:	f7ff ff92 	bl	8002c6c <read_data>
 8002d48:	7030      	strb	r0, [r6, #0]
		Rh_byte2 = read_data();
 8002d4a:	f7ff ff8f 	bl	8002c6c <read_data>
 8002d4e:	4b69      	ldr	r3, [pc, #420]	; (8002ef4 <StartDefaultTask+0x1d0>)
 8002d50:	7018      	strb	r0, [r3, #0]
		Temp_byte1 = read_data();
 8002d52:	f7ff ff8b 	bl	8002c6c <read_data>
 8002d56:	4b68      	ldr	r3, [pc, #416]	; (8002ef8 <StartDefaultTask+0x1d4>)
 8002d58:	7018      	strb	r0, [r3, #0]
		Temp_byte2 = read_data();
 8002d5a:	f7ff ff87 	bl	8002c6c <read_data>
 8002d5e:	4b67      	ldr	r3, [pc, #412]	; (8002efc <StartDefaultTask+0x1d8>)
 8002d60:	7018      	strb	r0, [r3, #0]
		sum = read_data();
 8002d62:	f7ff ff83 	bl	8002c6c <read_data>
 8002d66:	4b66      	ldr	r3, [pc, #408]	; (8002f00 <StartDefaultTask+0x1dc>)
 8002d68:	8018      	strh	r0, [r3, #0]
		humidity_int_units = (Rh_byte1) % 10;
 8002d6a:	7833      	ldrb	r3, [r6, #0]
 8002d6c:	f04f 0b0a 	mov.w	fp, #10
		if (HAL_GPIO_ReadPin(BlueB_GPIO_Port, BlueB_Pin)) {
 8002d70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
		humidity_int_units = (Rh_byte1) % 10;
 8002d74:	fbb3 f2fb 	udiv	r2, r3, fp
		if (HAL_GPIO_ReadPin(BlueB_GPIO_Port, BlueB_Pin)) {
 8002d78:	4620      	mov	r0, r4
		humidity_int_units = (Rh_byte1) % 10;
 8002d7a:	fb0b 3312 	mls	r3, fp, r2, r3
 8002d7e:	f888 3000 	strb.w	r3, [r8]
		humidity_int_decimals = (Rh_byte1) / 10;
 8002d82:	f889 2000 	strb.w	r2, [r9]
		if (HAL_GPIO_ReadPin(BlueB_GPIO_Port, BlueB_Pin)) {
 8002d86:	f7fd fd6d 	bl	8000864 <HAL_GPIO_ReadPin>
 8002d8a:	2800      	cmp	r0, #0
 8002d8c:	f000 8095 	beq.w	8002eba <StartDefaultTask+0x196>
			if (TM_DS18B20_Is(DS_ROM)) {
 8002d90:	485c      	ldr	r0, [pc, #368]	; (8002f04 <StartDefaultTask+0x1e0>)
 8002d92:	f000 fd44 	bl	800381e <TM_DS18B20_Is>
 8002d96:	2800      	cmp	r0, #0
 8002d98:	d047      	beq.n	8002e2a <StartDefaultTask+0x106>
				if (TM_DS18B20_AllDone(&OW)) {
 8002d9a:	485b      	ldr	r0, [pc, #364]	; (8002f08 <StartDefaultTask+0x1e4>)
 8002d9c:	f000 fde7 	bl	800396e <TM_DS18B20_AllDone>
 8002da0:	2800      	cmp	r0, #0
 8002da2:	d042      	beq.n	8002e2a <StartDefaultTask+0x106>
					if (TM_DS18B20_Read(&OW, DS_ROM, &temp)) {
 8002da4:	f8df a198 	ldr.w	sl, [pc, #408]	; 8002f40 <StartDefaultTask+0x21c>
 8002da8:	4956      	ldr	r1, [pc, #344]	; (8002f04 <StartDefaultTask+0x1e0>)
 8002daa:	4857      	ldr	r0, [pc, #348]	; (8002f08 <StartDefaultTask+0x1e4>)
 8002dac:	4652      	mov	r2, sl
 8002dae:	f000 fc4d 	bl	800364c <TM_DS18B20_Read>
 8002db2:	2800      	cmp	r0, #0
 8002db4:	d07d      	beq.n	8002eb2 <StartDefaultTask+0x18e>
						TM_DS18B20_StartAll(&OW);
 8002db6:	4854      	ldr	r0, [pc, #336]	; (8002f08 <StartDefaultTask+0x1e4>)
 8002db8:	f000 fc3a 	bl	8003630 <TM_DS18B20_StartAll>
						temp_int_units = ((int8_t) temp) % 10;
 8002dbc:	edda 7a00 	vldr	s15, [sl]
 8002dc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002dc4:	edcd 7a01 	vstr	s15, [sp, #4]
 8002dc8:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 8002dcc:	fb93 f2fb 	sdiv	r2, r3, fp
 8002dd0:	fb0b 3b12 	mls	fp, fp, r2, r3
 8002dd4:	4b4d      	ldr	r3, [pc, #308]	; (8002f0c <StartDefaultTask+0x1e8>)
 8002dd6:	f883 b000 	strb.w	fp, [r3]
						temp_int_decimals = ((int8_t) temp) / 10;
 8002dda:	4b4d      	ldr	r3, [pc, #308]	; (8002f10 <StartDefaultTask+0x1ec>)
 8002ddc:	701a      	strb	r2, [r3, #0]
						if (checkHour()) {
 8002dde:	f7ff ff71 	bl	8002cc4 <checkHour>
 8002de2:	b310      	cbz	r0, 8002e2a <StartDefaultTask+0x106>
 8002de4:	4b4b      	ldr	r3, [pc, #300]	; (8002f14 <StartDefaultTask+0x1f0>)
							for (j = 0; j < 23; j++) {
 8002de6:	494c      	ldr	r1, [pc, #304]	; (8002f18 <StartDefaultTask+0x1f4>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	600a      	str	r2, [r1, #0]
 8002dec:	f103 0e17 	add.w	lr, r3, #23
 8002df0:	469c      	mov	ip, r3
 8002df2:	4573      	cmp	r3, lr
 8002df4:	d151      	bne.n	8002e9a <StartDefaultTask+0x176>
 8002df6:	b10a      	cbz	r2, 8002dfc <StartDefaultTask+0xd8>
 8002df8:	2317      	movs	r3, #23
 8002dfa:	600b      	str	r3, [r1, #0]
							temperatureTab[23] = (uint8_t) temp;
 8002dfc:	edda 7a00 	vldr	s15, [sl]
							for (k = 0; k < 23; k++) {
 8002e00:	4946      	ldr	r1, [pc, #280]	; (8002f1c <StartDefaultTask+0x1f8>)
							temperatureTab[23] = (uint8_t) temp;
 8002e02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
							for (k = 0; k < 23; k++) {
 8002e06:	2200      	movs	r2, #0
							temperatureTab[23] = (uint8_t) temp;
 8002e08:	ee17 3a90 	vmov	r3, s15
 8002e0c:	f88c 3017 	strb.w	r3, [ip, #23]
 8002e10:	4b43      	ldr	r3, [pc, #268]	; (8002f20 <StartDefaultTask+0x1fc>)
							for (k = 0; k < 23; k++) {
 8002e12:	600a      	str	r2, [r1, #0]
 8002e14:	f103 0e17 	add.w	lr, r3, #23
 8002e18:	469c      	mov	ip, r3
 8002e1a:	4573      	cmp	r3, lr
 8002e1c:	d143      	bne.n	8002ea6 <StartDefaultTask+0x182>
 8002e1e:	b10a      	cbz	r2, 8002e24 <StartDefaultTask+0x100>
 8002e20:	2317      	movs	r3, #23
 8002e22:	600b      	str	r3, [r1, #0]
							humidityTab[23] = (uint8_t) Rh_byte1;
 8002e24:	7833      	ldrb	r3, [r6, #0]
 8002e26:	f88c 3017 	strb.w	r3, [ip, #23]
		}
		if (display_temp) {
 8002e2a:	782a      	ldrb	r2, [r5, #0]
 8002e2c:	4b3d      	ldr	r3, [pc, #244]	; (8002f24 <StartDefaultTask+0x200>)
 8002e2e:	2a00      	cmp	r2, #0
 8002e30:	d04f      	beq.n	8002ed2 <StartDefaultTask+0x1ae>
			GPIOB->ODR = numbers[temp_int_decimals];
 8002e32:	4a37      	ldr	r2, [pc, #220]	; (8002f10 <StartDefaultTask+0x1ec>)
 8002e34:	7812      	ldrb	r2, [r2, #0]
 8002e36:	5c9a      	ldrb	r2, [r3, r2]
 8002e38:	617a      	str	r2, [r7, #20]
			GPIOC->ODR = numbers[temp_int_units];
 8002e3a:	4a34      	ldr	r2, [pc, #208]	; (8002f0c <StartDefaultTask+0x1e8>)
 8002e3c:	7812      	ldrb	r2, [r2, #0]
		} else {
			GPIOB->ODR = numbers[humidity_int_decimals];
			GPIOC->ODR = numbers[humidity_int_units];
 8002e3e:	5c9b      	ldrb	r3, [r3, r2]
		}
		LD2_TOGGLE();
 8002e40:	4e39      	ldr	r6, [pc, #228]	; (8002f28 <StartDefaultTask+0x204>)
			GPIOC->ODR = numbers[humidity_int_units];
 8002e42:	6163      	str	r3, [r4, #20]
		LD2_TOGGLE();
 8002e44:	6973      	ldr	r3, [r6, #20]
 8002e46:	f083 0320 	eor.w	r3, r3, #32
 8002e4a:	6173      	str	r3, [r6, #20]
		vTaskDelay(200);
 8002e4c:	20c8      	movs	r0, #200	; 0xc8
 8002e4e:	f7ff fbbd 	bl	80025cc <vTaskDelay>
		LD2_TOGGLE();
 8002e52:	6973      	ldr	r3, [r6, #20]
		HAL_UART_Receive(&huart1, (uint8_t*) &buffer, 1, 1000);
 8002e54:	4835      	ldr	r0, [pc, #212]	; (8002f2c <StartDefaultTask+0x208>)
		LD2_TOGGLE();
 8002e56:	f083 0320 	eor.w	r3, r3, #32
 8002e5a:	6173      	str	r3, [r6, #20]
		HAL_UART_Receive(&huart1, (uint8_t*) &buffer, 1, 1000);
 8002e5c:	4e34      	ldr	r6, [pc, #208]	; (8002f30 <StartDefaultTask+0x20c>)
 8002e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e62:	2201      	movs	r2, #1
 8002e64:	4631      	mov	r1, r6
 8002e66:	f7fe fee7 	bl	8001c38 <HAL_UART_Receive>
		if (*buffer == '1') {
 8002e6a:	7833      	ldrb	r3, [r6, #0]
 8002e6c:	2b31      	cmp	r3, #49	; 0x31
 8002e6e:	d10f      	bne.n	8002e90 <StartDefaultTask+0x16c>
			HAL_UART_Transmit(&huart1, temperatureTab, 24, 2500);
 8002e70:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8002e74:	2218      	movs	r2, #24
 8002e76:	4927      	ldr	r1, [pc, #156]	; (8002f14 <StartDefaultTask+0x1f0>)
 8002e78:	482c      	ldr	r0, [pc, #176]	; (8002f2c <StartDefaultTask+0x208>)
 8002e7a:	f7fe fe83 	bl	8001b84 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, humidityTab, 24, 2500);
 8002e7e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8002e82:	2218      	movs	r2, #24
 8002e84:	4926      	ldr	r1, [pc, #152]	; (8002f20 <StartDefaultTask+0x1fc>)
 8002e86:	4829      	ldr	r0, [pc, #164]	; (8002f2c <StartDefaultTask+0x208>)
 8002e88:	f7fe fe7c 	bl	8001b84 <HAL_UART_Transmit>
			*buffer = '0';
 8002e8c:	2330      	movs	r3, #48	; 0x30
 8002e8e:	7033      	strb	r3, [r6, #0]
		}
		vTaskDelay(2800);
 8002e90:	f44f 602f 	mov.w	r0, #2800	; 0xaf0
 8002e94:	f7ff fb9a 	bl	80025cc <vTaskDelay>
		DHT11_start();
 8002e98:	e749      	b.n	8002d2e <StartDefaultTask+0xa>
								temperatureTab[j] = temperatureTab[j + 1];
 8002e9a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8002e9e:	f803 2c01 	strb.w	r2, [r3, #-1]
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	e7a5      	b.n	8002df2 <StartDefaultTask+0xce>
								humidityTab[k] = humidityTab[k + 1];
 8002ea6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8002eaa:	f803 2c01 	strb.w	r2, [r3, #-1]
 8002eae:	4602      	mov	r2, r0
 8002eb0:	e7b3      	b.n	8002e1a <StartDefaultTask+0xf6>
						printf("DATA collection failed");
 8002eb2:	4820      	ldr	r0, [pc, #128]	; (8002f34 <StartDefaultTask+0x210>)
 8002eb4:	f001 f8c8 	bl	8004048 <iprintf>
 8002eb8:	e7b7      	b.n	8002e2a <StartDefaultTask+0x106>
		} else if (HAL_GPIO_ReadPin(BlueB_GPIO_Port, BlueB_Pin)
 8002eba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ebe:	4620      	mov	r0, r4
 8002ec0:	f7fd fcd0 	bl	8000864 <HAL_GPIO_ReadPin>
 8002ec4:	2800      	cmp	r0, #0
 8002ec6:	d1b0      	bne.n	8002e2a <StartDefaultTask+0x106>
			display_temp = !display_temp;
 8002ec8:	782b      	ldrb	r3, [r5, #0]
 8002eca:	f083 0301 	eor.w	r3, r3, #1
 8002ece:	702b      	strb	r3, [r5, #0]
 8002ed0:	e7ab      	b.n	8002e2a <StartDefaultTask+0x106>
			GPIOB->ODR = numbers[humidity_int_decimals];
 8002ed2:	f899 2000 	ldrb.w	r2, [r9]
 8002ed6:	5c9a      	ldrb	r2, [r3, r2]
 8002ed8:	617a      	str	r2, [r7, #20]
			GPIOC->ODR = numbers[humidity_int_units];
 8002eda:	f898 2000 	ldrb.w	r2, [r8]
 8002ede:	e7ae      	b.n	8002e3e <StartDefaultTask+0x11a>
 8002ee0:	40020800 	.word	0x40020800
 8002ee4:	20000005 	.word	0x20000005
 8002ee8:	40020400 	.word	0x40020400
 8002eec:	200040ac 	.word	0x200040ac
 8002ef0:	20004038 	.word	0x20004038
 8002ef4:	20004164 	.word	0x20004164
 8002ef8:	20004140 	.word	0x20004140
 8002efc:	20004200 	.word	0x20004200
 8002f00:	200040aa 	.word	0x200040aa
 8002f04:	20004088 	.word	0x20004088
 8002f08:	200040e4 	.word	0x200040e4
 8002f0c:	200041bc 	.word	0x200041bc
 8002f10:	200040e2 	.word	0x200040e2
 8002f14:	20004090 	.word	0x20004090
 8002f18:	20004030 	.word	0x20004030
 8002f1c:	20004034 	.word	0x20004034
 8002f20:	200040c8 	.word	0x200040c8
 8002f24:	20000006 	.word	0x20000006
 8002f28:	40020000 	.word	0x40020000
 8002f2c:	20004100 	.word	0x20004100
 8002f30:	20004141 	.word	0x20004141
 8002f34:	0800506d 	.word	0x0800506d
 8002f38:	200040a8 	.word	0x200040a8
 8002f3c:	200040fc 	.word	0x200040fc
 8002f40:	200040c4 	.word	0x200040c4

08002f44 <SystemClock_Config>:
void SystemClock_Config(void) {
 8002f44:	b530      	push	{r4, r5, lr}
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002f46:	2400      	movs	r4, #0
void SystemClock_Config(void) {
 8002f48:	b0ad      	sub	sp, #180	; 0xb4
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002f4a:	4621      	mov	r1, r4
 8002f4c:	2214      	movs	r2, #20
 8002f4e:	a803      	add	r0, sp, #12
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002f50:	9409      	str	r4, [sp, #36]	; 0x24
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002f52:	f000 ffc8 	bl	8003ee6 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8002f56:	4621      	mov	r1, r4
 8002f58:	225c      	movs	r2, #92	; 0x5c
 8002f5a:	a815      	add	r0, sp, #84	; 0x54
 8002f5c:	f000 ffc3 	bl	8003ee6 <memset>
	__HAL_RCC_PWR_CLK_ENABLE();
 8002f60:	4b22      	ldr	r3, [pc, #136]	; (8002fec <SystemClock_Config+0xa8>)
 8002f62:	9401      	str	r4, [sp, #4]
 8002f64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f66:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002f6a:	641a      	str	r2, [r3, #64]	; 0x40
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f72:	9301      	str	r3, [sp, #4]
 8002f74:	9b01      	ldr	r3, [sp, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f76:	4b1e      	ldr	r3, [pc, #120]	; (8002ff0 <SystemClock_Config+0xac>)
 8002f78:	9402      	str	r4, [sp, #8]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002f80:	601a      	str	r2, [r3, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
	RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8002f84:	940a      	str	r4, [sp, #40]	; 0x28
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f86:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002f8a:	9302      	str	r3, [sp, #8]
 8002f8c:	9b02      	ldr	r3, [sp, #8]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8002f8e:	230a      	movs	r3, #10
 8002f90:	9308      	str	r3, [sp, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f92:	2210      	movs	r2, #16
 8002f94:	2301      	movs	r3, #1
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f96:	2502      	movs	r5, #2
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f98:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002f9c:	930d      	str	r3, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLN = 180;
 8002f9e:	2208      	movs	r2, #8
 8002fa0:	23b4      	movs	r3, #180	; 0xb4
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002fa2:	a808      	add	r0, sp, #32
	RCC_OscInitStruct.PLL.PLLN = 180;
 8002fa4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002fa8:	e9cd 540e 	strd	r5, r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8002fac:	e9cd 5512 	strd	r5, r5, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8002fb0:	9514      	str	r5, [sp, #80]	; 0x50
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002fb2:	f7fd ffcb 	bl	8000f4c <HAL_RCC_OscConfig>
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8002fb6:	f7fd fc61 	bl	800087c <HAL_PWREx_EnableOverDrive>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002fba:	230f      	movs	r3, #15
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002fbc:	e9cd 3503 	strd	r3, r5, [sp, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002fc0:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8002fc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fc8:	e9cd 1306 	strd	r1, r3, [sp, #24]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8002fcc:	a803      	add	r0, sp, #12
 8002fce:	2105      	movs	r1, #5
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fd0:	9405      	str	r4, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8002fd2:	f7fd fc8f 	bl	80008f4 <HAL_RCC_ClockConfig>
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002fd6:	2320      	movs	r3, #32
 8002fd8:	9315      	str	r3, [sp, #84]	; 0x54
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8002fda:	a815      	add	r0, sp, #84	; 0x54
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002fdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fe0:	9325      	str	r3, [sp, #148]	; 0x94
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8002fe2:	f7fd fd63 	bl	8000aac <HAL_RCCEx_PeriphCLKConfig>
}
 8002fe6:	b02d      	add	sp, #180	; 0xb4
 8002fe8:	bd30      	pop	{r4, r5, pc}
 8002fea:	bf00      	nop
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	40007000 	.word	0x40007000

08002ff4 <main>:
int main(void) {
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b08c      	sub	sp, #48	; 0x30
	TM_RCC_InitSystem();
 8002ff8:	f000 fec6 	bl	8003d88 <TM_RCC_InitSystem>
	GPIOC->ODR = 0xff;
 8002ffc:	4c7e      	ldr	r4, [pc, #504]	; (80031f8 <main+0x204>)
	GPIOB->ODR = 0xff;
 8002ffe:	4a7f      	ldr	r2, [pc, #508]	; (80031fc <main+0x208>)
	GPIOC->ODR = 0xff;
 8003000:	23ff      	movs	r3, #255	; 0xff
 8003002:	6163      	str	r3, [r4, #20]
	GPIOB->ODR = 0xff;
 8003004:	6153      	str	r3, [r2, #20]
	HAL_Init();
 8003006:	f7fd fad3 	bl	80005b0 <HAL_Init>
	TM_OneWire_Init(&OW, GPIOC, GPIO_PIN_9);
 800300a:	487d      	ldr	r0, [pc, #500]	; (8003200 <main+0x20c>)
 800300c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003010:	4621      	mov	r1, r4
 8003012:	f000 fd7b 	bl	8003b0c <TM_OneWire_Init>
	if (TM_OneWire_First(&OW)) {
 8003016:	487a      	ldr	r0, [pc, #488]	; (8003200 <main+0x20c>)
 8003018:	f000 fe76 	bl	8003d08 <TM_OneWire_First>
 800301c:	b118      	cbz	r0, 8003026 <main+0x32>
		TM_OneWire_GetFullROM(&OW, DS_ROM);
 800301e:	4979      	ldr	r1, [pc, #484]	; (8003204 <main+0x210>)
 8003020:	4877      	ldr	r0, [pc, #476]	; (8003200 <main+0x20c>)
 8003022:	f000 fe89 	bl	8003d38 <TM_OneWire_GetFullROM>
	if (TM_DS18B20_Is(DS_ROM)) {
 8003026:	4877      	ldr	r0, [pc, #476]	; (8003204 <main+0x210>)
 8003028:	f000 fbf9 	bl	800381e <TM_DS18B20_Is>
 800302c:	b190      	cbz	r0, 8003054 <main+0x60>
		TM_DS18B20_SetResolution(&OW, DS_ROM, TM_DS18B20_Resolution_9bits);
 800302e:	2209      	movs	r2, #9
 8003030:	4974      	ldr	r1, [pc, #464]	; (8003204 <main+0x210>)
 8003032:	4873      	ldr	r0, [pc, #460]	; (8003200 <main+0x20c>)
 8003034:	f000 fb8c 	bl	8003750 <TM_DS18B20_SetResolution>
		TM_DS18B20_SetAlarmHighTemperature(&OW, DS_ROM, 30);
 8003038:	221e      	movs	r2, #30
 800303a:	4972      	ldr	r1, [pc, #456]	; (8003204 <main+0x210>)
 800303c:	4870      	ldr	r0, [pc, #448]	; (8003200 <main+0x20c>)
 800303e:	f000 fc45 	bl	80038cc <TM_DS18B20_SetAlarmHighTemperature>
		TM_DS18B20_SetAlarmLowTemperature(&OW, DS_ROM, 10);
 8003042:	4970      	ldr	r1, [pc, #448]	; (8003204 <main+0x210>)
 8003044:	486e      	ldr	r0, [pc, #440]	; (8003200 <main+0x20c>)
 8003046:	220a      	movs	r2, #10
 8003048:	f000 fbef 	bl	800382a <TM_DS18B20_SetAlarmLowTemperature>
		TM_DS18B20_Start(&OW, DS_ROM);
 800304c:	496d      	ldr	r1, [pc, #436]	; (8003204 <main+0x210>)
 800304e:	486c      	ldr	r0, [pc, #432]	; (8003200 <main+0x20c>)
 8003050:	f000 fada 	bl	8003608 <TM_DS18B20_Start>
	SystemClock_Config();
 8003054:	f7ff ff76 	bl	8002f44 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003058:	2214      	movs	r2, #20
 800305a:	2100      	movs	r1, #0
 800305c:	eb0d 0002 	add.w	r0, sp, r2
 8003060:	f000 ff41 	bl	8003ee6 <memset>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003064:	2400      	movs	r4, #0
 8003066:	4b68      	ldr	r3, [pc, #416]	; (8003208 <main+0x214>)
 8003068:	9401      	str	r4, [sp, #4]
 800306a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	HAL_GPIO_WritePin(GPIOC,
 800306c:	4862      	ldr	r0, [pc, #392]	; (80031f8 <main+0x204>)
	htim7.Instance = TIM7;
 800306e:	4e67      	ldr	r6, [pc, #412]	; (800320c <main+0x218>)
	huart1.Init.BaudRate = 9600;
 8003070:	4d67      	ldr	r5, [pc, #412]	; (8003210 <main+0x21c>)
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003072:	f042 0204 	orr.w	r2, r2, #4
 8003076:	631a      	str	r2, [r3, #48]	; 0x30
 8003078:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800307a:	f002 0204 	and.w	r2, r2, #4
 800307e:	9201      	str	r2, [sp, #4]
 8003080:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8003082:	9402      	str	r4, [sp, #8]
 8003084:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003086:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800308a:	631a      	str	r2, [r3, #48]	; 0x30
 800308c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800308e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003092:	9202      	str	r2, [sp, #8]
 8003094:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003096:	9403      	str	r4, [sp, #12]
 8003098:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800309a:	f042 0201 	orr.w	r2, r2, #1
 800309e:	631a      	str	r2, [r3, #48]	; 0x30
 80030a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030a2:	f002 0201 	and.w	r2, r2, #1
 80030a6:	9203      	str	r2, [sp, #12]
 80030a8:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80030aa:	9404      	str	r4, [sp, #16]
 80030ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030ae:	f042 0202 	orr.w	r2, r2, #2
 80030b2:	631a      	str	r2, [r3, #48]	; 0x30
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	9304      	str	r3, [sp, #16]
	HAL_GPIO_WritePin(GPIOC,
 80030bc:	4622      	mov	r2, r4
 80030be:	f240 21ff 	movw	r1, #767	; 0x2ff
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80030c2:	9b04      	ldr	r3, [sp, #16]
	HAL_GPIO_WritePin(GPIOC,
 80030c4:	f7fd fbd4 	bl	8000870 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80030c8:	4622      	mov	r2, r4
 80030ca:	2120      	movs	r1, #32
 80030cc:	4851      	ldr	r0, [pc, #324]	; (8003214 <main+0x220>)
 80030ce:	f7fd fbcf 	bl	8000870 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,
 80030d2:	4622      	mov	r2, r4
 80030d4:	217f      	movs	r1, #127	; 0x7f
 80030d6:	4849      	ldr	r0, [pc, #292]	; (80031fc <main+0x208>)
 80030d8:	f7fd fbca 	bl	8000870 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80030dc:	4b4e      	ldr	r3, [pc, #312]	; (8003218 <main+0x224>)
	HAL_GPIO_Init(BlueB_GPIO_Port, &GPIO_InitStruct);
 80030de:	4846      	ldr	r0, [pc, #280]	; (80031f8 <main+0x204>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e0:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80030e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	HAL_GPIO_Init(BlueB_GPIO_Port, &GPIO_InitStruct);
 80030e6:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80030e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030ec:	2701      	movs	r7, #1
	HAL_GPIO_Init(BlueB_GPIO_Port, &GPIO_InitStruct);
 80030ee:	f7fd fadf 	bl	80006b0 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030f2:	f240 23ff 	movw	r3, #767	; 0x2ff
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030f6:	a905      	add	r1, sp, #20
 80030f8:	483f      	ldr	r0, [pc, #252]	; (80031f8 <main+0x204>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030fa:	e9cd 3705 	strd	r3, r7, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030fe:	e9cd 4407 	strd	r4, r4, [sp, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003102:	f7fd fad5 	bl	80006b0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LD2_Pin;
 8003106:	2320      	movs	r3, #32
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003108:	a905      	add	r1, sp, #20
 800310a:	4842      	ldr	r0, [pc, #264]	; (8003214 <main+0x220>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800310c:	e9cd 3705 	strd	r3, r7, [sp, #20]
	GPIO_InitStruct.Pin = A1_Pin | B1_Pin | C1_Pin | D1_Pin | E1_Pin | F1_Pin
 8003110:	f04f 087f 	mov.w	r8, #127	; 0x7f
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003114:	e9cd 4407 	strd	r4, r4, [sp, #28]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003118:	f7fd faca 	bl	80006b0 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800311c:	a905      	add	r1, sp, #20
 800311e:	4837      	ldr	r0, [pc, #220]	; (80031fc <main+0x208>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003120:	e9cd 8705 	strd	r8, r7, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003124:	e9cd 4407 	strd	r4, r4, [sp, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003128:	f7fd fac2 	bl	80006b0 <HAL_GPIO_Init>
	htim7.Init.Prescaler = 179;
 800312c:	493b      	ldr	r1, [pc, #236]	; (800321c <main+0x228>)
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800312e:	60b4      	str	r4, [r6, #8]
	htim7.Init.Prescaler = 179;
 8003130:	23b3      	movs	r3, #179	; 0xb3
 8003132:	e9c6 1300 	strd	r1, r3, [r6]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 8003136:	4630      	mov	r0, r6
	htim7.Init.Period = 89;
 8003138:	2359      	movs	r3, #89	; 0x59
 800313a:	60f3      	str	r3, [r6, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800313c:	61b4      	str	r4, [r6, #24]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800313e:	e9cd 4405 	strd	r4, r4, [sp, #20]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 8003142:	f7fe fb67 	bl	8001814 <HAL_TIM_Base_Init>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig)
 8003146:	a905      	add	r1, sp, #20
 8003148:	4630      	mov	r0, r6
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800314a:	e9cd 4405 	strd	r4, r4, [sp, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig)
 800314e:	f7fe fb7b 	bl	8001848 <HAL_TIMEx_MasterConfigSynchronization>
	huart1.Instance = USART1;
 8003152:	4833      	ldr	r0, [pc, #204]	; (8003220 <main+0x22c>)
	huart1.Init.BaudRate = 9600;
 8003154:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8003158:	e9c0 5300 	strd	r5, r3, [r0]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800315c:	230c      	movs	r3, #12
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800315e:	e9c0 3405 	strd	r3, r4, [r0, #20]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8003162:	e9c0 4402 	strd	r4, r4, [r0, #8]
	huart1.Init.Parity = UART_PARITY_NONE;
 8003166:	6104      	str	r4, [r0, #16]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003168:	61c4      	str	r4, [r0, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800316a:	f7fe fcdd 	bl	8001b28 <HAL_UART_Init>
	RTC_TimeTypeDef sTime = { 0 };
 800316e:	2214      	movs	r2, #20
 8003170:	4621      	mov	r1, r4
 8003172:	eb0d 0002 	add.w	r0, sp, r2
 8003176:	f000 feb6 	bl	8003ee6 <memset>
	hrtc.Instance = RTC;
 800317a:	4d2a      	ldr	r5, [pc, #168]	; (8003224 <main+0x230>)
 800317c:	4b2a      	ldr	r3, [pc, #168]	; (8003228 <main+0x234>)
	hrtc.Init.AsynchPrediv = 127;
 800317e:	f8c5 8008 	str.w	r8, [r5, #8]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003182:	e9c5 3400 	strd	r3, r4, [r5]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8003186:	4628      	mov	r0, r5
	hrtc.Init.SynchPrediv = 255;
 8003188:	23ff      	movs	r3, #255	; 0xff
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800318a:	e9c5 3403 	strd	r3, r4, [r5, #12]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800318e:	e9c5 4405 	strd	r4, r4, [r5, #20]
	RTC_DateTypeDef sDate = { 0 };
 8003192:	9400      	str	r4, [sp, #0]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8003194:	f7fe f8a6 	bl	80012e4 <HAL_RTC_Init>
	sTime.Hours = 0x12;
 8003198:	2312      	movs	r3, #18
 800319a:	f8ad 3014 	strh.w	r3, [sp, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 800319e:	463a      	mov	r2, r7
	sTime.Minutes = 0x00;
 80031a0:	2322      	movs	r3, #34	; 0x22
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 80031a2:	a905      	add	r1, sp, #20
 80031a4:	4628      	mov	r0, r5
	sTime.Minutes = 0x00;
 80031a6:	f88d 3016 	strb.w	r3, [sp, #22]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80031aa:	e9cd 4408 	strd	r4, r4, [sp, #32]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 80031ae:	f7fe f8f2 	bl	8001396 <HAL_RTC_SetTime>
	sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 80031b2:	a90c      	add	r1, sp, #48	; 0x30
 80031b4:	4b1d      	ldr	r3, [pc, #116]	; (800322c <main+0x238>)
 80031b6:	f841 3d30 	str.w	r3, [r1, #-48]!
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 80031ba:	463a      	mov	r2, r7
 80031bc:	4628      	mov	r0, r5
 80031be:	f7fe f95b 	bl	8001478 <HAL_RTC_SetDate>
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 80031c2:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80031c6:	4639      	mov	r1, r7
 80031c8:	4628      	mov	r0, r5
 80031ca:	f7fe fa01 	bl	80015d0 <HAL_RTCEx_BKUPWrite>
	HAL_TIM_Base_Start_IT(&htim7);
 80031ce:	4630      	mov	r0, r6
	osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 2048);
 80031d0:	4e17      	ldr	r6, [pc, #92]	; (8003230 <main+0x23c>)
	HAL_TIM_Base_Start_IT(&htim7);
 80031d2:	f7fe fa02 	bl	80015da <HAL_TIM_Base_Start_IT>
	osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 2048);
 80031d6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80031d8:	ad05      	add	r5, sp, #20
 80031da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031dc:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80031e0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80031e4:	4621      	mov	r1, r4
 80031e6:	a805      	add	r0, sp, #20
 80031e8:	f7fe fe71 	bl	8001ece <osThreadCreate>
 80031ec:	4b11      	ldr	r3, [pc, #68]	; (8003234 <main+0x240>)
 80031ee:	6018      	str	r0, [r3, #0]
	osKernelStart();
 80031f0:	f7fe fe68 	bl	8001ec4 <osKernelStart>
 80031f4:	e7fe      	b.n	80031f4 <main+0x200>
 80031f6:	bf00      	nop
 80031f8:	40020800 	.word	0x40020800
 80031fc:	40020400 	.word	0x40020400
 8003200:	200040e4 	.word	0x200040e4
 8003204:	20004088 	.word	0x20004088
 8003208:	40023800 	.word	0x40023800
 800320c:	200041c0 	.word	0x200041c0
 8003210:	40011000 	.word	0x40011000
 8003214:	40020000 	.word	0x40020000
 8003218:	10210000 	.word	0x10210000
 800321c:	40001400 	.word	0x40001400
 8003220:	20004100 	.word	0x20004100
 8003224:	20004144 	.word	0x20004144
 8003228:	40002800 	.word	0x40002800
 800322c:	20031204 	.word	0x20031204
 8003230:	0800504c 	.word	0x0800504c
 8003234:	20004084 	.word	0x20004084

08003238 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM7) {
 8003238:	6802      	ldr	r2, [r0, #0]
 800323a:	4b03      	ldr	r3, [pc, #12]	; (8003248 <HAL_TIM_PeriodElapsedCallback+0x10>)
 800323c:	429a      	cmp	r2, r3
 800323e:	d101      	bne.n	8003244 <HAL_TIM_PeriodElapsedCallback+0xc>
		HAL_IncTick();
 8003240:	f000 b9a4 	b.w	800358c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	40001400 	.word	0x40001400

0800324c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800324c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800324e:	4b0e      	ldr	r3, [pc, #56]	; (8003288 <HAL_MspInit+0x3c>)
 8003250:	2200      	movs	r2, #0
 8003252:	9200      	str	r2, [sp, #0]
 8003254:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003256:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800325a:	6459      	str	r1, [r3, #68]	; 0x44
 800325c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800325e:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8003262:	9100      	str	r1, [sp, #0]
 8003264:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003266:	9201      	str	r2, [sp, #4]
 8003268:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800326a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800326e:	6419      	str	r1, [r3, #64]	; 0x40
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003276:	9301      	str	r3, [sp, #4]
 8003278:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800327a:	210f      	movs	r1, #15
 800327c:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003280:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003282:	f7fd b9c1 	b.w	8000608 <HAL_NVIC_SetPriority>
 8003286:	bf00      	nop
 8003288:	40023800 	.word	0x40023800

0800328c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800328c:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM7)
 800328e:	4b0f      	ldr	r3, [pc, #60]	; (80032cc <HAL_TIM_Base_MspInit+0x40>)
 8003290:	6802      	ldr	r2, [r0, #0]
 8003292:	429a      	cmp	r2, r3
 8003294:	d116      	bne.n	80032c4 <HAL_TIM_Base_MspInit+0x38>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003296:	2200      	movs	r2, #0
 8003298:	f503 3309 	add.w	r3, r3, #140288	; 0x22400
 800329c:	9201      	str	r2, [sp, #4]
 800329e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80032a0:	f041 0120 	orr.w	r1, r1, #32
 80032a4:	6419      	str	r1, [r3, #64]	; 0x40
 80032a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a8:	f003 0320 	and.w	r3, r3, #32
 80032ac:	9301      	str	r3, [sp, #4]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80032ae:	4611      	mov	r1, r2
 80032b0:	2037      	movs	r0, #55	; 0x37
    __HAL_RCC_TIM7_CLK_ENABLE();
 80032b2:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80032b4:	f7fd f9a8 	bl	8000608 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80032b8:	2037      	movs	r0, #55	; 0x37
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80032ba:	b003      	add	sp, #12
 80032bc:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80032c0:	f7fd b9d6 	b.w	8000670 <HAL_NVIC_EnableIRQ>
}
 80032c4:	b003      	add	sp, #12
 80032c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80032ca:	bf00      	nop
 80032cc:	40001400 	.word	0x40001400

080032d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032d0:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d2:	2214      	movs	r2, #20
{
 80032d4:	b08a      	sub	sp, #40	; 0x28
 80032d6:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d8:	2100      	movs	r1, #0
 80032da:	eb0d 0002 	add.w	r0, sp, r2
 80032de:	f000 fe02 	bl	8003ee6 <memset>
  if(huart->Instance==USART1)
 80032e2:	6823      	ldr	r3, [r4, #0]
 80032e4:	4a30      	ldr	r2, [pc, #192]	; (80033a8 <HAL_UART_MspInit+0xd8>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d12f      	bne.n	800334a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80032ea:	4b30      	ldr	r3, [pc, #192]	; (80033ac <HAL_UART_MspInit+0xdc>)
 80032ec:	2400      	movs	r4, #0
 80032ee:	9401      	str	r4, [sp, #4]
 80032f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032f2:	f042 0210 	orr.w	r2, r2, #16
 80032f6:	645a      	str	r2, [r3, #68]	; 0x44
 80032f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032fa:	f002 0210 	and.w	r2, r2, #16
 80032fe:	9201      	str	r2, [sp, #4]
 8003300:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003302:	9402      	str	r4, [sp, #8]
 8003304:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003306:	f042 0201 	orr.w	r2, r2, #1
 800330a:	631a      	str	r2, [r3, #48]	; 0x30
 800330c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	9302      	str	r3, [sp, #8]
 8003314:	9b02      	ldr	r3, [sp, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003316:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 800331a:	2302      	movs	r3, #2
 800331c:	e9cd 0305 	strd	r0, r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003320:	f04f 0c01 	mov.w	ip, #1
 8003324:	2303      	movs	r3, #3
 8003326:	e9cd c307 	strd	ip, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800332a:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800332c:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800332e:	4820      	ldr	r0, [pc, #128]	; (80033b0 <HAL_UART_MspInit+0xe0>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003330:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003332:	f7fd f9bd 	bl	80006b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003336:	2025      	movs	r0, #37	; 0x25
 8003338:	4622      	mov	r2, r4
 800333a:	2105      	movs	r1, #5
 800333c:	f7fd f964 	bl	8000608 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003340:	2025      	movs	r0, #37	; 0x25
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003342:	f7fd f995 	bl	8000670 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003346:	b00a      	add	sp, #40	; 0x28
 8003348:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART2)
 800334a:	4a1a      	ldr	r2, [pc, #104]	; (80033b4 <HAL_UART_MspInit+0xe4>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d1fa      	bne.n	8003346 <HAL_UART_MspInit+0x76>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003350:	4b16      	ldr	r3, [pc, #88]	; (80033ac <HAL_UART_MspInit+0xdc>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003352:	4817      	ldr	r0, [pc, #92]	; (80033b0 <HAL_UART_MspInit+0xe0>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8003354:	2400      	movs	r4, #0
 8003356:	9403      	str	r4, [sp, #12]
 8003358:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800335a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800335e:	641a      	str	r2, [r3, #64]	; 0x40
 8003360:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003362:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003366:	9203      	str	r2, [sp, #12]
 8003368:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800336a:	9404      	str	r4, [sp, #16]
 800336c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800336e:	f042 0201 	orr.w	r2, r2, #1
 8003372:	631a      	str	r2, [r3, #48]	; 0x30
 8003374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800337c:	220c      	movs	r2, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800337e:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003380:	2302      	movs	r3, #2
 8003382:	e9cd 2305 	strd	r2, r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003386:	2101      	movs	r1, #1
 8003388:	2303      	movs	r3, #3
 800338a:	e9cd 1307 	strd	r1, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800338e:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003390:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003392:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003394:	f7fd f98c 	bl	80006b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003398:	2026      	movs	r0, #38	; 0x26
 800339a:	4622      	mov	r2, r4
 800339c:	2105      	movs	r1, #5
 800339e:	f7fd f933 	bl	8000608 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80033a2:	2026      	movs	r0, #38	; 0x26
 80033a4:	e7cd      	b.n	8003342 <HAL_UART_MspInit+0x72>
 80033a6:	bf00      	nop
 80033a8:	40011000 	.word	0x40011000
 80033ac:	40023800 	.word	0x40023800
 80033b0:	40020000 	.word	0x40020000
 80033b4:	40004400 	.word	0x40004400

080033b8 <HAL_RTC_MspInit>:
}


void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 80033b8:	6802      	ldr	r2, [r0, #0]
 80033ba:	4b03      	ldr	r3, [pc, #12]	; (80033c8 <HAL_RTC_MspInit+0x10>)
 80033bc:	429a      	cmp	r2, r3
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80033be:	bf02      	ittt	eq
 80033c0:	4b02      	ldreq	r3, [pc, #8]	; (80033cc <HAL_RTC_MspInit+0x14>)
 80033c2:	2201      	moveq	r2, #1
 80033c4:	601a      	streq	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80033c6:	4770      	bx	lr
 80033c8:	40002800 	.word	0x40002800
 80033cc:	42470e3c 	.word	0x42470e3c

080033d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033d0:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80033d2:	4601      	mov	r1, r0
{
 80033d4:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80033d6:	2200      	movs	r2, #0
 80033d8:	2036      	movs	r0, #54	; 0x36
 80033da:	f7fd f915 	bl	8000608 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80033de:	2036      	movs	r0, #54	; 0x36
 80033e0:	f7fd f946 	bl	8000670 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80033e4:	2500      	movs	r5, #0
 80033e6:	4b15      	ldr	r3, [pc, #84]	; (800343c <HAL_InitTick+0x6c>)
 80033e8:	9502      	str	r5, [sp, #8]
 80033ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80033ec:	4c14      	ldr	r4, [pc, #80]	; (8003440 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 80033ee:	f042 0210 	orr.w	r2, r2, #16
 80033f2:	641a      	str	r2, [r3, #64]	; 0x40
 80033f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f6:	f003 0310 	and.w	r3, r3, #16
 80033fa:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80033fc:	a901      	add	r1, sp, #4
 80033fe:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003400:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003402:	f7fd fb35 	bl	8000a70 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003406:	f7fd fb13 	bl	8000a30 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 800340a:	4b0e      	ldr	r3, [pc, #56]	; (8003444 <HAL_InitTick+0x74>)
 800340c:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800340e:	f240 33e7 	movw	r3, #999	; 0x3e7
 8003412:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003414:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003416:	4b0c      	ldr	r3, [pc, #48]	; (8003448 <HAL_InitTick+0x78>)
 8003418:	fbb0 f0f3 	udiv	r0, r0, r3
 800341c:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 800341e:	6060      	str	r0, [r4, #4]
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003420:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8003422:	6125      	str	r5, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003424:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003426:	f7fe f9f5 	bl	8001814 <HAL_TIM_Base_Init>
 800342a:	b920      	cbnz	r0, 8003436 <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800342c:	4620      	mov	r0, r4
 800342e:	f7fe f8d4 	bl	80015da <HAL_TIM_Base_Start_IT>
  }

  /* Return function status */
  return HAL_ERROR;
}
 8003432:	b009      	add	sp, #36	; 0x24
 8003434:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 8003436:	2001      	movs	r0, #1
 8003438:	e7fb      	b.n	8003432 <HAL_InitTick+0x62>
 800343a:	bf00      	nop
 800343c:	40023800 	.word	0x40023800
 8003440:	20004204 	.word	0x20004204
 8003444:	40001000 	.word	0x40001000
 8003448:	000f4240 	.word	0x000f4240

0800344c <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800344c:	4801      	ldr	r0, [pc, #4]	; (8003454 <USART1_IRQHandler+0x8>)
 800344e:	f7fe bc91 	b.w	8001d74 <HAL_UART_IRQHandler>
 8003452:	bf00      	nop
 8003454:	20004100 	.word	0x20004100

08003458 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003458:	4770      	bx	lr

0800345a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800345a:	e7fe      	b.n	800345a <HardFault_Handler>

0800345c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800345c:	e7fe      	b.n	800345c <MemManage_Handler>

0800345e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800345e:	e7fe      	b.n	800345e <BusFault_Handler>

08003460 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003460:	e7fe      	b.n	8003460 <UsageFault_Handler>

08003462 <DebugMon_Handler>:
 8003462:	4770      	bx	lr

08003464 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003464:	4801      	ldr	r0, [pc, #4]	; (800346c <TIM6_DAC_IRQHandler+0x8>)
 8003466:	f7fe b8cc 	b.w	8001602 <HAL_TIM_IRQHandler>
 800346a:	bf00      	nop
 800346c:	20004204 	.word	0x20004204

08003470 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003470:	4801      	ldr	r0, [pc, #4]	; (8003478 <TIM7_IRQHandler+0x8>)
 8003472:	f7fe b8c6 	b.w	8001602 <HAL_TIM_IRQHandler>
 8003476:	bf00      	nop
 8003478:	200041c0 	.word	0x200041c0

0800347c <_read>:
 800347c:	b570      	push	{r4, r5, r6, lr}
 800347e:	460e      	mov	r6, r1
 8003480:	4615      	mov	r5, r2
 8003482:	460c      	mov	r4, r1
 8003484:	1ba3      	subs	r3, r4, r6
 8003486:	429d      	cmp	r5, r3
 8003488:	dc01      	bgt.n	800348e <_read+0x12>
 800348a:	4628      	mov	r0, r5
 800348c:	bd70      	pop	{r4, r5, r6, pc}
 800348e:	f3af 8000 	nop.w
 8003492:	f804 0b01 	strb.w	r0, [r4], #1
 8003496:	e7f5      	b.n	8003484 <_read+0x8>

08003498 <_write>:
 8003498:	b570      	push	{r4, r5, r6, lr}
 800349a:	460e      	mov	r6, r1
 800349c:	4615      	mov	r5, r2
 800349e:	460c      	mov	r4, r1
 80034a0:	1ba3      	subs	r3, r4, r6
 80034a2:	429d      	cmp	r5, r3
 80034a4:	dc01      	bgt.n	80034aa <_write+0x12>
 80034a6:	4628      	mov	r0, r5
 80034a8:	bd70      	pop	{r4, r5, r6, pc}
 80034aa:	f814 0b01 	ldrb.w	r0, [r4], #1
 80034ae:	f3af 8000 	nop.w
 80034b2:	e7f5      	b.n	80034a0 <_write+0x8>

080034b4 <_sbrk>:
 80034b4:	b508      	push	{r3, lr}
 80034b6:	4b0a      	ldr	r3, [pc, #40]	; (80034e0 <_sbrk+0x2c>)
 80034b8:	6819      	ldr	r1, [r3, #0]
 80034ba:	4602      	mov	r2, r0
 80034bc:	b909      	cbnz	r1, 80034c2 <_sbrk+0xe>
 80034be:	4909      	ldr	r1, [pc, #36]	; (80034e4 <_sbrk+0x30>)
 80034c0:	6019      	str	r1, [r3, #0]
 80034c2:	6818      	ldr	r0, [r3, #0]
 80034c4:	4669      	mov	r1, sp
 80034c6:	4402      	add	r2, r0
 80034c8:	428a      	cmp	r2, r1
 80034ca:	d906      	bls.n	80034da <_sbrk+0x26>
 80034cc:	f000 fcd6 	bl	8003e7c <__errno>
 80034d0:	230c      	movs	r3, #12
 80034d2:	6003      	str	r3, [r0, #0]
 80034d4:	f04f 30ff 	mov.w	r0, #4294967295
 80034d8:	bd08      	pop	{r3, pc}
 80034da:	601a      	str	r2, [r3, #0]
 80034dc:	bd08      	pop	{r3, pc}
 80034de:	bf00      	nop
 80034e0:	2000403c 	.word	0x2000403c
 80034e4:	20004248 	.word	0x20004248

080034e8 <_close>:
 80034e8:	f04f 30ff 	mov.w	r0, #4294967295
 80034ec:	4770      	bx	lr

080034ee <_fstat>:
 80034ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034f2:	604b      	str	r3, [r1, #4]
 80034f4:	2000      	movs	r0, #0
 80034f6:	4770      	bx	lr

080034f8 <_isatty>:
 80034f8:	2001      	movs	r0, #1
 80034fa:	4770      	bx	lr

080034fc <_lseek>:
 80034fc:	2000      	movs	r0, #0
 80034fe:	4770      	bx	lr

08003500 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003500:	490f      	ldr	r1, [pc, #60]	; (8003540 <SystemInit+0x40>)
 8003502:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003506:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800350a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800350e:	4b0d      	ldr	r3, [pc, #52]	; (8003544 <SystemInit+0x44>)
 8003510:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003512:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8003514:	f042 0201 	orr.w	r2, r2, #1
 8003518:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800351a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003522:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003526:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003528:	4a07      	ldr	r2, [pc, #28]	; (8003548 <SystemInit+0x48>)
 800352a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003532:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003534:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003536:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800353a:	608b      	str	r3, [r1, #8]
#endif
}
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	e000ed00 	.word	0xe000ed00
 8003544:	40023800 	.word	0x40023800
 8003548:	24003010 	.word	0x24003010

0800354c <TM_DELAY_Init>:
uint32_t TM_DELAY_Init(void) {
#if !defined(STM32F0xx)
	uint32_t c;
	
    /* Enable TRC */
    CoreDebug->DEMCR &= ~0x01000000;
 800354c:	4b0c      	ldr	r3, [pc, #48]	; (8003580 <TM_DELAY_Init+0x34>)
 800354e:	68da      	ldr	r2, [r3, #12]
 8003550:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003554:	60da      	str	r2, [r3, #12]
    CoreDebug->DEMCR |=  0x01000000;
 8003556:	68da      	ldr	r2, [r3, #12]
 8003558:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800355c:	60da      	str	r2, [r3, #12]
	
    /* Enable counter */
    DWT->CTRL &= ~0x00000001;
 800355e:	4b09      	ldr	r3, [pc, #36]	; (8003584 <TM_DELAY_Init+0x38>)
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	f022 0201 	bic.w	r2, r2, #1
 8003566:	601a      	str	r2, [r3, #0]
    DWT->CTRL |=  0x00000001;
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	f042 0201 	orr.w	r2, r2, #1
 800356e:	601a      	str	r2, [r3, #0]
	
    /* Reset counter */
    DWT->CYCCNT = 0;
 8003570:	2200      	movs	r2, #0
 8003572:	605a      	str	r2, [r3, #4]
	
	/* Check if DWT has started */
	c = DWT->CYCCNT;
 8003574:	685a      	ldr	r2, [r3, #4]
	
	/* 2 dummys */
	__ASM volatile ("NOP");
 8003576:	bf00      	nop
	__ASM volatile ("NOP");
 8003578:	bf00      	nop
	
	/* Return difference, if result is zero, DWT has not started */
	return (DWT->CYCCNT - c);
 800357a:	6858      	ldr	r0, [r3, #4]
#else
	/* Return OK */
	return 1;
#endif
}
 800357c:	1a80      	subs	r0, r0, r2
 800357e:	4770      	bx	lr
 8003580:	e000edf0 	.word	0xe000edf0
 8003584:	e0001000 	.word	0xe0001000

08003588 <TM_DELAY_1msHandler>:
/* 1ms function called when systick makes interrupt */
__weak void TM_DELAY_1msHandler(void) {
	/* NOTE: This function Should not be modified, when the callback is needed,
           the TM_DELAY_1msHandler could be implemented in the user file
	*/
}
 8003588:	4770      	bx	lr
	...

0800358c <HAL_IncTick>:
/* Called from Systick handler */
void HAL_IncTick(void) {
	uint8_t i;
	
	/* Increase system time */
	TM_Time++;
 800358c:	4a18      	ldr	r2, [pc, #96]	; (80035f0 <HAL_IncTick+0x64>)
void HAL_IncTick(void) {
 800358e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	TM_Time++;
 8003590:	6813      	ldr	r3, [r2, #0]
 8003592:	3301      	adds	r3, #1
 8003594:	6013      	str	r3, [r2, #0]
	
	/* Decrease other system time */
	if (TM_Time2) {
 8003596:	4b17      	ldr	r3, [pc, #92]	; (80035f4 <HAL_IncTick+0x68>)
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	b112      	cbz	r2, 80035a2 <HAL_IncTick+0x16>
		TM_Time2--;
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	3a01      	subs	r2, #1
 80035a0:	601a      	str	r2, [r3, #0]
	}
	
	/* Check for timers */
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
 80035a2:	4e15      	ldr	r6, [pc, #84]	; (80035f8 <HAL_IncTick+0x6c>)
void HAL_IncTick(void) {
 80035a4:	2500      	movs	r5, #0
 80035a6:	4637      	mov	r7, r6
	for (i = 0; i < CustomTimers.Count; i++) {
 80035a8:	7833      	ldrb	r3, [r6, #0]
 80035aa:	b2ec      	uxtb	r4, r5
 80035ac:	42a3      	cmp	r3, r4
 80035ae:	d802      	bhi.n	80035b6 <HAL_IncTick+0x2a>
			}
		}
	}
	
	/* Call 1ms interrupt handler function */
	TM_DELAY_1msHandler();
 80035b0:	f7ff ffea 	bl	8003588 <TM_DELAY_1msHandler>
}
 80035b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			CustomTimers.Timers[i] &&             /*!< Pointer exists */
 80035b6:	00a4      	lsls	r4, r4, #2
 80035b8:	1933      	adds	r3, r6, r4
 80035ba:	6858      	ldr	r0, [r3, #4]
		if (
 80035bc:	b1b0      	cbz	r0, 80035ec <HAL_IncTick+0x60>
			CustomTimers.Timers[i] &&             /*!< Pointer exists */
 80035be:	7803      	ldrb	r3, [r0, #0]
 80035c0:	079b      	lsls	r3, r3, #30
 80035c2:	d513      	bpl.n	80035ec <HAL_IncTick+0x60>
			if (CustomTimers.Timers[i]->CNT) {
 80035c4:	6883      	ldr	r3, [r0, #8]
 80035c6:	b10b      	cbz	r3, 80035cc <HAL_IncTick+0x40>
				CustomTimers.Timers[i]->CNT--;
 80035c8:	3b01      	subs	r3, #1
 80035ca:	6083      	str	r3, [r0, #8]
			if (CustomTimers.Timers[i]->CNT == 0) {
 80035cc:	6883      	ldr	r3, [r0, #8]
 80035ce:	b96b      	cbnz	r3, 80035ec <HAL_IncTick+0x60>
				CustomTimers.Timers[i]->CNT = CustomTimers.Timers[i]->ARR;
 80035d0:	443c      	add	r4, r7
				CustomTimers.Timers[i]->Callback(CustomTimers.Timers[i], CustomTimers.Timers[i]->UserParameters);
 80035d2:	e9d0 3103 	ldrd	r3, r1, [r0, #12]
 80035d6:	4798      	blx	r3
				CustomTimers.Timers[i]->CNT = CustomTimers.Timers[i]->ARR;
 80035d8:	6862      	ldr	r2, [r4, #4]
 80035da:	6853      	ldr	r3, [r2, #4]
 80035dc:	6093      	str	r3, [r2, #8]
				if (!CustomTimers.Timers[i]->Flags.F.AREN) {
 80035de:	7813      	ldrb	r3, [r2, #0]
 80035e0:	f013 0101 	ands.w	r1, r3, #1
					CustomTimers.Timers[i]->Flags.F.CNTEN = 0;
 80035e4:	bf04      	itt	eq
 80035e6:	f361 0341 	bfieq	r3, r1, #1, #1
 80035ea:	7013      	strbeq	r3, [r2, #0]
 80035ec:	3501      	adds	r5, #1
 80035ee:	e7db      	b.n	80035a8 <HAL_IncTick+0x1c>
 80035f0:	20004058 	.word	0x20004058
 80035f4:	2000405c 	.word	0x2000405c
 80035f8:	20004040 	.word	0x20004040

080035fc <HAL_GetTick>:
	}
}

uint32_t HAL_GetTick(void) {
	/* Return current time in milliseconds */
	return TM_Time;
 80035fc:	4b01      	ldr	r3, [pc, #4]	; (8003604 <HAL_GetTick+0x8>)
 80035fe:	6818      	ldr	r0, [r3, #0]
}
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	20004058 	.word	0x20004058

08003608 <TM_DS18B20_Start>:
 * | OTHER DEALINGS IN THE SOFTWARE.
 * |----------------------------------------------------------------------
 */
#include "tm_stm32_ds18b20.h"

uint8_t TM_DS18B20_Start(TM_OneWire_t* OneWire, uint8_t *ROM) {
 8003608:	b538      	push	{r3, r4, r5, lr}
	return 1;
}

uint8_t TM_DS18B20_Is(uint8_t *ROM) {
	/* Checks if first byte is equal to DS18B20's family code */
	if (*ROM == DS18B20_FAMILY_CODE) {
 800360a:	780b      	ldrb	r3, [r1, #0]
 800360c:	2b28      	cmp	r3, #40	; 0x28
uint8_t TM_DS18B20_Start(TM_OneWire_t* OneWire, uint8_t *ROM) {
 800360e:	4604      	mov	r4, r0
 8003610:	460d      	mov	r5, r1
	if (*ROM == DS18B20_FAMILY_CODE) {
 8003612:	d10b      	bne.n	800362c <TM_DS18B20_Start+0x24>
	TM_OneWire_Reset(OneWire);
 8003614:	f000 fa8c 	bl	8003b30 <TM_OneWire_Reset>
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8003618:	4629      	mov	r1, r5
 800361a:	4620      	mov	r0, r4
 800361c:	f000 fb8a 	bl	8003d34 <TM_OneWire_SelectWithPointer>
	TM_OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
 8003620:	4620      	mov	r0, r4
 8003622:	2144      	movs	r1, #68	; 0x44
 8003624:	f000 fae8 	bl	8003bf8 <TM_OneWire_WriteByte>
	return 1;
 8003628:	2001      	movs	r0, #1
}
 800362a:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
 800362c:	2000      	movs	r0, #0
 800362e:	e7fc      	b.n	800362a <TM_DS18B20_Start+0x22>

08003630 <TM_DS18B20_StartAll>:
void TM_DS18B20_StartAll(TM_OneWire_t* OneWire) {
 8003630:	b510      	push	{r4, lr}
 8003632:	4604      	mov	r4, r0
	TM_OneWire_Reset(OneWire);
 8003634:	f000 fa7c 	bl	8003b30 <TM_OneWire_Reset>
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_SKIPROM);
 8003638:	4620      	mov	r0, r4
 800363a:	21cc      	movs	r1, #204	; 0xcc
 800363c:	f000 fadc 	bl	8003bf8 <TM_OneWire_WriteByte>
	TM_OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
 8003640:	4620      	mov	r0, r4
 8003642:	2144      	movs	r1, #68	; 0x44
}
 8003644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	TM_OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
 8003648:	f000 bad6 	b.w	8003bf8 <TM_OneWire_WriteByte>

0800364c <TM_DS18B20_Read>:
uint8_t TM_DS18B20_Read(TM_OneWire_t* OneWire, uint8_t *ROM, float *destination) {
 800364c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (*ROM == DS18B20_FAMILY_CODE) {
 800364e:	780b      	ldrb	r3, [r1, #0]
 8003650:	2b28      	cmp	r3, #40	; 0x28
uint8_t TM_DS18B20_Read(TM_OneWire_t* OneWire, uint8_t *ROM, float *destination) {
 8003652:	b085      	sub	sp, #20
 8003654:	4607      	mov	r7, r0
 8003656:	460c      	mov	r4, r1
 8003658:	4615      	mov	r5, r2
	if (*ROM == DS18B20_FAMILY_CODE) {
 800365a:	d002      	beq.n	8003662 <TM_DS18B20_Read+0x16>
		return 0;
 800365c:	2000      	movs	r0, #0
}
 800365e:	b005      	add	sp, #20
 8003660:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!TM_OneWire_ReadBit(OneWire)) {
 8003662:	f000 faab 	bl	8003bbc <TM_OneWire_ReadBit>
 8003666:	2800      	cmp	r0, #0
 8003668:	d0f8      	beq.n	800365c <TM_DS18B20_Read+0x10>
	TM_OneWire_Reset(OneWire);
 800366a:	4638      	mov	r0, r7
 800366c:	f000 fa60 	bl	8003b30 <TM_OneWire_Reset>
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8003670:	4621      	mov	r1, r4
 8003672:	4638      	mov	r0, r7
 8003674:	f000 fb5e 	bl	8003d34 <TM_OneWire_SelectWithPointer>
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8003678:	21be      	movs	r1, #190	; 0xbe
 800367a:	4638      	mov	r0, r7
 800367c:	f000 fabc 	bl	8003bf8 <TM_OneWire_WriteByte>
 8003680:	2400      	movs	r4, #0
		data[i] = TM_OneWire_ReadByte(OneWire);
 8003682:	ae01      	add	r6, sp, #4
 8003684:	4638      	mov	r0, r7
 8003686:	f000 fac7 	bl	8003c18 <TM_OneWire_ReadByte>
 800368a:	5530      	strb	r0, [r6, r4]
 800368c:	3401      	adds	r4, #1
	for (i = 0; i < 9; i++) {
 800368e:	2c09      	cmp	r4, #9
 8003690:	d1f8      	bne.n	8003684 <TM_DS18B20_Read+0x38>
	crc = TM_OneWire_CRC8(data, 8);
 8003692:	2108      	movs	r1, #8
 8003694:	4630      	mov	r0, r6
 8003696:	f000 fb5a 	bl	8003d4e <TM_OneWire_CRC8>
	if (crc != data[8]) {
 800369a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800369e:	4283      	cmp	r3, r0
 80036a0:	d1dc      	bne.n	800365c <TM_DS18B20_Read+0x10>
	temperature = data[0] | (data[1] << 8);
 80036a2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80036a6:	f89d 6004 	ldrb.w	r6, [sp, #4]
 80036aa:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
 80036ae:	b236      	sxth	r6, r6
	TM_OneWire_Reset(OneWire);
 80036b0:	4638      	mov	r0, r7
 80036b2:	f000 fa3d 	bl	8003b30 <TM_OneWire_Reset>
	temperature = data[0] | (data[1] << 8);
 80036b6:	b2b4      	uxth	r4, r6
	if (temperature & 0x8000) {
 80036b8:	2e00      	cmp	r6, #0
		temperature = ~temperature + 1;
 80036ba:	bfbc      	itt	lt
 80036bc:	4264      	neglt	r4, r4
 80036be:	b2a4      	uxthlt	r4, r4
	digit |= ((temperature >> 8) & 0x7) << 4;
 80036c0:	ea4f 1314 	mov.w	r3, r4, lsr #4
 80036c4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80036c8:	f344 1307 	sbfx	r3, r4, #4, #8
 80036cc:	ea43 0302 	orr.w	r3, r3, r2
	resolution = ((data[4] & 0x60) >> 5) + 9;
 80036d0:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80036d4:	f3c2 1241 	ubfx	r2, r2, #5, #2
	switch (resolution) {
 80036d8:	f102 0209 	add.w	r2, r2, #9
		minus = 1;
 80036dc:	bfb4      	ite	lt
 80036de:	2101      	movlt	r1, #1
	int8_t digit, minus = 0;
 80036e0:	2100      	movge	r1, #0
	switch (resolution) {
 80036e2:	2a0b      	cmp	r2, #11
 80036e4:	d023      	beq.n	800372e <TM_DS18B20_Read+0xe2>
 80036e6:	2a0c      	cmp	r2, #12
 80036e8:	d028      	beq.n	800373c <TM_DS18B20_Read+0xf0>
 80036ea:	2a0a      	cmp	r2, #10
			decimal = (temperature >> 3) & 0x01;
 80036ec:	bf1b      	ittet	ne
 80036ee:	f3c4 02c0 	ubfxne	r2, r4, #3, #1
 80036f2:	ee07 2a90 	vmovne	s15, r2
			decimal = (temperature >> 2) & 0x03;
 80036f6:	f3c4 0281 	ubfxeq	r2, r4, #2, #2
			decimal = (temperature >> 3) & 0x01;
 80036fa:	eef8 7ae7 	vcvtne.f32.s32	s15, s15
			decimal = (temperature >> 2) & 0x03;
 80036fe:	bf0d      	iteet	eq
 8003700:	ee07 2a90 	vmoveq	s15, r2
			decimal *= (float)DS18B20_DECIMAL_STEPS_9BIT;
 8003704:	eeb6 7a00 	vmovne.f32	s14, #96	; 0x3f000000  0.5
 8003708:	ee67 7a87 	vmulne.f32	s15, s15, s14
			decimal *= (float)DS18B20_DECIMAL_STEPS_10BIT;
 800370c:	eefa 7acf 	vcvteq.f32.s32	s15, s15, #2
	decimal = digit + decimal;
 8003710:	ee07 3a10 	vmov	s14, r3
 8003714:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003718:	ee77 7a27 	vadd.f32	s15, s14, s15
	if (minus) {
 800371c:	b119      	cbz	r1, 8003726 <TM_DS18B20_Read+0xda>
		decimal = 0 - decimal;
 800371e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800374c <TM_DS18B20_Read+0x100>
 8003722:	ee77 7a67 	vsub.f32	s15, s14, s15
	*destination = decimal;
 8003726:	edc5 7a00 	vstr	s15, [r5]
	return 1;
 800372a:	2001      	movs	r0, #1
 800372c:	e797      	b.n	800365e <TM_DS18B20_Read+0x12>
			decimal = (temperature >> 1) & 0x07;
 800372e:	f3c4 0242 	ubfx	r2, r4, #1, #3
 8003732:	ee07 2a90 	vmov	s15, r2
			decimal *= (float)DS18B20_DECIMAL_STEPS_11BIT;
 8003736:	eefa 7aee 	vcvt.f32.s32	s15, s15, #3
		} break;
 800373a:	e7e9      	b.n	8003710 <TM_DS18B20_Read+0xc4>
			decimal = temperature & 0x0F;
 800373c:	f004 020f 	and.w	r2, r4, #15
 8003740:	ee07 2a90 	vmov	s15, r2
			decimal *= (float)DS18B20_DECIMAL_STEPS_12BIT;
 8003744:	eefa 7ace 	vcvt.f32.s32	s15, s15, #4
		} break;
 8003748:	e7e2      	b.n	8003710 <TM_DS18B20_Read+0xc4>
 800374a:	bf00      	nop
 800374c:	00000000 	.word	0x00000000

08003750 <TM_DS18B20_SetResolution>:
uint8_t TM_DS18B20_SetResolution(TM_OneWire_t* OneWire, uint8_t *ROM, TM_DS18B20_Resolution_t resolution) {
 8003750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (*ROM == DS18B20_FAMILY_CODE) {
 8003754:	780b      	ldrb	r3, [r1, #0]
 8003756:	2b28      	cmp	r3, #40	; 0x28
uint8_t TM_DS18B20_SetResolution(TM_OneWire_t* OneWire, uint8_t *ROM, TM_DS18B20_Resolution_t resolution) {
 8003758:	4604      	mov	r4, r0
 800375a:	460e      	mov	r6, r1
 800375c:	4691      	mov	r9, r2
	if (*ROM == DS18B20_FAMILY_CODE) {
 800375e:	d15c      	bne.n	800381a <TM_DS18B20_SetResolution+0xca>
	TM_OneWire_Reset(OneWire);
 8003760:	f000 f9e6 	bl	8003b30 <TM_OneWire_Reset>
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8003764:	4631      	mov	r1, r6
 8003766:	4620      	mov	r0, r4
 8003768:	f000 fae4 	bl	8003d34 <TM_OneWire_SelectWithPointer>
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 800376c:	21be      	movs	r1, #190	; 0xbe
 800376e:	4620      	mov	r0, r4
 8003770:	f000 fa42 	bl	8003bf8 <TM_OneWire_WriteByte>
	TM_OneWire_ReadByte(OneWire);
 8003774:	4620      	mov	r0, r4
 8003776:	f000 fa4f 	bl	8003c18 <TM_OneWire_ReadByte>
	TM_OneWire_ReadByte(OneWire);
 800377a:	4620      	mov	r0, r4
 800377c:	f000 fa4c 	bl	8003c18 <TM_OneWire_ReadByte>
	th = TM_OneWire_ReadByte(OneWire);
 8003780:	4620      	mov	r0, r4
 8003782:	f000 fa49 	bl	8003c18 <TM_OneWire_ReadByte>
 8003786:	4680      	mov	r8, r0
	tl = TM_OneWire_ReadByte(OneWire);
 8003788:	4620      	mov	r0, r4
 800378a:	f000 fa45 	bl	8003c18 <TM_OneWire_ReadByte>
 800378e:	4607      	mov	r7, r0
	conf = TM_OneWire_ReadByte(OneWire);
 8003790:	4620      	mov	r0, r4
 8003792:	f000 fa41 	bl	8003c18 <TM_OneWire_ReadByte>
	if (resolution == TM_DS18B20_Resolution_9bits) {
 8003796:	f1b9 0f09 	cmp.w	r9, #9
	conf = TM_OneWire_ReadByte(OneWire);
 800379a:	4605      	mov	r5, r0
	if (resolution == TM_DS18B20_Resolution_9bits) {
 800379c:	d126      	bne.n	80037ec <TM_DS18B20_SetResolution+0x9c>
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 800379e:	f000 059f 	and.w	r5, r0, #159	; 0x9f
	TM_OneWire_Reset(OneWire);
 80037a2:	4620      	mov	r0, r4
 80037a4:	f000 f9c4 	bl	8003b30 <TM_OneWire_Reset>
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 80037a8:	4631      	mov	r1, r6
 80037aa:	4620      	mov	r0, r4
 80037ac:	f000 fac2 	bl	8003d34 <TM_OneWire_SelectWithPointer>
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 80037b0:	214e      	movs	r1, #78	; 0x4e
 80037b2:	4620      	mov	r0, r4
 80037b4:	f000 fa20 	bl	8003bf8 <TM_OneWire_WriteByte>
	TM_OneWire_WriteByte(OneWire, th);
 80037b8:	4641      	mov	r1, r8
 80037ba:	4620      	mov	r0, r4
 80037bc:	f000 fa1c 	bl	8003bf8 <TM_OneWire_WriteByte>
	TM_OneWire_WriteByte(OneWire, tl);
 80037c0:	4639      	mov	r1, r7
 80037c2:	4620      	mov	r0, r4
 80037c4:	f000 fa18 	bl	8003bf8 <TM_OneWire_WriteByte>
	TM_OneWire_WriteByte(OneWire, conf);
 80037c8:	4629      	mov	r1, r5
 80037ca:	4620      	mov	r0, r4
 80037cc:	f000 fa14 	bl	8003bf8 <TM_OneWire_WriteByte>
	TM_OneWire_Reset(OneWire);
 80037d0:	4620      	mov	r0, r4
 80037d2:	f000 f9ad 	bl	8003b30 <TM_OneWire_Reset>
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 80037d6:	4631      	mov	r1, r6
 80037d8:	4620      	mov	r0, r4
 80037da:	f000 faab 	bl	8003d34 <TM_OneWire_SelectWithPointer>
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 80037de:	4620      	mov	r0, r4
 80037e0:	2148      	movs	r1, #72	; 0x48
 80037e2:	f000 fa09 	bl	8003bf8 <TM_OneWire_WriteByte>
	return 1;
 80037e6:	2001      	movs	r0, #1
}
 80037e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (resolution == TM_DS18B20_Resolution_10bits) {
 80037ec:	f1b9 0f0a 	cmp.w	r9, #10
 80037f0:	d104      	bne.n	80037fc <TM_DS18B20_SetResolution+0xac>
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 80037f2:	f000 05bf 	and.w	r5, r0, #191	; 0xbf
		conf |= 1 << DS18B20_RESOLUTION_R0;
 80037f6:	f045 0520 	orr.w	r5, r5, #32
 80037fa:	e7d2      	b.n	80037a2 <TM_DS18B20_SetResolution+0x52>
	} else if (resolution == TM_DS18B20_Resolution_11bits) {
 80037fc:	f1b9 0f0b 	cmp.w	r9, #11
 8003800:	d104      	bne.n	800380c <TM_DS18B20_SetResolution+0xbc>
 8003802:	f000 05df 	and.w	r5, r0, #223	; 0xdf
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8003806:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 800380a:	e7ca      	b.n	80037a2 <TM_DS18B20_SetResolution+0x52>
	} else if (resolution == TM_DS18B20_Resolution_12bits) {
 800380c:	f1b9 0f0c 	cmp.w	r9, #12
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8003810:	bf04      	itt	eq
 8003812:	f040 0560 	orreq.w	r5, r0, #96	; 0x60
 8003816:	b2ed      	uxtbeq	r5, r5
 8003818:	e7c3      	b.n	80037a2 <TM_DS18B20_SetResolution+0x52>
		return 0;
 800381a:	2000      	movs	r0, #0
 800381c:	e7e4      	b.n	80037e8 <TM_DS18B20_SetResolution+0x98>

0800381e <TM_DS18B20_Is>:
	if (*ROM == DS18B20_FAMILY_CODE) {
 800381e:	7800      	ldrb	r0, [r0, #0]
		return 1;
	}
	return 0;
}
 8003820:	f1a0 0328 	sub.w	r3, r0, #40	; 0x28
 8003824:	4258      	negs	r0, r3
 8003826:	4158      	adcs	r0, r3
 8003828:	4770      	bx	lr

0800382a <TM_DS18B20_SetAlarmLowTemperature>:

uint8_t TM_DS18B20_SetAlarmLowTemperature(TM_OneWire_t* OneWire, uint8_t *ROM, int8_t temp) {
 800382a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (*ROM == DS18B20_FAMILY_CODE) {
 800382e:	780b      	ldrb	r3, [r1, #0]
 8003830:	2b28      	cmp	r3, #40	; 0x28
uint8_t TM_DS18B20_SetAlarmLowTemperature(TM_OneWire_t* OneWire, uint8_t *ROM, int8_t temp) {
 8003832:	4604      	mov	r4, r0
 8003834:	460e      	mov	r6, r1
	if (*ROM == DS18B20_FAMILY_CODE) {
 8003836:	d147      	bne.n	80038c8 <TM_DS18B20_SetAlarmLowTemperature+0x9e>
 8003838:	f06f 0536 	mvn.w	r5, #54	; 0x36
 800383c:	4295      	cmp	r5, r2
 800383e:	bfb8      	it	lt
 8003840:	4615      	movlt	r5, r2
	} 
	if (temp < -55) {
		temp = -55;
	}
	/* Reset line */
	TM_OneWire_Reset(OneWire);
 8003842:	f000 f975 	bl	8003b30 <TM_OneWire_Reset>
	/* Select ROM number */
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8003846:	4631      	mov	r1, r6
 8003848:	4620      	mov	r0, r4
 800384a:	f000 fa73 	bl	8003d34 <TM_OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 800384e:	21be      	movs	r1, #190	; 0xbe
 8003850:	4620      	mov	r0, r4
 8003852:	f000 f9d1 	bl	8003bf8 <TM_OneWire_WriteByte>
	
	/* Ignore first 2 bytes */
	TM_OneWire_ReadByte(OneWire);
 8003856:	4620      	mov	r0, r4
 8003858:	f000 f9de 	bl	8003c18 <TM_OneWire_ReadByte>
	TM_OneWire_ReadByte(OneWire);
 800385c:	4620      	mov	r0, r4
 800385e:	f000 f9db 	bl	8003c18 <TM_OneWire_ReadByte>
	
	th = TM_OneWire_ReadByte(OneWire);
 8003862:	4620      	mov	r0, r4
 8003864:	f000 f9d8 	bl	8003c18 <TM_OneWire_ReadByte>
 8003868:	4680      	mov	r8, r0
	tl = TM_OneWire_ReadByte(OneWire);
 800386a:	4620      	mov	r0, r4
 800386c:	f000 f9d4 	bl	8003c18 <TM_OneWire_ReadByte>
	conf = TM_OneWire_ReadByte(OneWire);
 8003870:	4620      	mov	r0, r4
 8003872:	f000 f9d1 	bl	8003c18 <TM_OneWire_ReadByte>
 8003876:	4607      	mov	r7, r0
	
	tl = (uint8_t)temp; 

	/* Reset line */
	TM_OneWire_Reset(OneWire);
 8003878:	4620      	mov	r0, r4
 800387a:	f000 f959 	bl	8003b30 <TM_OneWire_Reset>
	/* Select ROM number */
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 800387e:	4631      	mov	r1, r6
 8003880:	4620      	mov	r0, r4
 8003882:	f000 fa57 	bl	8003d34 <TM_OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8003886:	214e      	movs	r1, #78	; 0x4e
 8003888:	4620      	mov	r0, r4
 800388a:	f000 f9b5 	bl	8003bf8 <TM_OneWire_WriteByte>
	
	/* Write bytes */
	TM_OneWire_WriteByte(OneWire, th);
 800388e:	4641      	mov	r1, r8
 8003890:	4620      	mov	r0, r4
 8003892:	f000 f9b1 	bl	8003bf8 <TM_OneWire_WriteByte>
	tl = (uint8_t)temp; 
 8003896:	2d7d      	cmp	r5, #125	; 0x7d
 8003898:	bfa8      	it	ge
 800389a:	257d      	movge	r5, #125	; 0x7d
	TM_OneWire_WriteByte(OneWire, tl);
 800389c:	b2e9      	uxtb	r1, r5
 800389e:	4620      	mov	r0, r4
 80038a0:	f000 f9aa 	bl	8003bf8 <TM_OneWire_WriteByte>
	TM_OneWire_WriteByte(OneWire, conf);
 80038a4:	4639      	mov	r1, r7
 80038a6:	4620      	mov	r0, r4
 80038a8:	f000 f9a6 	bl	8003bf8 <TM_OneWire_WriteByte>
	
	/* Reset line */
	TM_OneWire_Reset(OneWire);
 80038ac:	4620      	mov	r0, r4
 80038ae:	f000 f93f 	bl	8003b30 <TM_OneWire_Reset>
	/* Select ROM number */
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 80038b2:	4631      	mov	r1, r6
 80038b4:	4620      	mov	r0, r4
 80038b6:	f000 fa3d 	bl	8003d34 <TM_OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 80038ba:	4620      	mov	r0, r4
 80038bc:	2148      	movs	r1, #72	; 0x48
 80038be:	f000 f99b 	bl	8003bf8 <TM_OneWire_WriteByte>
	
	return 1;
 80038c2:	2001      	movs	r0, #1
}
 80038c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 0;
 80038c8:	2000      	movs	r0, #0
 80038ca:	e7fb      	b.n	80038c4 <TM_DS18B20_SetAlarmLowTemperature+0x9a>

080038cc <TM_DS18B20_SetAlarmHighTemperature>:

uint8_t TM_DS18B20_SetAlarmHighTemperature(TM_OneWire_t* OneWire, uint8_t *ROM, int8_t temp) {
 80038cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (*ROM == DS18B20_FAMILY_CODE) {
 80038d0:	780b      	ldrb	r3, [r1, #0]
 80038d2:	2b28      	cmp	r3, #40	; 0x28
uint8_t TM_DS18B20_SetAlarmHighTemperature(TM_OneWire_t* OneWire, uint8_t *ROM, int8_t temp) {
 80038d4:	4604      	mov	r4, r0
 80038d6:	460e      	mov	r6, r1
	if (*ROM == DS18B20_FAMILY_CODE) {
 80038d8:	d147      	bne.n	800396a <TM_DS18B20_SetAlarmHighTemperature+0x9e>
 80038da:	f06f 0536 	mvn.w	r5, #54	; 0x36
 80038de:	4295      	cmp	r5, r2
 80038e0:	bfb8      	it	lt
 80038e2:	4615      	movlt	r5, r2
	} 
	if (temp < -55) {
		temp = -55;
	}
	/* Reset line */
	TM_OneWire_Reset(OneWire);
 80038e4:	f000 f924 	bl	8003b30 <TM_OneWire_Reset>
	/* Select ROM number */
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 80038e8:	4631      	mov	r1, r6
 80038ea:	4620      	mov	r0, r4
 80038ec:	f000 fa22 	bl	8003d34 <TM_OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 80038f0:	21be      	movs	r1, #190	; 0xbe
 80038f2:	4620      	mov	r0, r4
 80038f4:	f000 f980 	bl	8003bf8 <TM_OneWire_WriteByte>
	
	/* Ignore first 2 bytes */
	TM_OneWire_ReadByte(OneWire);
 80038f8:	4620      	mov	r0, r4
 80038fa:	f000 f98d 	bl	8003c18 <TM_OneWire_ReadByte>
	TM_OneWire_ReadByte(OneWire);
 80038fe:	4620      	mov	r0, r4
 8003900:	f000 f98a 	bl	8003c18 <TM_OneWire_ReadByte>
	
	th = TM_OneWire_ReadByte(OneWire);
 8003904:	4620      	mov	r0, r4
 8003906:	f000 f987 	bl	8003c18 <TM_OneWire_ReadByte>
	tl = TM_OneWire_ReadByte(OneWire);
 800390a:	4620      	mov	r0, r4
 800390c:	f000 f984 	bl	8003c18 <TM_OneWire_ReadByte>
 8003910:	4680      	mov	r8, r0
	conf = TM_OneWire_ReadByte(OneWire);
 8003912:	4620      	mov	r0, r4
 8003914:	f000 f980 	bl	8003c18 <TM_OneWire_ReadByte>
 8003918:	4607      	mov	r7, r0
	
	th = (uint8_t)temp; 

	/* Reset line */
	TM_OneWire_Reset(OneWire);
 800391a:	4620      	mov	r0, r4
 800391c:	f000 f908 	bl	8003b30 <TM_OneWire_Reset>
	/* Select ROM number */
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8003920:	4631      	mov	r1, r6
 8003922:	4620      	mov	r0, r4
 8003924:	f000 fa06 	bl	8003d34 <TM_OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8003928:	214e      	movs	r1, #78	; 0x4e
 800392a:	4620      	mov	r0, r4
 800392c:	f000 f964 	bl	8003bf8 <TM_OneWire_WriteByte>
	th = (uint8_t)temp; 
 8003930:	2d7d      	cmp	r5, #125	; 0x7d
 8003932:	bfa8      	it	ge
 8003934:	257d      	movge	r5, #125	; 0x7d
	
	/* Write bytes */
	TM_OneWire_WriteByte(OneWire, th);
 8003936:	b2e9      	uxtb	r1, r5
 8003938:	4620      	mov	r0, r4
 800393a:	f000 f95d 	bl	8003bf8 <TM_OneWire_WriteByte>
	TM_OneWire_WriteByte(OneWire, tl);
 800393e:	4641      	mov	r1, r8
 8003940:	4620      	mov	r0, r4
 8003942:	f000 f959 	bl	8003bf8 <TM_OneWire_WriteByte>
	TM_OneWire_WriteByte(OneWire, conf);
 8003946:	4639      	mov	r1, r7
 8003948:	4620      	mov	r0, r4
 800394a:	f000 f955 	bl	8003bf8 <TM_OneWire_WriteByte>
	
	/* Reset line */
	TM_OneWire_Reset(OneWire);
 800394e:	4620      	mov	r0, r4
 8003950:	f000 f8ee 	bl	8003b30 <TM_OneWire_Reset>
	/* Select ROM number */
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8003954:	4631      	mov	r1, r6
 8003956:	4620      	mov	r0, r4
 8003958:	f000 f9ec 	bl	8003d34 <TM_OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 800395c:	4620      	mov	r0, r4
 800395e:	2148      	movs	r1, #72	; 0x48
 8003960:	f000 f94a 	bl	8003bf8 <TM_OneWire_WriteByte>
	
	return 1;
 8003964:	2001      	movs	r0, #1
}
 8003966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 0;
 800396a:	2000      	movs	r0, #0
 800396c:	e7fb      	b.n	8003966 <TM_DS18B20_SetAlarmHighTemperature+0x9a>

0800396e <TM_DS18B20_AllDone>:
	return TM_OneWire_Search(OneWire, DS18B20_CMD_ALARMSEARCH);
}

uint8_t TM_DS18B20_AllDone(TM_OneWire_t* OneWire) {
	/* If read bit is low, then device is not finished yet with calculation temperature */
	return TM_OneWire_ReadBit(OneWire);
 800396e:	f000 b925 	b.w	8003bbc <TM_OneWire_ReadBit>

08003972 <TM_GPIO_SetPinAsInput>:
			GPIO_UsedPins[ptr] &= ~(1 << i);
		}
	}
}

void TM_GPIO_SetPinAsInput(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8003972:	b530      	push	{r4, r5, lr}
 8003974:	2300      	movs	r3, #0
	/* Go through all pins */
	for (i = 0x00; i < 0x10; i++) {
		/* Pin is set */
		if (GPIO_Pin & (1 << i)) {
			/* Set 00 bits combination for input */
			GPIOx->MODER &= ~(0x03 << (2 * i));
 8003976:	2503      	movs	r5, #3
		if (GPIO_Pin & (1 << i)) {
 8003978:	fa41 f203 	asr.w	r2, r1, r3
 800397c:	07d2      	lsls	r2, r2, #31
 800397e:	d506      	bpl.n	800398e <TM_GPIO_SetPinAsInput+0x1c>
			GPIOx->MODER &= ~(0x03 << (2 * i));
 8003980:	6802      	ldr	r2, [r0, #0]
 8003982:	005c      	lsls	r4, r3, #1
 8003984:	fa05 f404 	lsl.w	r4, r5, r4
 8003988:	ea22 0204 	bic.w	r2, r2, r4
 800398c:	6002      	str	r2, [r0, #0]
 800398e:	3301      	adds	r3, #1
	for (i = 0x00; i < 0x10; i++) {
 8003990:	2b10      	cmp	r3, #16
 8003992:	d1f1      	bne.n	8003978 <TM_GPIO_SetPinAsInput+0x6>
		}
	}
}
 8003994:	bd30      	pop	{r4, r5, pc}

08003996 <TM_GPIO_SetPinAsOutput>:

void TM_GPIO_SetPinAsOutput(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8003996:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003998:	2300      	movs	r3, #0
	/* Go through all pins */
	for (i = 0x00; i < 0x10; i++) {
		/* Pin is set */
		if (GPIO_Pin & (1 << i)) {
			/* Set 01 bits combination for output */
			GPIOx->MODER = (GPIOx->MODER & ~(0x03 << (2 * i))) | (0x01 << (2 * i));
 800399a:	2503      	movs	r5, #3
 800399c:	2601      	movs	r6, #1
		if (GPIO_Pin & (1 << i)) {
 800399e:	fa41 f203 	asr.w	r2, r1, r3
 80039a2:	07d2      	lsls	r2, r2, #31
 80039a4:	d509      	bpl.n	80039ba <TM_GPIO_SetPinAsOutput+0x24>
			GPIOx->MODER = (GPIOx->MODER & ~(0x03 << (2 * i))) | (0x01 << (2 * i));
 80039a6:	6802      	ldr	r2, [r0, #0]
 80039a8:	005c      	lsls	r4, r3, #1
 80039aa:	fa05 f704 	lsl.w	r7, r5, r4
 80039ae:	ea22 0207 	bic.w	r2, r2, r7
 80039b2:	fa06 f404 	lsl.w	r4, r6, r4
 80039b6:	4322      	orrs	r2, r4
 80039b8:	6002      	str	r2, [r0, #0]
 80039ba:	3301      	adds	r3, #1
	for (i = 0x00; i < 0x10; i++) {
 80039bc:	2b10      	cmp	r3, #16
 80039be:	d1ee      	bne.n	800399e <TM_GPIO_SetPinAsOutput+0x8>
		}
	}
}
 80039c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080039c4 <TM_GPIO_INT_EnableClock>:
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx) {
	/* Set bit according to the 1 << portsourcenumber */
#if defined(STM32F0xx)
	RCC->AHBENR |= (1 << (TM_GPIO_GetPortSource(GPIOx) + 17));
#else
	RCC->AHB1ENR |= (1 << TM_GPIO_GetPortSource(GPIOx));
 80039c4:	4a06      	ldr	r2, [pc, #24]	; (80039e0 <TM_GPIO_INT_EnableClock+0x1c>)
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 80039c6:	f100 403f 	add.w	r0, r0, #3204448256	; 0xbf000000
 80039ca:	f500 007e 	add.w	r0, r0, #16646144	; 0xfe0000
	RCC->AHB1ENR |= (1 << TM_GPIO_GetPortSource(GPIOx));
 80039ce:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80039d0:	f3c0 238f 	ubfx	r3, r0, #10, #16
 80039d4:	2001      	movs	r0, #1
 80039d6:	4098      	lsls	r0, r3
 80039d8:	4308      	orrs	r0, r1
 80039da:	6310      	str	r0, [r2, #48]	; 0x30
#endif
}
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	40023800 	.word	0x40023800

080039e4 <TM_GPIO_INT_Init>:
#else
	RCC->AHB1ENR &= ~(1 << TM_GPIO_GetPortSource(GPIOx));
#endif
}

void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 80039e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039e8:	b085      	sub	sp, #20
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 80039ea:	f100 453f 	add.w	r5, r0, #3204448256	; 0xbf000000
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 80039ee:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
 80039f2:	9402      	str	r4, [sp, #8]
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 80039f4:	f505 057e 	add.w	r5, r5, #16646144	; 0xfe0000
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 80039f8:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
			continue;
		}
		
		/* Pin is used */
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 80039fc:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8003aa4 <TM_GPIO_INT_Init+0xc0>
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 8003a00:	9403      	str	r4, [sp, #12]
		
		/* Set GPIO MODE register */
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
		
		/* Set only if output or alternate functions */
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 8003a02:	f102 3eff 	add.w	lr, r2, #4294967295
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 8003a06:	9301      	str	r3, [sp, #4]
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 8003a08:	2400      	movs	r4, #0
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 8003a0a:	f3c5 2587 	ubfx	r5, r5, #10, #8
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 8003a0e:	f04f 0a03 	mov.w	sl, #3
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 8003a12:	fa5f fe8e 	uxtb.w	lr, lr
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 8003a16:	fa41 f604 	asr.w	r6, r1, r4
 8003a1a:	07f3      	lsls	r3, r6, #31
 8003a1c:	d53b      	bpl.n	8003a96 <TM_GPIO_INT_Init+0xb2>
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	f838 6015 	ldrh.w	r6, [r8, r5, lsl #1]
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 8003a24:	f8d0 c00c 	ldr.w	ip, [r0, #12]
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 8003a28:	fa03 f904 	lsl.w	r9, r3, r4
 8003a2c:	ea49 0606 	orr.w	r6, r9, r6
 8003a30:	f828 6015 	strh.w	r6, [r8, r5, lsl #1]
 8003a34:	fa04 f603 	lsl.w	r6, r4, r3
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 8003a38:	fa0a f706 	lsl.w	r7, sl, r6
 8003a3c:	9b02      	ldr	r3, [sp, #8]
 8003a3e:	43ff      	mvns	r7, r7
 8003a40:	fa03 fb06 	lsl.w	fp, r3, r6
 8003a44:	ea07 0c0c 	and.w	ip, r7, ip
 8003a48:	ea4c 0c0b 	orr.w	ip, ip, fp
 8003a4c:	f8c0 c00c 	str.w	ip, [r0, #12]
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
 8003a50:	f8d0 c000 	ldr.w	ip, [r0]
 8003a54:	fa02 fb06 	lsl.w	fp, r2, r6
 8003a58:	ea0c 0c07 	and.w	ip, ip, r7
 8003a5c:	ea4c 0c0b 	orr.w	ip, ip, fp
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 8003a60:	f1be 0f01 	cmp.w	lr, #1
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
 8003a64:	f8c0 c000 	str.w	ip, [r0]
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 8003a68:	d815      	bhi.n	8003a96 <TM_GPIO_INT_Init+0xb2>
			/* Set GPIO OTYPE register */
			GPIOx->OTYPER = (GPIOx->OTYPER & ~(uint16_t)(0x01 << pinpos)) | ((uint16_t)(GPIO_OType << pinpos));
 8003a6a:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8003a6e:	9b01      	ldr	r3, [sp, #4]
 8003a70:	ea2c 0909 	bic.w	r9, ip, r9
 8003a74:	fa03 fc04 	lsl.w	ip, r3, r4
 8003a78:	fa1f fc8c 	uxth.w	ip, ip
 8003a7c:	ea49 090c 	orr.w	r9, r9, ip
 8003a80:	f8c0 9004 	str.w	r9, [r0, #4]
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
 8003a84:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8003a88:	9b03      	ldr	r3, [sp, #12]
 8003a8a:	ea07 070c 	and.w	r7, r7, ip
 8003a8e:	fa03 f606 	lsl.w	r6, r3, r6
 8003a92:	4337      	orrs	r7, r6
 8003a94:	6087      	str	r7, [r0, #8]
 8003a96:	3401      	adds	r4, #1
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8003a98:	2c10      	cmp	r4, #16
 8003a9a:	d1bc      	bne.n	8003a16 <TM_GPIO_INT_Init+0x32>
		}
	}
}
 8003a9c:	b005      	add	sp, #20
 8003a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003aa2:	bf00      	nop
 8003aa4:	20004060 	.word	0x20004060

08003aa8 <TM_GPIO_Init>:
void TM_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {	
 8003aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003aac:	4605      	mov	r5, r0
 8003aae:	4616      	mov	r6, r2
 8003ab0:	461f      	mov	r7, r3
 8003ab2:	f89d 8020 	ldrb.w	r8, [sp, #32]
 8003ab6:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
	if (GPIO_Pin == 0x00) {
 8003aba:	460c      	mov	r4, r1
 8003abc:	b159      	cbz	r1, 8003ad6 <TM_GPIO_Init+0x2e>
	TM_GPIO_INT_EnableClock(GPIOx);
 8003abe:	f7ff ff81 	bl	80039c4 <TM_GPIO_INT_EnableClock>
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 8003ac2:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8003ac6:	463b      	mov	r3, r7
 8003ac8:	4632      	mov	r2, r6
 8003aca:	4621      	mov	r1, r4
 8003acc:	4628      	mov	r0, r5
}
 8003ace:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 8003ad2:	f7ff bf87 	b.w	80039e4 <TM_GPIO_INT_Init>
}
 8003ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08003adc <Delay>:
__STATIC_INLINE void Delay(__IO uint32_t micros) {
 8003adc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint32_t start = DWT->CYCCNT;
 8003ade:	4c09      	ldr	r4, [pc, #36]	; (8003b04 <Delay+0x28>)
__STATIC_INLINE void Delay(__IO uint32_t micros) {
 8003ae0:	9001      	str	r0, [sp, #4]
	uint32_t start = DWT->CYCCNT;
 8003ae2:	6865      	ldr	r5, [r4, #4]
	micros *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8003ae4:	f7fc ff9e 	bl	8000a24 <HAL_RCC_GetHCLKFreq>
 8003ae8:	9b01      	ldr	r3, [sp, #4]
 8003aea:	4a07      	ldr	r2, [pc, #28]	; (8003b08 <Delay+0x2c>)
 8003aec:	fbb0 f0f2 	udiv	r0, r0, r2
 8003af0:	4343      	muls	r3, r0
 8003af2:	9301      	str	r3, [sp, #4]
	while ((DWT->CYCCNT - start) < micros);
 8003af4:	6863      	ldr	r3, [r4, #4]
 8003af6:	9a01      	ldr	r2, [sp, #4]
 8003af8:	1b5b      	subs	r3, r3, r5
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d3fa      	bcc.n	8003af4 <Delay+0x18>
}
 8003afe:	b003      	add	sp, #12
 8003b00:	bd30      	pop	{r4, r5, pc}
 8003b02:	bf00      	nop
 8003b04:	e0001000 	.word	0xe0001000
 8003b08:	000f4240 	.word	0x000f4240

08003b0c <TM_OneWire_Init>:
#include "tm_stm32_onewire.h"
#include "tm_stm32_delay.h"
#include "defines.h"
#include "tm_stm32_gpio.h"

void TM_OneWire_Init(TM_OneWire_t* OneWireStruct, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8003b0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003b0e:	460e      	mov	r6, r1
 8003b10:	4615      	mov	r5, r2
 8003b12:	4604      	mov	r4, r0
	/* Initialize delay if it was not already */
	TM_DELAY_Init();
 8003b14:	f7ff fd1a 	bl	800354c <TM_DELAY_Init>

	/* Init GPIO pin */
	TM_GPIO_Init(GPIOx, GPIO_Pin, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium);
 8003b18:	2201      	movs	r2, #1
 8003b1a:	e9cd 2200 	strd	r2, r2, [sp]
 8003b1e:	2300      	movs	r3, #0
 8003b20:	4629      	mov	r1, r5
 8003b22:	4630      	mov	r0, r6
 8003b24:	f7ff ffc0 	bl	8003aa8 <TM_GPIO_Init>
	
	/* Save settings */
	OneWireStruct->GPIOx = GPIOx;
 8003b28:	6026      	str	r6, [r4, #0]
	OneWireStruct->GPIO_Pin = GPIO_Pin;
 8003b2a:	80a5      	strh	r5, [r4, #4]
}
 8003b2c:	b002      	add	sp, #8
 8003b2e:	bd70      	pop	{r4, r5, r6, pc}

08003b30 <TM_OneWire_Reset>:

uint8_t TM_OneWire_Reset(TM_OneWire_t* OneWireStruct) {
	uint8_t i;
	
	/* Line low, and wait 480us */
	ONEWIRE_LOW(OneWireStruct);
 8003b30:	8881      	ldrh	r1, [r0, #4]
uint8_t TM_OneWire_Reset(TM_OneWire_t* OneWireStruct) {
 8003b32:	b510      	push	{r4, lr}
 8003b34:	4604      	mov	r4, r0
	ONEWIRE_LOW(OneWireStruct);
 8003b36:	6800      	ldr	r0, [r0, #0]
 8003b38:	040b      	lsls	r3, r1, #16
 8003b3a:	6183      	str	r3, [r0, #24]
	ONEWIRE_OUTPUT(OneWireStruct);
 8003b3c:	f7ff ff2b 	bl	8003996 <TM_GPIO_SetPinAsOutput>
	ONEWIRE_DELAY(480);
 8003b40:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8003b44:	f7ff ffca 	bl	8003adc <Delay>
	
	/* Release line and wait for 70us */
	ONEWIRE_INPUT(OneWireStruct);
 8003b48:	88a1      	ldrh	r1, [r4, #4]
 8003b4a:	6820      	ldr	r0, [r4, #0]
 8003b4c:	f7ff ff11 	bl	8003972 <TM_GPIO_SetPinAsInput>
	ONEWIRE_DELAY(70);
 8003b50:	2046      	movs	r0, #70	; 0x46
 8003b52:	f7ff ffc3 	bl	8003adc <Delay>
	
	/* Check bit value */
	i = TM_GPIO_GetInputPinValue(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin);
 8003b56:	6823      	ldr	r3, [r4, #0]
 8003b58:	88a2      	ldrh	r2, [r4, #4]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	421a      	tst	r2, r3
 8003b5e:	bf14      	ite	ne
 8003b60:	2401      	movne	r4, #1
 8003b62:	2400      	moveq	r4, #0
	
	/* Delay for 410 us */
	ONEWIRE_DELAY(410);
 8003b64:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8003b68:	f7ff ffb8 	bl	8003adc <Delay>
	
	/* Return value of presence pulse, 0 = OK, 1 = ERROR */
	return i;
}
 8003b6c:	4620      	mov	r0, r4
 8003b6e:	bd10      	pop	{r4, pc}

08003b70 <TM_OneWire_WriteBit>:

void TM_OneWire_WriteBit(TM_OneWire_t* OneWireStruct, uint8_t bit) {
 8003b70:	8883      	ldrh	r3, [r0, #4]
 8003b72:	b510      	push	{r4, lr}
 8003b74:	4604      	mov	r4, r0
 8003b76:	6800      	ldr	r0, [r0, #0]
 8003b78:	041a      	lsls	r2, r3, #16
	if (bit) {
		/* Set line low */
		ONEWIRE_LOW(OneWireStruct);
 8003b7a:	6182      	str	r2, [r0, #24]
	if (bit) {
 8003b7c:	b191      	cbz	r1, 8003ba4 <TM_OneWire_WriteBit+0x34>
		ONEWIRE_OUTPUT(OneWireStruct);
 8003b7e:	4619      	mov	r1, r3
 8003b80:	f7ff ff09 	bl	8003996 <TM_GPIO_SetPinAsOutput>
		ONEWIRE_DELAY(10);
 8003b84:	200a      	movs	r0, #10
 8003b86:	f7ff ffa9 	bl	8003adc <Delay>
		
		/* Bit high */
		ONEWIRE_INPUT(OneWireStruct);
 8003b8a:	6820      	ldr	r0, [r4, #0]
 8003b8c:	88a1      	ldrh	r1, [r4, #4]
 8003b8e:	f7ff fef0 	bl	8003972 <TM_GPIO_SetPinAsInput>
		
		/* Wait for 55 us and release the line */
		ONEWIRE_DELAY(55);
 8003b92:	2037      	movs	r0, #55	; 0x37
		
		/* Bit high */
		ONEWIRE_INPUT(OneWireStruct);
		
		/* Wait for 5 us and release the line */
		ONEWIRE_DELAY(5);
 8003b94:	f7ff ffa2 	bl	8003adc <Delay>
		ONEWIRE_INPUT(OneWireStruct);
 8003b98:	88a1      	ldrh	r1, [r4, #4]
 8003b9a:	6820      	ldr	r0, [r4, #0]
	}
}
 8003b9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ONEWIRE_INPUT(OneWireStruct);
 8003ba0:	f7ff bee7 	b.w	8003972 <TM_GPIO_SetPinAsInput>
		ONEWIRE_OUTPUT(OneWireStruct);
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	f7ff fef6 	bl	8003996 <TM_GPIO_SetPinAsOutput>
		ONEWIRE_DELAY(65);
 8003baa:	2041      	movs	r0, #65	; 0x41
 8003bac:	f7ff ff96 	bl	8003adc <Delay>
		ONEWIRE_INPUT(OneWireStruct);
 8003bb0:	6820      	ldr	r0, [r4, #0]
 8003bb2:	88a1      	ldrh	r1, [r4, #4]
 8003bb4:	f7ff fedd 	bl	8003972 <TM_GPIO_SetPinAsInput>
		ONEWIRE_DELAY(5);
 8003bb8:	2005      	movs	r0, #5
 8003bba:	e7eb      	b.n	8003b94 <TM_OneWire_WriteBit+0x24>

08003bbc <TM_OneWire_ReadBit>:

uint8_t TM_OneWire_ReadBit(TM_OneWire_t* OneWireStruct) {
	uint8_t bit = 0;
	
	/* Line low */
	ONEWIRE_LOW(OneWireStruct);
 8003bbc:	8881      	ldrh	r1, [r0, #4]
uint8_t TM_OneWire_ReadBit(TM_OneWire_t* OneWireStruct) {
 8003bbe:	b510      	push	{r4, lr}
 8003bc0:	4604      	mov	r4, r0
	ONEWIRE_LOW(OneWireStruct);
 8003bc2:	6800      	ldr	r0, [r0, #0]
 8003bc4:	040b      	lsls	r3, r1, #16
 8003bc6:	6183      	str	r3, [r0, #24]
	ONEWIRE_OUTPUT(OneWireStruct);
 8003bc8:	f7ff fee5 	bl	8003996 <TM_GPIO_SetPinAsOutput>
	ONEWIRE_DELAY(3);
 8003bcc:	2003      	movs	r0, #3
 8003bce:	f7ff ff85 	bl	8003adc <Delay>
	
	/* Release line */
	ONEWIRE_INPUT(OneWireStruct);
 8003bd2:	88a1      	ldrh	r1, [r4, #4]
 8003bd4:	6820      	ldr	r0, [r4, #0]
 8003bd6:	f7ff fecc 	bl	8003972 <TM_GPIO_SetPinAsInput>
	ONEWIRE_DELAY(10);
 8003bda:	200a      	movs	r0, #10
 8003bdc:	f7ff ff7e 	bl	8003adc <Delay>
	
	/* Read line value */
	if (TM_GPIO_GetInputPinValue(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) {
 8003be0:	6823      	ldr	r3, [r4, #0]
 8003be2:	88a2      	ldrh	r2, [r4, #4]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	421a      	tst	r2, r3
	uint8_t bit = 0;
 8003be8:	bf14      	ite	ne
 8003bea:	2401      	movne	r4, #1
 8003bec:	2400      	moveq	r4, #0
		/* Bit is HIGH */
		bit = 1;
	}
	
	/* Wait 50us to complete 60us period */
	ONEWIRE_DELAY(50);
 8003bee:	2032      	movs	r0, #50	; 0x32
 8003bf0:	f7ff ff74 	bl	8003adc <Delay>
	
	/* Return bit value */
	return bit;
}
 8003bf4:	4620      	mov	r0, r4
 8003bf6:	bd10      	pop	{r4, pc}

08003bf8 <TM_OneWire_WriteByte>:

void TM_OneWire_WriteByte(TM_OneWire_t* OneWireStruct, uint8_t byte) {
 8003bf8:	b570      	push	{r4, r5, r6, lr}
 8003bfa:	4606      	mov	r6, r0
 8003bfc:	460d      	mov	r5, r1
	uint8_t i = 8;
	/* Write 8 bits */
	while (i--) {
 8003bfe:	2409      	movs	r4, #9
 8003c00:	3c01      	subs	r4, #1
 8003c02:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8003c06:	d100      	bne.n	8003c0a <TM_OneWire_WriteByte+0x12>
		/* LSB bit is first */
		TM_OneWire_WriteBit(OneWireStruct, byte & 0x01);
		byte >>= 1;
	}
}
 8003c08:	bd70      	pop	{r4, r5, r6, pc}
		TM_OneWire_WriteBit(OneWireStruct, byte & 0x01);
 8003c0a:	f005 0101 	and.w	r1, r5, #1
 8003c0e:	4630      	mov	r0, r6
 8003c10:	f7ff ffae 	bl	8003b70 <TM_OneWire_WriteBit>
		byte >>= 1;
 8003c14:	086d      	lsrs	r5, r5, #1
 8003c16:	e7f3      	b.n	8003c00 <TM_OneWire_WriteByte+0x8>

08003c18 <TM_OneWire_ReadByte>:

uint8_t TM_OneWire_ReadByte(TM_OneWire_t* OneWireStruct) {
 8003c18:	b570      	push	{r4, r5, r6, lr}
 8003c1a:	4606      	mov	r6, r0
	uint8_t i = 8, byte = 0;
	while (i--) {
 8003c1c:	2509      	movs	r5, #9
	uint8_t i = 8, byte = 0;
 8003c1e:	2400      	movs	r4, #0
 8003c20:	3d01      	subs	r5, #1
	while (i--) {
 8003c22:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8003c26:	d101      	bne.n	8003c2c <TM_OneWire_ReadByte+0x14>
		byte >>= 1;
		byte |= (TM_OneWire_ReadBit(OneWireStruct) << 7);
	}
	
	return byte;
}
 8003c28:	4620      	mov	r0, r4
 8003c2a:	bd70      	pop	{r4, r5, r6, pc}
		byte |= (TM_OneWire_ReadBit(OneWireStruct) << 7);
 8003c2c:	4630      	mov	r0, r6
 8003c2e:	f7ff ffc5 	bl	8003bbc <TM_OneWire_ReadBit>
		byte >>= 1;
 8003c32:	0864      	lsrs	r4, r4, #1
		byte |= (TM_OneWire_ReadBit(OneWireStruct) << 7);
 8003c34:	ea44 14c0 	orr.w	r4, r4, r0, lsl #7
 8003c38:	b2e4      	uxtb	r4, r4
 8003c3a:	e7f1      	b.n	8003c20 <TM_OneWire_ReadByte+0x8>

08003c3c <TM_OneWire_Search>:
	OneWireStruct->LastDiscrepancy = 0;
	OneWireStruct->LastDeviceFlag = 0;
	OneWireStruct->LastFamilyDiscrepancy = 0;
}

uint8_t TM_OneWire_Search(TM_OneWire_t* OneWireStruct, uint8_t command) {
 8003c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	rom_byte_number = 0;
	rom_byte_mask = 1;
	search_result = 0;

	/* Check if any devices */
	if (!OneWireStruct->LastDeviceFlag) {
 8003c40:	7a03      	ldrb	r3, [r0, #8]
uint8_t TM_OneWire_Search(TM_OneWire_t* OneWireStruct, uint8_t command) {
 8003c42:	4604      	mov	r4, r0
 8003c44:	460d      	mov	r5, r1
	if (!OneWireStruct->LastDeviceFlag) {
 8003c46:	b91b      	cbnz	r3, 8003c50 <TM_OneWire_Search+0x14>
		/* 1-Wire reset */
		if (TM_OneWire_Reset(OneWireStruct)) {
 8003c48:	f7ff ff72 	bl	8003b30 <TM_OneWire_Reset>
 8003c4c:	4681      	mov	r9, r0
 8003c4e:	b120      	cbz	r0, 8003c5a <TM_OneWire_Search+0x1e>
			/* Reset the search */
			OneWireStruct->LastDiscrepancy = 0;
 8003c50:	2000      	movs	r0, #0
 8003c52:	80e0      	strh	r0, [r4, #6]
			OneWireStruct->LastDeviceFlag = 0;
			OneWireStruct->LastFamilyDiscrepancy = 0;
 8003c54:	7220      	strb	r0, [r4, #8]
		OneWireStruct->LastFamilyDiscrepancy = 0;
		search_result = 0;
	}

	return search_result;
}
 8003c56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		TM_OneWire_WriteByte(OneWireStruct, command);  
 8003c5a:	4629      	mov	r1, r5
 8003c5c:	4620      	mov	r0, r4
 8003c5e:	f7ff ffcb 	bl	8003bf8 <TM_OneWire_WriteByte>
	rom_byte_mask = 1;
 8003c62:	2601      	movs	r6, #1
	rom_byte_number = 0;
 8003c64:	464f      	mov	r7, r9
	id_bit_number = 1;
 8003c66:	4635      	mov	r5, r6
			id_bit = TM_OneWire_ReadBit(OneWireStruct);
 8003c68:	4620      	mov	r0, r4
 8003c6a:	f7ff ffa7 	bl	8003bbc <TM_OneWire_ReadBit>
 8003c6e:	4680      	mov	r8, r0
			cmp_id_bit = TM_OneWire_ReadBit(OneWireStruct);
 8003c70:	4620      	mov	r0, r4
 8003c72:	f7ff ffa3 	bl	8003bbc <TM_OneWire_ReadBit>
			if ((id_bit == 1) && (cmp_id_bit == 1)) {
 8003c76:	f1b8 0f01 	cmp.w	r8, #1
 8003c7a:	d10f      	bne.n	8003c9c <TM_OneWire_Search+0x60>
 8003c7c:	2801      	cmp	r0, #1
 8003c7e:	d12b      	bne.n	8003cd8 <TM_OneWire_Search+0x9c>
		if (!(id_bit_number < 65)) {
 8003c80:	2d40      	cmp	r5, #64	; 0x40
 8003c82:	d9e5      	bls.n	8003c50 <TM_OneWire_Search+0x14>
			OneWireStruct->LastDiscrepancy = last_zero;
 8003c84:	f884 9006 	strb.w	r9, [r4, #6]
			if (OneWireStruct->LastDiscrepancy == 0) {
 8003c88:	f1b9 0f00 	cmp.w	r9, #0
 8003c8c:	d101      	bne.n	8003c92 <TM_OneWire_Search+0x56>
				OneWireStruct->LastDeviceFlag = 1;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	7223      	strb	r3, [r4, #8]
	if (!search_result || !OneWireStruct->ROM_NO[0]) {
 8003c92:	7a63      	ldrb	r3, [r4, #9]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d0db      	beq.n	8003c50 <TM_OneWire_Search+0x14>
			search_result = 1;
 8003c98:	2001      	movs	r0, #1
 8003c9a:	e7dc      	b.n	8003c56 <TM_OneWire_Search+0x1a>
 8003c9c:	19e2      	adds	r2, r4, r7
				if (id_bit != cmp_id_bit) {
 8003c9e:	4580      	cmp	r8, r0
 8003ca0:	7a53      	ldrb	r3, [r2, #9]
 8003ca2:	d10f      	bne.n	8003cc4 <TM_OneWire_Search+0x88>
					if (id_bit_number < OneWireStruct->LastDiscrepancy) {
 8003ca4:	79a1      	ldrb	r1, [r4, #6]
 8003ca6:	42a9      	cmp	r1, r5
 8003ca8:	d910      	bls.n	8003ccc <TM_OneWire_Search+0x90>
						search_direction = ((OneWireStruct->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 8003caa:	4233      	tst	r3, r6
 8003cac:	bf14      	ite	ne
 8003cae:	f04f 0801 	movne.w	r8, #1
 8003cb2:	f04f 0800 	moveq.w	r8, #0
					if (search_direction == 0) {
 8003cb6:	f1b8 0f00 	cmp.w	r8, #0
 8003cba:	d10d      	bne.n	8003cd8 <TM_OneWire_Search+0x9c>
						if (last_zero < 9) {
 8003cbc:	2d08      	cmp	r5, #8
 8003cbe:	d800      	bhi.n	8003cc2 <TM_OneWire_Search+0x86>
							OneWireStruct->LastFamilyDiscrepancy = last_zero;
 8003cc0:	71e5      	strb	r5, [r4, #7]
 8003cc2:	46a9      	mov	r9, r5
					OneWireStruct->ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 8003cc4:	ea23 0306 	bic.w	r3, r3, r6
 8003cc8:	7253      	strb	r3, [r2, #9]
 8003cca:	e00b      	b.n	8003ce4 <TM_OneWire_Search+0xa8>
						search_direction = (id_bit_number == OneWireStruct->LastDiscrepancy);
 8003ccc:	bf0c      	ite	eq
 8003cce:	f04f 0801 	moveq.w	r8, #1
 8003cd2:	f04f 0800 	movne.w	r8, #0
 8003cd6:	e7ee      	b.n	8003cb6 <TM_OneWire_Search+0x7a>
					OneWireStruct->ROM_NO[rom_byte_number] |= rom_byte_mask;
 8003cd8:	19e2      	adds	r2, r4, r7
 8003cda:	f04f 0801 	mov.w	r8, #1
 8003cde:	7a53      	ldrb	r3, [r2, #9]
 8003ce0:	4333      	orrs	r3, r6
 8003ce2:	7253      	strb	r3, [r2, #9]
				TM_OneWire_WriteBit(OneWireStruct, search_direction);
 8003ce4:	4641      	mov	r1, r8
 8003ce6:	4620      	mov	r0, r4
				rom_byte_mask <<= 1;
 8003ce8:	0076      	lsls	r6, r6, #1
				TM_OneWire_WriteBit(OneWireStruct, search_direction);
 8003cea:	f7ff ff41 	bl	8003b70 <TM_OneWire_WriteBit>
				if (rom_byte_mask == 0) {
 8003cee:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
					rom_byte_number++;
 8003cf2:	bf04      	itt	eq
 8003cf4:	3701      	addeq	r7, #1
 8003cf6:	b2ff      	uxtbeq	r7, r7
				id_bit_number++;
 8003cf8:	f105 0501 	add.w	r5, r5, #1
					rom_byte_mask = 1;
 8003cfc:	bf08      	it	eq
 8003cfe:	2601      	moveq	r6, #1
		} while (rom_byte_number < 8);
 8003d00:	2f07      	cmp	r7, #7
				id_bit_number++;
 8003d02:	b2ed      	uxtb	r5, r5
		} while (rom_byte_number < 8);
 8003d04:	d9b0      	bls.n	8003c68 <TM_OneWire_Search+0x2c>
 8003d06:	e7bb      	b.n	8003c80 <TM_OneWire_Search+0x44>

08003d08 <TM_OneWire_First>:
	OneWireStruct->LastDiscrepancy = 0;
 8003d08:	2200      	movs	r2, #0
 8003d0a:	80c2      	strh	r2, [r0, #6]
	OneWireStruct->LastFamilyDiscrepancy = 0;
 8003d0c:	7202      	strb	r2, [r0, #8]
	return TM_OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 8003d0e:	21f0      	movs	r1, #240	; 0xf0
 8003d10:	f7ff bf94 	b.w	8003c3c <TM_OneWire_Search>

08003d14 <TM_OneWire_Select>:

uint8_t TM_OneWire_GetROM(TM_OneWire_t* OneWireStruct, uint8_t index) {
	return OneWireStruct->ROM_NO[index];
}

void TM_OneWire_Select(TM_OneWire_t* OneWireStruct, uint8_t* addr) {
 8003d14:	b570      	push	{r4, r5, r6, lr}
 8003d16:	460c      	mov	r4, r1
	uint8_t i;
	TM_OneWire_WriteByte(OneWireStruct, ONEWIRE_CMD_MATCHROM);
 8003d18:	2155      	movs	r1, #85	; 0x55
void TM_OneWire_Select(TM_OneWire_t* OneWireStruct, uint8_t* addr) {
 8003d1a:	4606      	mov	r6, r0
	TM_OneWire_WriteByte(OneWireStruct, ONEWIRE_CMD_MATCHROM);
 8003d1c:	f7ff ff6c 	bl	8003bf8 <TM_OneWire_WriteByte>
 8003d20:	1e65      	subs	r5, r4, #1
 8003d22:	3407      	adds	r4, #7
	
	for (i = 0; i < 8; i++) {
		TM_OneWire_WriteByte(OneWireStruct, *(addr + i));
 8003d24:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8003d28:	4630      	mov	r0, r6
 8003d2a:	f7ff ff65 	bl	8003bf8 <TM_OneWire_WriteByte>
	for (i = 0; i < 8; i++) {
 8003d2e:	42a5      	cmp	r5, r4
 8003d30:	d1f8      	bne.n	8003d24 <TM_OneWire_Select+0x10>
	}
}
 8003d32:	bd70      	pop	{r4, r5, r6, pc}

08003d34 <TM_OneWire_SelectWithPointer>:
 8003d34:	f7ff bfee 	b.w	8003d14 <TM_OneWire_Select>

08003d38 <TM_OneWire_GetFullROM>:
	for (i = 0; i < 8; i++) {
		TM_OneWire_WriteByte(OneWireStruct, *(ROM + i));
	}	
}

void TM_OneWire_GetFullROM(TM_OneWire_t* OneWireStruct, uint8_t *firstIndex) {
 8003d38:	f100 0309 	add.w	r3, r0, #9
 8003d3c:	3901      	subs	r1, #1
 8003d3e:	3011      	adds	r0, #17
	uint8_t i;
	for (i = 0; i < 8; i++) {
		*(firstIndex + i) = OneWireStruct->ROM_NO[i];
 8003d40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d44:	f801 2f01 	strb.w	r2, [r1, #1]!
	for (i = 0; i < 8; i++) {
 8003d48:	4283      	cmp	r3, r0
 8003d4a:	d1f9      	bne.n	8003d40 <TM_OneWire_GetFullROM+0x8>
	}
}
 8003d4c:	4770      	bx	lr

08003d4e <TM_OneWire_CRC8>:

uint8_t TM_OneWire_CRC8(uint8_t *addr, uint8_t len) {
 8003d4e:	b530      	push	{r4, r5, lr}
 8003d50:	4401      	add	r1, r0
	uint8_t crc = 0, inbyte, i, mix;
 8003d52:	2300      	movs	r3, #0
	
	while (len--) {
 8003d54:	4288      	cmp	r0, r1
 8003d56:	d101      	bne.n	8003d5c <TM_OneWire_CRC8+0xe>
		}
	}
	
	/* Return calculated CRC */
	return crc;
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	bd30      	pop	{r4, r5, pc}
		inbyte = *addr++;
 8003d5c:	f810 4b01 	ldrb.w	r4, [r0], #1
 8003d60:	2208      	movs	r2, #8
			mix = (crc ^ inbyte) & 0x01;
 8003d62:	ea83 0504 	eor.w	r5, r3, r4
			if (mix) {
 8003d66:	f015 0f01 	tst.w	r5, #1
 8003d6a:	ea4f 0353 	mov.w	r3, r3, lsr #1
				crc ^= 0x8C;
 8003d6e:	bf18      	it	ne
 8003d70:	f083 038c 	eorne.w	r3, r3, #140	; 0x8c
 8003d74:	f102 32ff 	add.w	r2, r2, #4294967295
 8003d78:	bf18      	it	ne
 8003d7a:	b2db      	uxtbne	r3, r3
		for (i = 8; i; i--) {
 8003d7c:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
			inbyte >>= 1;
 8003d80:	ea4f 0454 	mov.w	r4, r4, lsr #1
		for (i = 8; i; i--) {
 8003d84:	d1ed      	bne.n	8003d62 <TM_OneWire_CRC8+0x14>
 8003d86:	e7e5      	b.n	8003d54 <TM_OneWire_CRC8+0x6>

08003d88 <TM_RCC_InitSystem>:
 * | OTHER DEALINGS IN THE SOFTWARE.
 * |----------------------------------------------------------------------
 */
#include "tm_stm32_rcc.h"

TM_RCC_Result_t TM_RCC_InitSystem(void) {
 8003d88:	b510      	push	{r4, lr}
 8003d8a:	b094      	sub	sp, #80	; 0x50
	/* Enable D-Cache */
	SCB_EnableDCache();
#endif
	
	/* Enable Power Control clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	4a24      	ldr	r2, [pc, #144]	; (8003e20 <TM_RCC_InitSystem+0x98>)
 8003d90:	9300      	str	r3, [sp, #0]
 8003d92:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8003d94:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8003d98:	6411      	str	r1, [r2, #64]	; 0x40
 8003d9a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003d9c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8003da0:	9200      	str	r2, [sp, #0]
 8003da2:	9a00      	ldr	r2, [sp, #0]

#if !defined(STM32F0xx)
	/* Set voltage scaling */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003da4:	4a1f      	ldr	r2, [pc, #124]	; (8003e24 <TM_RCC_InitSystem+0x9c>)
 8003da6:	9301      	str	r3, [sp, #4]
 8003da8:	6811      	ldr	r1, [r2, #0]
 8003daa:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8003dae:	6011      	str	r1, [r2, #0]
 8003db0:	6812      	ldr	r2, [r2, #0]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE;
	
	/* Select proper PLL input clock */
	if (RCC_OSCILLATORTYPE == RCC_OSCILLATORTYPE_HSE) {	
		RCC_OscInitStruct.HSEState = RCC_HSE_ON;
		RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8003db2:	930a      	str	r3, [sp, #40]	; 0x28
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003db4:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
		RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
#endif
	}
	
	/* Set PLL parameters */
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003db8:	2402      	movs	r4, #2
 8003dba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003dbe:	9201      	str	r2, [sp, #4]
		RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003dc0:	2001      	movs	r0, #1
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003dc2:	9a01      	ldr	r2, [sp, #4]
	
#if !defined(STM32F0xx)
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM;
	RCC_OscInitStruct.PLL.PLLN = RCC_PLLN;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP;
 8003dc4:	9411      	str	r4, [sp, #68]	; 0x44
		RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003dc6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003dca:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLN = RCC_PLLN;
 8003dce:	f04f 0c08 	mov.w	ip, #8
 8003dd2:	f44f 73b4 	mov.w	r3, #360	; 0x168
		RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003dd6:	e9cd 0207 	strd	r0, r2, [sp, #28]
	RCC_OscInitStruct.PLL.PLLN = RCC_PLLN;
 8003dda:	e9cd c30f 	strd	ip, r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLR = 7;
#endif
#endif
	
	/* Try to init */
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003dde:	a807      	add	r0, sp, #28
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ;
 8003de0:	2307      	movs	r3, #7
	RCC_OscInitStruct.PLL.PLLR = 7;
 8003de2:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003de6:	f7fd f8b1 	bl	8000f4c <HAL_RCC_OscConfig>
 8003dea:	b110      	cbz	r0, 8003df2 <TM_RCC_InitSystem+0x6a>

		return TM_RCC_Result_Error;
 8003dec:	2001      	movs	r0, #1
		return TM_RCC_Result_Error;
	}
	
	/* Return OK */
	return TM_RCC_Result_Ok;
}
 8003dee:	b014      	add	sp, #80	; 0x50
 8003df0:	bd10      	pop	{r4, pc}
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8003df2:	f7fc fd43 	bl	800087c <HAL_PWREx_EnableOverDrive>
 8003df6:	2800      	cmp	r0, #0
 8003df8:	d1f8      	bne.n	8003dec <TM_RCC_InitSystem+0x64>
	RCC_ClkInitStruct.ClockType |= RCC_CLOCKTYPE_PCLK2;
 8003dfa:	230f      	movs	r3, #15
 8003dfc:	9302      	str	r3, [sp, #8]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003dfe:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8003e02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e06:	e9cd 4003 	strd	r4, r0, [sp, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003e0a:	e9cd 1305 	strd	r1, r3, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK) {
 8003e0e:	a802      	add	r0, sp, #8
 8003e10:	2106      	movs	r1, #6
 8003e12:	f7fc fd6f 	bl	80008f4 <HAL_RCC_ClockConfig>
		return TM_RCC_Result_Error;
 8003e16:	3000      	adds	r0, #0
 8003e18:	bf18      	it	ne
 8003e1a:	2001      	movne	r0, #1
 8003e1c:	e7e7      	b.n	8003dee <TM_RCC_InitSystem+0x66>
 8003e1e:	bf00      	nop
 8003e20:	40023800 	.word	0x40023800
 8003e24:	40007000 	.word	0x40007000

08003e28 <Reset_Handler>:
 8003e28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e60 <LoopFillZerobss+0x14>
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	e003      	b.n	8003e38 <LoopCopyDataInit>

08003e30 <CopyDataInit>:
 8003e30:	4b0c      	ldr	r3, [pc, #48]	; (8003e64 <LoopFillZerobss+0x18>)
 8003e32:	585b      	ldr	r3, [r3, r1]
 8003e34:	5043      	str	r3, [r0, r1]
 8003e36:	3104      	adds	r1, #4

08003e38 <LoopCopyDataInit>:
 8003e38:	480b      	ldr	r0, [pc, #44]	; (8003e68 <LoopFillZerobss+0x1c>)
 8003e3a:	4b0c      	ldr	r3, [pc, #48]	; (8003e6c <LoopFillZerobss+0x20>)
 8003e3c:	1842      	adds	r2, r0, r1
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d3f6      	bcc.n	8003e30 <CopyDataInit>
 8003e42:	4a0b      	ldr	r2, [pc, #44]	; (8003e70 <LoopFillZerobss+0x24>)
 8003e44:	e002      	b.n	8003e4c <LoopFillZerobss>

08003e46 <FillZerobss>:
 8003e46:	2300      	movs	r3, #0
 8003e48:	f842 3b04 	str.w	r3, [r2], #4

08003e4c <LoopFillZerobss>:
 8003e4c:	4b09      	ldr	r3, [pc, #36]	; (8003e74 <LoopFillZerobss+0x28>)
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d3f9      	bcc.n	8003e46 <FillZerobss>
 8003e52:	f7ff fb55 	bl	8003500 <SystemInit>
 8003e56:	f000 f817 	bl	8003e88 <__libc_init_array>
 8003e5a:	f7ff f8cb 	bl	8002ff4 <main>
 8003e5e:	4770      	bx	lr
 8003e60:	20020000 	.word	0x20020000
 8003e64:	08005160 	.word	0x08005160
 8003e68:	20000000 	.word	0x20000000
 8003e6c:	20000078 	.word	0x20000078
 8003e70:	20000078 	.word	0x20000078
 8003e74:	20004248 	.word	0x20004248

08003e78 <ADC_IRQHandler>:
 8003e78:	e7fe      	b.n	8003e78 <ADC_IRQHandler>
	...

08003e7c <__errno>:
 8003e7c:	4b01      	ldr	r3, [pc, #4]	; (8003e84 <__errno+0x8>)
 8003e7e:	6818      	ldr	r0, [r3, #0]
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	20000014 	.word	0x20000014

08003e88 <__libc_init_array>:
 8003e88:	b570      	push	{r4, r5, r6, lr}
 8003e8a:	4e0d      	ldr	r6, [pc, #52]	; (8003ec0 <__libc_init_array+0x38>)
 8003e8c:	4c0d      	ldr	r4, [pc, #52]	; (8003ec4 <__libc_init_array+0x3c>)
 8003e8e:	1ba4      	subs	r4, r4, r6
 8003e90:	10a4      	asrs	r4, r4, #2
 8003e92:	2500      	movs	r5, #0
 8003e94:	42a5      	cmp	r5, r4
 8003e96:	d109      	bne.n	8003eac <__libc_init_array+0x24>
 8003e98:	4e0b      	ldr	r6, [pc, #44]	; (8003ec8 <__libc_init_array+0x40>)
 8003e9a:	4c0c      	ldr	r4, [pc, #48]	; (8003ecc <__libc_init_array+0x44>)
 8003e9c:	f001 f8ca 	bl	8005034 <_init>
 8003ea0:	1ba4      	subs	r4, r4, r6
 8003ea2:	10a4      	asrs	r4, r4, #2
 8003ea4:	2500      	movs	r5, #0
 8003ea6:	42a5      	cmp	r5, r4
 8003ea8:	d105      	bne.n	8003eb6 <__libc_init_array+0x2e>
 8003eaa:	bd70      	pop	{r4, r5, r6, pc}
 8003eac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003eb0:	4798      	blx	r3
 8003eb2:	3501      	adds	r5, #1
 8003eb4:	e7ee      	b.n	8003e94 <__libc_init_array+0xc>
 8003eb6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003eba:	4798      	blx	r3
 8003ebc:	3501      	adds	r5, #1
 8003ebe:	e7f2      	b.n	8003ea6 <__libc_init_array+0x1e>
 8003ec0:	08005158 	.word	0x08005158
 8003ec4:	08005158 	.word	0x08005158
 8003ec8:	08005158 	.word	0x08005158
 8003ecc:	0800515c 	.word	0x0800515c

08003ed0 <memcpy>:
 8003ed0:	b510      	push	{r4, lr}
 8003ed2:	1e43      	subs	r3, r0, #1
 8003ed4:	440a      	add	r2, r1
 8003ed6:	4291      	cmp	r1, r2
 8003ed8:	d100      	bne.n	8003edc <memcpy+0xc>
 8003eda:	bd10      	pop	{r4, pc}
 8003edc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ee0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ee4:	e7f7      	b.n	8003ed6 <memcpy+0x6>

08003ee6 <memset>:
 8003ee6:	4402      	add	r2, r0
 8003ee8:	4603      	mov	r3, r0
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d100      	bne.n	8003ef0 <memset+0xa>
 8003eee:	4770      	bx	lr
 8003ef0:	f803 1b01 	strb.w	r1, [r3], #1
 8003ef4:	e7f9      	b.n	8003eea <memset+0x4>
	...

08003ef8 <_free_r>:
 8003ef8:	b538      	push	{r3, r4, r5, lr}
 8003efa:	4605      	mov	r5, r0
 8003efc:	2900      	cmp	r1, #0
 8003efe:	d045      	beq.n	8003f8c <_free_r+0x94>
 8003f00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f04:	1f0c      	subs	r4, r1, #4
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	bfb8      	it	lt
 8003f0a:	18e4      	addlt	r4, r4, r3
 8003f0c:	f000 f9ae 	bl	800426c <__malloc_lock>
 8003f10:	4a1f      	ldr	r2, [pc, #124]	; (8003f90 <_free_r+0x98>)
 8003f12:	6813      	ldr	r3, [r2, #0]
 8003f14:	4610      	mov	r0, r2
 8003f16:	b933      	cbnz	r3, 8003f26 <_free_r+0x2e>
 8003f18:	6063      	str	r3, [r4, #4]
 8003f1a:	6014      	str	r4, [r2, #0]
 8003f1c:	4628      	mov	r0, r5
 8003f1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f22:	f000 b9a4 	b.w	800426e <__malloc_unlock>
 8003f26:	42a3      	cmp	r3, r4
 8003f28:	d90c      	bls.n	8003f44 <_free_r+0x4c>
 8003f2a:	6821      	ldr	r1, [r4, #0]
 8003f2c:	1862      	adds	r2, r4, r1
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	bf04      	itt	eq
 8003f32:	681a      	ldreq	r2, [r3, #0]
 8003f34:	685b      	ldreq	r3, [r3, #4]
 8003f36:	6063      	str	r3, [r4, #4]
 8003f38:	bf04      	itt	eq
 8003f3a:	1852      	addeq	r2, r2, r1
 8003f3c:	6022      	streq	r2, [r4, #0]
 8003f3e:	6004      	str	r4, [r0, #0]
 8003f40:	e7ec      	b.n	8003f1c <_free_r+0x24>
 8003f42:	4613      	mov	r3, r2
 8003f44:	685a      	ldr	r2, [r3, #4]
 8003f46:	b10a      	cbz	r2, 8003f4c <_free_r+0x54>
 8003f48:	42a2      	cmp	r2, r4
 8003f4a:	d9fa      	bls.n	8003f42 <_free_r+0x4a>
 8003f4c:	6819      	ldr	r1, [r3, #0]
 8003f4e:	1858      	adds	r0, r3, r1
 8003f50:	42a0      	cmp	r0, r4
 8003f52:	d10b      	bne.n	8003f6c <_free_r+0x74>
 8003f54:	6820      	ldr	r0, [r4, #0]
 8003f56:	4401      	add	r1, r0
 8003f58:	1858      	adds	r0, r3, r1
 8003f5a:	4282      	cmp	r2, r0
 8003f5c:	6019      	str	r1, [r3, #0]
 8003f5e:	d1dd      	bne.n	8003f1c <_free_r+0x24>
 8003f60:	6810      	ldr	r0, [r2, #0]
 8003f62:	6852      	ldr	r2, [r2, #4]
 8003f64:	605a      	str	r2, [r3, #4]
 8003f66:	4401      	add	r1, r0
 8003f68:	6019      	str	r1, [r3, #0]
 8003f6a:	e7d7      	b.n	8003f1c <_free_r+0x24>
 8003f6c:	d902      	bls.n	8003f74 <_free_r+0x7c>
 8003f6e:	230c      	movs	r3, #12
 8003f70:	602b      	str	r3, [r5, #0]
 8003f72:	e7d3      	b.n	8003f1c <_free_r+0x24>
 8003f74:	6820      	ldr	r0, [r4, #0]
 8003f76:	1821      	adds	r1, r4, r0
 8003f78:	428a      	cmp	r2, r1
 8003f7a:	bf04      	itt	eq
 8003f7c:	6811      	ldreq	r1, [r2, #0]
 8003f7e:	6852      	ldreq	r2, [r2, #4]
 8003f80:	6062      	str	r2, [r4, #4]
 8003f82:	bf04      	itt	eq
 8003f84:	1809      	addeq	r1, r1, r0
 8003f86:	6021      	streq	r1, [r4, #0]
 8003f88:	605c      	str	r4, [r3, #4]
 8003f8a:	e7c7      	b.n	8003f1c <_free_r+0x24>
 8003f8c:	bd38      	pop	{r3, r4, r5, pc}
 8003f8e:	bf00      	nop
 8003f90:	2000407c 	.word	0x2000407c

08003f94 <_malloc_r>:
 8003f94:	b570      	push	{r4, r5, r6, lr}
 8003f96:	1ccd      	adds	r5, r1, #3
 8003f98:	f025 0503 	bic.w	r5, r5, #3
 8003f9c:	3508      	adds	r5, #8
 8003f9e:	2d0c      	cmp	r5, #12
 8003fa0:	bf38      	it	cc
 8003fa2:	250c      	movcc	r5, #12
 8003fa4:	2d00      	cmp	r5, #0
 8003fa6:	4606      	mov	r6, r0
 8003fa8:	db01      	blt.n	8003fae <_malloc_r+0x1a>
 8003faa:	42a9      	cmp	r1, r5
 8003fac:	d903      	bls.n	8003fb6 <_malloc_r+0x22>
 8003fae:	230c      	movs	r3, #12
 8003fb0:	6033      	str	r3, [r6, #0]
 8003fb2:	2000      	movs	r0, #0
 8003fb4:	bd70      	pop	{r4, r5, r6, pc}
 8003fb6:	f000 f959 	bl	800426c <__malloc_lock>
 8003fba:	4a21      	ldr	r2, [pc, #132]	; (8004040 <_malloc_r+0xac>)
 8003fbc:	6814      	ldr	r4, [r2, #0]
 8003fbe:	4621      	mov	r1, r4
 8003fc0:	b991      	cbnz	r1, 8003fe8 <_malloc_r+0x54>
 8003fc2:	4c20      	ldr	r4, [pc, #128]	; (8004044 <_malloc_r+0xb0>)
 8003fc4:	6823      	ldr	r3, [r4, #0]
 8003fc6:	b91b      	cbnz	r3, 8003fd0 <_malloc_r+0x3c>
 8003fc8:	4630      	mov	r0, r6
 8003fca:	f000 f855 	bl	8004078 <_sbrk_r>
 8003fce:	6020      	str	r0, [r4, #0]
 8003fd0:	4629      	mov	r1, r5
 8003fd2:	4630      	mov	r0, r6
 8003fd4:	f000 f850 	bl	8004078 <_sbrk_r>
 8003fd8:	1c43      	adds	r3, r0, #1
 8003fda:	d124      	bne.n	8004026 <_malloc_r+0x92>
 8003fdc:	230c      	movs	r3, #12
 8003fde:	6033      	str	r3, [r6, #0]
 8003fe0:	4630      	mov	r0, r6
 8003fe2:	f000 f944 	bl	800426e <__malloc_unlock>
 8003fe6:	e7e4      	b.n	8003fb2 <_malloc_r+0x1e>
 8003fe8:	680b      	ldr	r3, [r1, #0]
 8003fea:	1b5b      	subs	r3, r3, r5
 8003fec:	d418      	bmi.n	8004020 <_malloc_r+0x8c>
 8003fee:	2b0b      	cmp	r3, #11
 8003ff0:	d90f      	bls.n	8004012 <_malloc_r+0x7e>
 8003ff2:	600b      	str	r3, [r1, #0]
 8003ff4:	50cd      	str	r5, [r1, r3]
 8003ff6:	18cc      	adds	r4, r1, r3
 8003ff8:	4630      	mov	r0, r6
 8003ffa:	f000 f938 	bl	800426e <__malloc_unlock>
 8003ffe:	f104 000b 	add.w	r0, r4, #11
 8004002:	1d23      	adds	r3, r4, #4
 8004004:	f020 0007 	bic.w	r0, r0, #7
 8004008:	1ac3      	subs	r3, r0, r3
 800400a:	d0d3      	beq.n	8003fb4 <_malloc_r+0x20>
 800400c:	425a      	negs	r2, r3
 800400e:	50e2      	str	r2, [r4, r3]
 8004010:	e7d0      	b.n	8003fb4 <_malloc_r+0x20>
 8004012:	428c      	cmp	r4, r1
 8004014:	684b      	ldr	r3, [r1, #4]
 8004016:	bf16      	itet	ne
 8004018:	6063      	strne	r3, [r4, #4]
 800401a:	6013      	streq	r3, [r2, #0]
 800401c:	460c      	movne	r4, r1
 800401e:	e7eb      	b.n	8003ff8 <_malloc_r+0x64>
 8004020:	460c      	mov	r4, r1
 8004022:	6849      	ldr	r1, [r1, #4]
 8004024:	e7cc      	b.n	8003fc0 <_malloc_r+0x2c>
 8004026:	1cc4      	adds	r4, r0, #3
 8004028:	f024 0403 	bic.w	r4, r4, #3
 800402c:	42a0      	cmp	r0, r4
 800402e:	d005      	beq.n	800403c <_malloc_r+0xa8>
 8004030:	1a21      	subs	r1, r4, r0
 8004032:	4630      	mov	r0, r6
 8004034:	f000 f820 	bl	8004078 <_sbrk_r>
 8004038:	3001      	adds	r0, #1
 800403a:	d0cf      	beq.n	8003fdc <_malloc_r+0x48>
 800403c:	6025      	str	r5, [r4, #0]
 800403e:	e7db      	b.n	8003ff8 <_malloc_r+0x64>
 8004040:	2000407c 	.word	0x2000407c
 8004044:	20004080 	.word	0x20004080

08004048 <iprintf>:
 8004048:	b40f      	push	{r0, r1, r2, r3}
 800404a:	4b0a      	ldr	r3, [pc, #40]	; (8004074 <iprintf+0x2c>)
 800404c:	b513      	push	{r0, r1, r4, lr}
 800404e:	681c      	ldr	r4, [r3, #0]
 8004050:	b124      	cbz	r4, 800405c <iprintf+0x14>
 8004052:	69a3      	ldr	r3, [r4, #24]
 8004054:	b913      	cbnz	r3, 800405c <iprintf+0x14>
 8004056:	4620      	mov	r0, r4
 8004058:	f000 f87e 	bl	8004158 <__sinit>
 800405c:	ab05      	add	r3, sp, #20
 800405e:	9a04      	ldr	r2, [sp, #16]
 8004060:	68a1      	ldr	r1, [r4, #8]
 8004062:	9301      	str	r3, [sp, #4]
 8004064:	4620      	mov	r0, r4
 8004066:	f000 fa7f 	bl	8004568 <_vfiprintf_r>
 800406a:	b002      	add	sp, #8
 800406c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004070:	b004      	add	sp, #16
 8004072:	4770      	bx	lr
 8004074:	20000014 	.word	0x20000014

08004078 <_sbrk_r>:
 8004078:	b538      	push	{r3, r4, r5, lr}
 800407a:	4c06      	ldr	r4, [pc, #24]	; (8004094 <_sbrk_r+0x1c>)
 800407c:	2300      	movs	r3, #0
 800407e:	4605      	mov	r5, r0
 8004080:	4608      	mov	r0, r1
 8004082:	6023      	str	r3, [r4, #0]
 8004084:	f7ff fa16 	bl	80034b4 <_sbrk>
 8004088:	1c43      	adds	r3, r0, #1
 800408a:	d102      	bne.n	8004092 <_sbrk_r+0x1a>
 800408c:	6823      	ldr	r3, [r4, #0]
 800408e:	b103      	cbz	r3, 8004092 <_sbrk_r+0x1a>
 8004090:	602b      	str	r3, [r5, #0]
 8004092:	bd38      	pop	{r3, r4, r5, pc}
 8004094:	20004244 	.word	0x20004244

08004098 <siprintf>:
 8004098:	b40e      	push	{r1, r2, r3}
 800409a:	b500      	push	{lr}
 800409c:	b09c      	sub	sp, #112	; 0x70
 800409e:	ab1d      	add	r3, sp, #116	; 0x74
 80040a0:	9002      	str	r0, [sp, #8]
 80040a2:	9006      	str	r0, [sp, #24]
 80040a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80040a8:	4809      	ldr	r0, [pc, #36]	; (80040d0 <siprintf+0x38>)
 80040aa:	9107      	str	r1, [sp, #28]
 80040ac:	9104      	str	r1, [sp, #16]
 80040ae:	4909      	ldr	r1, [pc, #36]	; (80040d4 <siprintf+0x3c>)
 80040b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80040b4:	9105      	str	r1, [sp, #20]
 80040b6:	6800      	ldr	r0, [r0, #0]
 80040b8:	9301      	str	r3, [sp, #4]
 80040ba:	a902      	add	r1, sp, #8
 80040bc:	f000 f932 	bl	8004324 <_svfiprintf_r>
 80040c0:	9b02      	ldr	r3, [sp, #8]
 80040c2:	2200      	movs	r2, #0
 80040c4:	701a      	strb	r2, [r3, #0]
 80040c6:	b01c      	add	sp, #112	; 0x70
 80040c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80040cc:	b003      	add	sp, #12
 80040ce:	4770      	bx	lr
 80040d0:	20000014 	.word	0x20000014
 80040d4:	ffff0208 	.word	0xffff0208

080040d8 <std>:
 80040d8:	2300      	movs	r3, #0
 80040da:	b510      	push	{r4, lr}
 80040dc:	4604      	mov	r4, r0
 80040de:	e9c0 3300 	strd	r3, r3, [r0]
 80040e2:	6083      	str	r3, [r0, #8]
 80040e4:	8181      	strh	r1, [r0, #12]
 80040e6:	6643      	str	r3, [r0, #100]	; 0x64
 80040e8:	81c2      	strh	r2, [r0, #14]
 80040ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80040ee:	6183      	str	r3, [r0, #24]
 80040f0:	4619      	mov	r1, r3
 80040f2:	2208      	movs	r2, #8
 80040f4:	305c      	adds	r0, #92	; 0x5c
 80040f6:	f7ff fef6 	bl	8003ee6 <memset>
 80040fa:	4b05      	ldr	r3, [pc, #20]	; (8004110 <std+0x38>)
 80040fc:	6263      	str	r3, [r4, #36]	; 0x24
 80040fe:	4b05      	ldr	r3, [pc, #20]	; (8004114 <std+0x3c>)
 8004100:	62a3      	str	r3, [r4, #40]	; 0x28
 8004102:	4b05      	ldr	r3, [pc, #20]	; (8004118 <std+0x40>)
 8004104:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004106:	4b05      	ldr	r3, [pc, #20]	; (800411c <std+0x44>)
 8004108:	6224      	str	r4, [r4, #32]
 800410a:	6323      	str	r3, [r4, #48]	; 0x30
 800410c:	bd10      	pop	{r4, pc}
 800410e:	bf00      	nop
 8004110:	08004aa5 	.word	0x08004aa5
 8004114:	08004ac7 	.word	0x08004ac7
 8004118:	08004aff 	.word	0x08004aff
 800411c:	08004b23 	.word	0x08004b23

08004120 <_cleanup_r>:
 8004120:	4901      	ldr	r1, [pc, #4]	; (8004128 <_cleanup_r+0x8>)
 8004122:	f000 b885 	b.w	8004230 <_fwalk_reent>
 8004126:	bf00      	nop
 8004128:	08004dfd 	.word	0x08004dfd

0800412c <__sfmoreglue>:
 800412c:	b570      	push	{r4, r5, r6, lr}
 800412e:	1e4a      	subs	r2, r1, #1
 8004130:	2568      	movs	r5, #104	; 0x68
 8004132:	4355      	muls	r5, r2
 8004134:	460e      	mov	r6, r1
 8004136:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800413a:	f7ff ff2b 	bl	8003f94 <_malloc_r>
 800413e:	4604      	mov	r4, r0
 8004140:	b140      	cbz	r0, 8004154 <__sfmoreglue+0x28>
 8004142:	2100      	movs	r1, #0
 8004144:	e9c0 1600 	strd	r1, r6, [r0]
 8004148:	300c      	adds	r0, #12
 800414a:	60a0      	str	r0, [r4, #8]
 800414c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004150:	f7ff fec9 	bl	8003ee6 <memset>
 8004154:	4620      	mov	r0, r4
 8004156:	bd70      	pop	{r4, r5, r6, pc}

08004158 <__sinit>:
 8004158:	6983      	ldr	r3, [r0, #24]
 800415a:	b510      	push	{r4, lr}
 800415c:	4604      	mov	r4, r0
 800415e:	bb33      	cbnz	r3, 80041ae <__sinit+0x56>
 8004160:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004164:	6503      	str	r3, [r0, #80]	; 0x50
 8004166:	4b12      	ldr	r3, [pc, #72]	; (80041b0 <__sinit+0x58>)
 8004168:	4a12      	ldr	r2, [pc, #72]	; (80041b4 <__sinit+0x5c>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6282      	str	r2, [r0, #40]	; 0x28
 800416e:	4298      	cmp	r0, r3
 8004170:	bf04      	itt	eq
 8004172:	2301      	moveq	r3, #1
 8004174:	6183      	streq	r3, [r0, #24]
 8004176:	f000 f81f 	bl	80041b8 <__sfp>
 800417a:	6060      	str	r0, [r4, #4]
 800417c:	4620      	mov	r0, r4
 800417e:	f000 f81b 	bl	80041b8 <__sfp>
 8004182:	60a0      	str	r0, [r4, #8]
 8004184:	4620      	mov	r0, r4
 8004186:	f000 f817 	bl	80041b8 <__sfp>
 800418a:	2200      	movs	r2, #0
 800418c:	60e0      	str	r0, [r4, #12]
 800418e:	2104      	movs	r1, #4
 8004190:	6860      	ldr	r0, [r4, #4]
 8004192:	f7ff ffa1 	bl	80040d8 <std>
 8004196:	2201      	movs	r2, #1
 8004198:	2109      	movs	r1, #9
 800419a:	68a0      	ldr	r0, [r4, #8]
 800419c:	f7ff ff9c 	bl	80040d8 <std>
 80041a0:	2202      	movs	r2, #2
 80041a2:	2112      	movs	r1, #18
 80041a4:	68e0      	ldr	r0, [r4, #12]
 80041a6:	f7ff ff97 	bl	80040d8 <std>
 80041aa:	2301      	movs	r3, #1
 80041ac:	61a3      	str	r3, [r4, #24]
 80041ae:	bd10      	pop	{r4, pc}
 80041b0:	080050b8 	.word	0x080050b8
 80041b4:	08004121 	.word	0x08004121

080041b8 <__sfp>:
 80041b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ba:	4b1b      	ldr	r3, [pc, #108]	; (8004228 <__sfp+0x70>)
 80041bc:	681e      	ldr	r6, [r3, #0]
 80041be:	69b3      	ldr	r3, [r6, #24]
 80041c0:	4607      	mov	r7, r0
 80041c2:	b913      	cbnz	r3, 80041ca <__sfp+0x12>
 80041c4:	4630      	mov	r0, r6
 80041c6:	f7ff ffc7 	bl	8004158 <__sinit>
 80041ca:	3648      	adds	r6, #72	; 0x48
 80041cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80041d0:	3b01      	subs	r3, #1
 80041d2:	d503      	bpl.n	80041dc <__sfp+0x24>
 80041d4:	6833      	ldr	r3, [r6, #0]
 80041d6:	b133      	cbz	r3, 80041e6 <__sfp+0x2e>
 80041d8:	6836      	ldr	r6, [r6, #0]
 80041da:	e7f7      	b.n	80041cc <__sfp+0x14>
 80041dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80041e0:	b16d      	cbz	r5, 80041fe <__sfp+0x46>
 80041e2:	3468      	adds	r4, #104	; 0x68
 80041e4:	e7f4      	b.n	80041d0 <__sfp+0x18>
 80041e6:	2104      	movs	r1, #4
 80041e8:	4638      	mov	r0, r7
 80041ea:	f7ff ff9f 	bl	800412c <__sfmoreglue>
 80041ee:	6030      	str	r0, [r6, #0]
 80041f0:	2800      	cmp	r0, #0
 80041f2:	d1f1      	bne.n	80041d8 <__sfp+0x20>
 80041f4:	230c      	movs	r3, #12
 80041f6:	603b      	str	r3, [r7, #0]
 80041f8:	4604      	mov	r4, r0
 80041fa:	4620      	mov	r0, r4
 80041fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041fe:	4b0b      	ldr	r3, [pc, #44]	; (800422c <__sfp+0x74>)
 8004200:	6665      	str	r5, [r4, #100]	; 0x64
 8004202:	e9c4 5500 	strd	r5, r5, [r4]
 8004206:	60a5      	str	r5, [r4, #8]
 8004208:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800420c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004210:	2208      	movs	r2, #8
 8004212:	4629      	mov	r1, r5
 8004214:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004218:	f7ff fe65 	bl	8003ee6 <memset>
 800421c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004220:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004224:	e7e9      	b.n	80041fa <__sfp+0x42>
 8004226:	bf00      	nop
 8004228:	080050b8 	.word	0x080050b8
 800422c:	ffff0001 	.word	0xffff0001

08004230 <_fwalk_reent>:
 8004230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004234:	4680      	mov	r8, r0
 8004236:	4689      	mov	r9, r1
 8004238:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800423c:	2600      	movs	r6, #0
 800423e:	b914      	cbnz	r4, 8004246 <_fwalk_reent+0x16>
 8004240:	4630      	mov	r0, r6
 8004242:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004246:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800424a:	3f01      	subs	r7, #1
 800424c:	d501      	bpl.n	8004252 <_fwalk_reent+0x22>
 800424e:	6824      	ldr	r4, [r4, #0]
 8004250:	e7f5      	b.n	800423e <_fwalk_reent+0xe>
 8004252:	89ab      	ldrh	r3, [r5, #12]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d907      	bls.n	8004268 <_fwalk_reent+0x38>
 8004258:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800425c:	3301      	adds	r3, #1
 800425e:	d003      	beq.n	8004268 <_fwalk_reent+0x38>
 8004260:	4629      	mov	r1, r5
 8004262:	4640      	mov	r0, r8
 8004264:	47c8      	blx	r9
 8004266:	4306      	orrs	r6, r0
 8004268:	3568      	adds	r5, #104	; 0x68
 800426a:	e7ee      	b.n	800424a <_fwalk_reent+0x1a>

0800426c <__malloc_lock>:
 800426c:	4770      	bx	lr

0800426e <__malloc_unlock>:
 800426e:	4770      	bx	lr

08004270 <__ssputs_r>:
 8004270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004274:	688e      	ldr	r6, [r1, #8]
 8004276:	429e      	cmp	r6, r3
 8004278:	4682      	mov	sl, r0
 800427a:	460c      	mov	r4, r1
 800427c:	4690      	mov	r8, r2
 800427e:	4699      	mov	r9, r3
 8004280:	d837      	bhi.n	80042f2 <__ssputs_r+0x82>
 8004282:	898a      	ldrh	r2, [r1, #12]
 8004284:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004288:	d031      	beq.n	80042ee <__ssputs_r+0x7e>
 800428a:	6825      	ldr	r5, [r4, #0]
 800428c:	6909      	ldr	r1, [r1, #16]
 800428e:	1a6f      	subs	r7, r5, r1
 8004290:	6965      	ldr	r5, [r4, #20]
 8004292:	2302      	movs	r3, #2
 8004294:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004298:	fb95 f5f3 	sdiv	r5, r5, r3
 800429c:	f109 0301 	add.w	r3, r9, #1
 80042a0:	443b      	add	r3, r7
 80042a2:	429d      	cmp	r5, r3
 80042a4:	bf38      	it	cc
 80042a6:	461d      	movcc	r5, r3
 80042a8:	0553      	lsls	r3, r2, #21
 80042aa:	d530      	bpl.n	800430e <__ssputs_r+0x9e>
 80042ac:	4629      	mov	r1, r5
 80042ae:	f7ff fe71 	bl	8003f94 <_malloc_r>
 80042b2:	4606      	mov	r6, r0
 80042b4:	b950      	cbnz	r0, 80042cc <__ssputs_r+0x5c>
 80042b6:	230c      	movs	r3, #12
 80042b8:	f8ca 3000 	str.w	r3, [sl]
 80042bc:	89a3      	ldrh	r3, [r4, #12]
 80042be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042c2:	81a3      	strh	r3, [r4, #12]
 80042c4:	f04f 30ff 	mov.w	r0, #4294967295
 80042c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042cc:	463a      	mov	r2, r7
 80042ce:	6921      	ldr	r1, [r4, #16]
 80042d0:	f7ff fdfe 	bl	8003ed0 <memcpy>
 80042d4:	89a3      	ldrh	r3, [r4, #12]
 80042d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80042da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042de:	81a3      	strh	r3, [r4, #12]
 80042e0:	6126      	str	r6, [r4, #16]
 80042e2:	6165      	str	r5, [r4, #20]
 80042e4:	443e      	add	r6, r7
 80042e6:	1bed      	subs	r5, r5, r7
 80042e8:	6026      	str	r6, [r4, #0]
 80042ea:	60a5      	str	r5, [r4, #8]
 80042ec:	464e      	mov	r6, r9
 80042ee:	454e      	cmp	r6, r9
 80042f0:	d900      	bls.n	80042f4 <__ssputs_r+0x84>
 80042f2:	464e      	mov	r6, r9
 80042f4:	4632      	mov	r2, r6
 80042f6:	4641      	mov	r1, r8
 80042f8:	6820      	ldr	r0, [r4, #0]
 80042fa:	f000 fe1f 	bl	8004f3c <memmove>
 80042fe:	68a3      	ldr	r3, [r4, #8]
 8004300:	1b9b      	subs	r3, r3, r6
 8004302:	60a3      	str	r3, [r4, #8]
 8004304:	6823      	ldr	r3, [r4, #0]
 8004306:	441e      	add	r6, r3
 8004308:	6026      	str	r6, [r4, #0]
 800430a:	2000      	movs	r0, #0
 800430c:	e7dc      	b.n	80042c8 <__ssputs_r+0x58>
 800430e:	462a      	mov	r2, r5
 8004310:	f000 fe2d 	bl	8004f6e <_realloc_r>
 8004314:	4606      	mov	r6, r0
 8004316:	2800      	cmp	r0, #0
 8004318:	d1e2      	bne.n	80042e0 <__ssputs_r+0x70>
 800431a:	6921      	ldr	r1, [r4, #16]
 800431c:	4650      	mov	r0, sl
 800431e:	f7ff fdeb 	bl	8003ef8 <_free_r>
 8004322:	e7c8      	b.n	80042b6 <__ssputs_r+0x46>

08004324 <_svfiprintf_r>:
 8004324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004328:	461d      	mov	r5, r3
 800432a:	898b      	ldrh	r3, [r1, #12]
 800432c:	061f      	lsls	r7, r3, #24
 800432e:	b09d      	sub	sp, #116	; 0x74
 8004330:	4680      	mov	r8, r0
 8004332:	460c      	mov	r4, r1
 8004334:	4616      	mov	r6, r2
 8004336:	d50f      	bpl.n	8004358 <_svfiprintf_r+0x34>
 8004338:	690b      	ldr	r3, [r1, #16]
 800433a:	b96b      	cbnz	r3, 8004358 <_svfiprintf_r+0x34>
 800433c:	2140      	movs	r1, #64	; 0x40
 800433e:	f7ff fe29 	bl	8003f94 <_malloc_r>
 8004342:	6020      	str	r0, [r4, #0]
 8004344:	6120      	str	r0, [r4, #16]
 8004346:	b928      	cbnz	r0, 8004354 <_svfiprintf_r+0x30>
 8004348:	230c      	movs	r3, #12
 800434a:	f8c8 3000 	str.w	r3, [r8]
 800434e:	f04f 30ff 	mov.w	r0, #4294967295
 8004352:	e0c8      	b.n	80044e6 <_svfiprintf_r+0x1c2>
 8004354:	2340      	movs	r3, #64	; 0x40
 8004356:	6163      	str	r3, [r4, #20]
 8004358:	2300      	movs	r3, #0
 800435a:	9309      	str	r3, [sp, #36]	; 0x24
 800435c:	2320      	movs	r3, #32
 800435e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004362:	2330      	movs	r3, #48	; 0x30
 8004364:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004368:	9503      	str	r5, [sp, #12]
 800436a:	f04f 0b01 	mov.w	fp, #1
 800436e:	4637      	mov	r7, r6
 8004370:	463d      	mov	r5, r7
 8004372:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004376:	b10b      	cbz	r3, 800437c <_svfiprintf_r+0x58>
 8004378:	2b25      	cmp	r3, #37	; 0x25
 800437a:	d13e      	bne.n	80043fa <_svfiprintf_r+0xd6>
 800437c:	ebb7 0a06 	subs.w	sl, r7, r6
 8004380:	d00b      	beq.n	800439a <_svfiprintf_r+0x76>
 8004382:	4653      	mov	r3, sl
 8004384:	4632      	mov	r2, r6
 8004386:	4621      	mov	r1, r4
 8004388:	4640      	mov	r0, r8
 800438a:	f7ff ff71 	bl	8004270 <__ssputs_r>
 800438e:	3001      	adds	r0, #1
 8004390:	f000 80a4 	beq.w	80044dc <_svfiprintf_r+0x1b8>
 8004394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004396:	4453      	add	r3, sl
 8004398:	9309      	str	r3, [sp, #36]	; 0x24
 800439a:	783b      	ldrb	r3, [r7, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	f000 809d 	beq.w	80044dc <_svfiprintf_r+0x1b8>
 80043a2:	2300      	movs	r3, #0
 80043a4:	f04f 32ff 	mov.w	r2, #4294967295
 80043a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043ac:	9304      	str	r3, [sp, #16]
 80043ae:	9307      	str	r3, [sp, #28]
 80043b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80043b4:	931a      	str	r3, [sp, #104]	; 0x68
 80043b6:	462f      	mov	r7, r5
 80043b8:	2205      	movs	r2, #5
 80043ba:	f817 1b01 	ldrb.w	r1, [r7], #1
 80043be:	4850      	ldr	r0, [pc, #320]	; (8004500 <_svfiprintf_r+0x1dc>)
 80043c0:	f7fb ff26 	bl	8000210 <memchr>
 80043c4:	9b04      	ldr	r3, [sp, #16]
 80043c6:	b9d0      	cbnz	r0, 80043fe <_svfiprintf_r+0xda>
 80043c8:	06d9      	lsls	r1, r3, #27
 80043ca:	bf44      	itt	mi
 80043cc:	2220      	movmi	r2, #32
 80043ce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80043d2:	071a      	lsls	r2, r3, #28
 80043d4:	bf44      	itt	mi
 80043d6:	222b      	movmi	r2, #43	; 0x2b
 80043d8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80043dc:	782a      	ldrb	r2, [r5, #0]
 80043de:	2a2a      	cmp	r2, #42	; 0x2a
 80043e0:	d015      	beq.n	800440e <_svfiprintf_r+0xea>
 80043e2:	9a07      	ldr	r2, [sp, #28]
 80043e4:	462f      	mov	r7, r5
 80043e6:	2000      	movs	r0, #0
 80043e8:	250a      	movs	r5, #10
 80043ea:	4639      	mov	r1, r7
 80043ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043f0:	3b30      	subs	r3, #48	; 0x30
 80043f2:	2b09      	cmp	r3, #9
 80043f4:	d94d      	bls.n	8004492 <_svfiprintf_r+0x16e>
 80043f6:	b1b8      	cbz	r0, 8004428 <_svfiprintf_r+0x104>
 80043f8:	e00f      	b.n	800441a <_svfiprintf_r+0xf6>
 80043fa:	462f      	mov	r7, r5
 80043fc:	e7b8      	b.n	8004370 <_svfiprintf_r+0x4c>
 80043fe:	4a40      	ldr	r2, [pc, #256]	; (8004500 <_svfiprintf_r+0x1dc>)
 8004400:	1a80      	subs	r0, r0, r2
 8004402:	fa0b f000 	lsl.w	r0, fp, r0
 8004406:	4318      	orrs	r0, r3
 8004408:	9004      	str	r0, [sp, #16]
 800440a:	463d      	mov	r5, r7
 800440c:	e7d3      	b.n	80043b6 <_svfiprintf_r+0x92>
 800440e:	9a03      	ldr	r2, [sp, #12]
 8004410:	1d11      	adds	r1, r2, #4
 8004412:	6812      	ldr	r2, [r2, #0]
 8004414:	9103      	str	r1, [sp, #12]
 8004416:	2a00      	cmp	r2, #0
 8004418:	db01      	blt.n	800441e <_svfiprintf_r+0xfa>
 800441a:	9207      	str	r2, [sp, #28]
 800441c:	e004      	b.n	8004428 <_svfiprintf_r+0x104>
 800441e:	4252      	negs	r2, r2
 8004420:	f043 0302 	orr.w	r3, r3, #2
 8004424:	9207      	str	r2, [sp, #28]
 8004426:	9304      	str	r3, [sp, #16]
 8004428:	783b      	ldrb	r3, [r7, #0]
 800442a:	2b2e      	cmp	r3, #46	; 0x2e
 800442c:	d10c      	bne.n	8004448 <_svfiprintf_r+0x124>
 800442e:	787b      	ldrb	r3, [r7, #1]
 8004430:	2b2a      	cmp	r3, #42	; 0x2a
 8004432:	d133      	bne.n	800449c <_svfiprintf_r+0x178>
 8004434:	9b03      	ldr	r3, [sp, #12]
 8004436:	1d1a      	adds	r2, r3, #4
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	9203      	str	r2, [sp, #12]
 800443c:	2b00      	cmp	r3, #0
 800443e:	bfb8      	it	lt
 8004440:	f04f 33ff 	movlt.w	r3, #4294967295
 8004444:	3702      	adds	r7, #2
 8004446:	9305      	str	r3, [sp, #20]
 8004448:	4d2e      	ldr	r5, [pc, #184]	; (8004504 <_svfiprintf_r+0x1e0>)
 800444a:	7839      	ldrb	r1, [r7, #0]
 800444c:	2203      	movs	r2, #3
 800444e:	4628      	mov	r0, r5
 8004450:	f7fb fede 	bl	8000210 <memchr>
 8004454:	b138      	cbz	r0, 8004466 <_svfiprintf_r+0x142>
 8004456:	2340      	movs	r3, #64	; 0x40
 8004458:	1b40      	subs	r0, r0, r5
 800445a:	fa03 f000 	lsl.w	r0, r3, r0
 800445e:	9b04      	ldr	r3, [sp, #16]
 8004460:	4303      	orrs	r3, r0
 8004462:	3701      	adds	r7, #1
 8004464:	9304      	str	r3, [sp, #16]
 8004466:	7839      	ldrb	r1, [r7, #0]
 8004468:	4827      	ldr	r0, [pc, #156]	; (8004508 <_svfiprintf_r+0x1e4>)
 800446a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800446e:	2206      	movs	r2, #6
 8004470:	1c7e      	adds	r6, r7, #1
 8004472:	f7fb fecd 	bl	8000210 <memchr>
 8004476:	2800      	cmp	r0, #0
 8004478:	d038      	beq.n	80044ec <_svfiprintf_r+0x1c8>
 800447a:	4b24      	ldr	r3, [pc, #144]	; (800450c <_svfiprintf_r+0x1e8>)
 800447c:	bb13      	cbnz	r3, 80044c4 <_svfiprintf_r+0x1a0>
 800447e:	9b03      	ldr	r3, [sp, #12]
 8004480:	3307      	adds	r3, #7
 8004482:	f023 0307 	bic.w	r3, r3, #7
 8004486:	3308      	adds	r3, #8
 8004488:	9303      	str	r3, [sp, #12]
 800448a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800448c:	444b      	add	r3, r9
 800448e:	9309      	str	r3, [sp, #36]	; 0x24
 8004490:	e76d      	b.n	800436e <_svfiprintf_r+0x4a>
 8004492:	fb05 3202 	mla	r2, r5, r2, r3
 8004496:	2001      	movs	r0, #1
 8004498:	460f      	mov	r7, r1
 800449a:	e7a6      	b.n	80043ea <_svfiprintf_r+0xc6>
 800449c:	2300      	movs	r3, #0
 800449e:	3701      	adds	r7, #1
 80044a0:	9305      	str	r3, [sp, #20]
 80044a2:	4619      	mov	r1, r3
 80044a4:	250a      	movs	r5, #10
 80044a6:	4638      	mov	r0, r7
 80044a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044ac:	3a30      	subs	r2, #48	; 0x30
 80044ae:	2a09      	cmp	r2, #9
 80044b0:	d903      	bls.n	80044ba <_svfiprintf_r+0x196>
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d0c8      	beq.n	8004448 <_svfiprintf_r+0x124>
 80044b6:	9105      	str	r1, [sp, #20]
 80044b8:	e7c6      	b.n	8004448 <_svfiprintf_r+0x124>
 80044ba:	fb05 2101 	mla	r1, r5, r1, r2
 80044be:	2301      	movs	r3, #1
 80044c0:	4607      	mov	r7, r0
 80044c2:	e7f0      	b.n	80044a6 <_svfiprintf_r+0x182>
 80044c4:	ab03      	add	r3, sp, #12
 80044c6:	9300      	str	r3, [sp, #0]
 80044c8:	4622      	mov	r2, r4
 80044ca:	4b11      	ldr	r3, [pc, #68]	; (8004510 <_svfiprintf_r+0x1ec>)
 80044cc:	a904      	add	r1, sp, #16
 80044ce:	4640      	mov	r0, r8
 80044d0:	f3af 8000 	nop.w
 80044d4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80044d8:	4681      	mov	r9, r0
 80044da:	d1d6      	bne.n	800448a <_svfiprintf_r+0x166>
 80044dc:	89a3      	ldrh	r3, [r4, #12]
 80044de:	065b      	lsls	r3, r3, #25
 80044e0:	f53f af35 	bmi.w	800434e <_svfiprintf_r+0x2a>
 80044e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80044e6:	b01d      	add	sp, #116	; 0x74
 80044e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044ec:	ab03      	add	r3, sp, #12
 80044ee:	9300      	str	r3, [sp, #0]
 80044f0:	4622      	mov	r2, r4
 80044f2:	4b07      	ldr	r3, [pc, #28]	; (8004510 <_svfiprintf_r+0x1ec>)
 80044f4:	a904      	add	r1, sp, #16
 80044f6:	4640      	mov	r0, r8
 80044f8:	f000 f9c2 	bl	8004880 <_printf_i>
 80044fc:	e7ea      	b.n	80044d4 <_svfiprintf_r+0x1b0>
 80044fe:	bf00      	nop
 8004500:	0800511c 	.word	0x0800511c
 8004504:	08005122 	.word	0x08005122
 8004508:	08005126 	.word	0x08005126
 800450c:	00000000 	.word	0x00000000
 8004510:	08004271 	.word	0x08004271

08004514 <__sfputc_r>:
 8004514:	6893      	ldr	r3, [r2, #8]
 8004516:	3b01      	subs	r3, #1
 8004518:	2b00      	cmp	r3, #0
 800451a:	b410      	push	{r4}
 800451c:	6093      	str	r3, [r2, #8]
 800451e:	da08      	bge.n	8004532 <__sfputc_r+0x1e>
 8004520:	6994      	ldr	r4, [r2, #24]
 8004522:	42a3      	cmp	r3, r4
 8004524:	db01      	blt.n	800452a <__sfputc_r+0x16>
 8004526:	290a      	cmp	r1, #10
 8004528:	d103      	bne.n	8004532 <__sfputc_r+0x1e>
 800452a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800452e:	f000 bafd 	b.w	8004b2c <__swbuf_r>
 8004532:	6813      	ldr	r3, [r2, #0]
 8004534:	1c58      	adds	r0, r3, #1
 8004536:	6010      	str	r0, [r2, #0]
 8004538:	7019      	strb	r1, [r3, #0]
 800453a:	4608      	mov	r0, r1
 800453c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004540:	4770      	bx	lr

08004542 <__sfputs_r>:
 8004542:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004544:	4606      	mov	r6, r0
 8004546:	460f      	mov	r7, r1
 8004548:	4614      	mov	r4, r2
 800454a:	18d5      	adds	r5, r2, r3
 800454c:	42ac      	cmp	r4, r5
 800454e:	d101      	bne.n	8004554 <__sfputs_r+0x12>
 8004550:	2000      	movs	r0, #0
 8004552:	e007      	b.n	8004564 <__sfputs_r+0x22>
 8004554:	463a      	mov	r2, r7
 8004556:	f814 1b01 	ldrb.w	r1, [r4], #1
 800455a:	4630      	mov	r0, r6
 800455c:	f7ff ffda 	bl	8004514 <__sfputc_r>
 8004560:	1c43      	adds	r3, r0, #1
 8004562:	d1f3      	bne.n	800454c <__sfputs_r+0xa>
 8004564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004568 <_vfiprintf_r>:
 8004568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800456c:	460c      	mov	r4, r1
 800456e:	b09d      	sub	sp, #116	; 0x74
 8004570:	4617      	mov	r7, r2
 8004572:	461d      	mov	r5, r3
 8004574:	4606      	mov	r6, r0
 8004576:	b118      	cbz	r0, 8004580 <_vfiprintf_r+0x18>
 8004578:	6983      	ldr	r3, [r0, #24]
 800457a:	b90b      	cbnz	r3, 8004580 <_vfiprintf_r+0x18>
 800457c:	f7ff fdec 	bl	8004158 <__sinit>
 8004580:	4b7c      	ldr	r3, [pc, #496]	; (8004774 <_vfiprintf_r+0x20c>)
 8004582:	429c      	cmp	r4, r3
 8004584:	d158      	bne.n	8004638 <_vfiprintf_r+0xd0>
 8004586:	6874      	ldr	r4, [r6, #4]
 8004588:	89a3      	ldrh	r3, [r4, #12]
 800458a:	0718      	lsls	r0, r3, #28
 800458c:	d55e      	bpl.n	800464c <_vfiprintf_r+0xe4>
 800458e:	6923      	ldr	r3, [r4, #16]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d05b      	beq.n	800464c <_vfiprintf_r+0xe4>
 8004594:	2300      	movs	r3, #0
 8004596:	9309      	str	r3, [sp, #36]	; 0x24
 8004598:	2320      	movs	r3, #32
 800459a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800459e:	2330      	movs	r3, #48	; 0x30
 80045a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80045a4:	9503      	str	r5, [sp, #12]
 80045a6:	f04f 0b01 	mov.w	fp, #1
 80045aa:	46b8      	mov	r8, r7
 80045ac:	4645      	mov	r5, r8
 80045ae:	f815 3b01 	ldrb.w	r3, [r5], #1
 80045b2:	b10b      	cbz	r3, 80045b8 <_vfiprintf_r+0x50>
 80045b4:	2b25      	cmp	r3, #37	; 0x25
 80045b6:	d154      	bne.n	8004662 <_vfiprintf_r+0xfa>
 80045b8:	ebb8 0a07 	subs.w	sl, r8, r7
 80045bc:	d00b      	beq.n	80045d6 <_vfiprintf_r+0x6e>
 80045be:	4653      	mov	r3, sl
 80045c0:	463a      	mov	r2, r7
 80045c2:	4621      	mov	r1, r4
 80045c4:	4630      	mov	r0, r6
 80045c6:	f7ff ffbc 	bl	8004542 <__sfputs_r>
 80045ca:	3001      	adds	r0, #1
 80045cc:	f000 80c2 	beq.w	8004754 <_vfiprintf_r+0x1ec>
 80045d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045d2:	4453      	add	r3, sl
 80045d4:	9309      	str	r3, [sp, #36]	; 0x24
 80045d6:	f898 3000 	ldrb.w	r3, [r8]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	f000 80ba 	beq.w	8004754 <_vfiprintf_r+0x1ec>
 80045e0:	2300      	movs	r3, #0
 80045e2:	f04f 32ff 	mov.w	r2, #4294967295
 80045e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045ea:	9304      	str	r3, [sp, #16]
 80045ec:	9307      	str	r3, [sp, #28]
 80045ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80045f2:	931a      	str	r3, [sp, #104]	; 0x68
 80045f4:	46a8      	mov	r8, r5
 80045f6:	2205      	movs	r2, #5
 80045f8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80045fc:	485e      	ldr	r0, [pc, #376]	; (8004778 <_vfiprintf_r+0x210>)
 80045fe:	f7fb fe07 	bl	8000210 <memchr>
 8004602:	9b04      	ldr	r3, [sp, #16]
 8004604:	bb78      	cbnz	r0, 8004666 <_vfiprintf_r+0xfe>
 8004606:	06d9      	lsls	r1, r3, #27
 8004608:	bf44      	itt	mi
 800460a:	2220      	movmi	r2, #32
 800460c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004610:	071a      	lsls	r2, r3, #28
 8004612:	bf44      	itt	mi
 8004614:	222b      	movmi	r2, #43	; 0x2b
 8004616:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800461a:	782a      	ldrb	r2, [r5, #0]
 800461c:	2a2a      	cmp	r2, #42	; 0x2a
 800461e:	d02a      	beq.n	8004676 <_vfiprintf_r+0x10e>
 8004620:	9a07      	ldr	r2, [sp, #28]
 8004622:	46a8      	mov	r8, r5
 8004624:	2000      	movs	r0, #0
 8004626:	250a      	movs	r5, #10
 8004628:	4641      	mov	r1, r8
 800462a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800462e:	3b30      	subs	r3, #48	; 0x30
 8004630:	2b09      	cmp	r3, #9
 8004632:	d969      	bls.n	8004708 <_vfiprintf_r+0x1a0>
 8004634:	b360      	cbz	r0, 8004690 <_vfiprintf_r+0x128>
 8004636:	e024      	b.n	8004682 <_vfiprintf_r+0x11a>
 8004638:	4b50      	ldr	r3, [pc, #320]	; (800477c <_vfiprintf_r+0x214>)
 800463a:	429c      	cmp	r4, r3
 800463c:	d101      	bne.n	8004642 <_vfiprintf_r+0xda>
 800463e:	68b4      	ldr	r4, [r6, #8]
 8004640:	e7a2      	b.n	8004588 <_vfiprintf_r+0x20>
 8004642:	4b4f      	ldr	r3, [pc, #316]	; (8004780 <_vfiprintf_r+0x218>)
 8004644:	429c      	cmp	r4, r3
 8004646:	bf08      	it	eq
 8004648:	68f4      	ldreq	r4, [r6, #12]
 800464a:	e79d      	b.n	8004588 <_vfiprintf_r+0x20>
 800464c:	4621      	mov	r1, r4
 800464e:	4630      	mov	r0, r6
 8004650:	f000 fad0 	bl	8004bf4 <__swsetup_r>
 8004654:	2800      	cmp	r0, #0
 8004656:	d09d      	beq.n	8004594 <_vfiprintf_r+0x2c>
 8004658:	f04f 30ff 	mov.w	r0, #4294967295
 800465c:	b01d      	add	sp, #116	; 0x74
 800465e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004662:	46a8      	mov	r8, r5
 8004664:	e7a2      	b.n	80045ac <_vfiprintf_r+0x44>
 8004666:	4a44      	ldr	r2, [pc, #272]	; (8004778 <_vfiprintf_r+0x210>)
 8004668:	1a80      	subs	r0, r0, r2
 800466a:	fa0b f000 	lsl.w	r0, fp, r0
 800466e:	4318      	orrs	r0, r3
 8004670:	9004      	str	r0, [sp, #16]
 8004672:	4645      	mov	r5, r8
 8004674:	e7be      	b.n	80045f4 <_vfiprintf_r+0x8c>
 8004676:	9a03      	ldr	r2, [sp, #12]
 8004678:	1d11      	adds	r1, r2, #4
 800467a:	6812      	ldr	r2, [r2, #0]
 800467c:	9103      	str	r1, [sp, #12]
 800467e:	2a00      	cmp	r2, #0
 8004680:	db01      	blt.n	8004686 <_vfiprintf_r+0x11e>
 8004682:	9207      	str	r2, [sp, #28]
 8004684:	e004      	b.n	8004690 <_vfiprintf_r+0x128>
 8004686:	4252      	negs	r2, r2
 8004688:	f043 0302 	orr.w	r3, r3, #2
 800468c:	9207      	str	r2, [sp, #28]
 800468e:	9304      	str	r3, [sp, #16]
 8004690:	f898 3000 	ldrb.w	r3, [r8]
 8004694:	2b2e      	cmp	r3, #46	; 0x2e
 8004696:	d10e      	bne.n	80046b6 <_vfiprintf_r+0x14e>
 8004698:	f898 3001 	ldrb.w	r3, [r8, #1]
 800469c:	2b2a      	cmp	r3, #42	; 0x2a
 800469e:	d138      	bne.n	8004712 <_vfiprintf_r+0x1aa>
 80046a0:	9b03      	ldr	r3, [sp, #12]
 80046a2:	1d1a      	adds	r2, r3, #4
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	9203      	str	r2, [sp, #12]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	bfb8      	it	lt
 80046ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80046b0:	f108 0802 	add.w	r8, r8, #2
 80046b4:	9305      	str	r3, [sp, #20]
 80046b6:	4d33      	ldr	r5, [pc, #204]	; (8004784 <_vfiprintf_r+0x21c>)
 80046b8:	f898 1000 	ldrb.w	r1, [r8]
 80046bc:	2203      	movs	r2, #3
 80046be:	4628      	mov	r0, r5
 80046c0:	f7fb fda6 	bl	8000210 <memchr>
 80046c4:	b140      	cbz	r0, 80046d8 <_vfiprintf_r+0x170>
 80046c6:	2340      	movs	r3, #64	; 0x40
 80046c8:	1b40      	subs	r0, r0, r5
 80046ca:	fa03 f000 	lsl.w	r0, r3, r0
 80046ce:	9b04      	ldr	r3, [sp, #16]
 80046d0:	4303      	orrs	r3, r0
 80046d2:	f108 0801 	add.w	r8, r8, #1
 80046d6:	9304      	str	r3, [sp, #16]
 80046d8:	f898 1000 	ldrb.w	r1, [r8]
 80046dc:	482a      	ldr	r0, [pc, #168]	; (8004788 <_vfiprintf_r+0x220>)
 80046de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80046e2:	2206      	movs	r2, #6
 80046e4:	f108 0701 	add.w	r7, r8, #1
 80046e8:	f7fb fd92 	bl	8000210 <memchr>
 80046ec:	2800      	cmp	r0, #0
 80046ee:	d037      	beq.n	8004760 <_vfiprintf_r+0x1f8>
 80046f0:	4b26      	ldr	r3, [pc, #152]	; (800478c <_vfiprintf_r+0x224>)
 80046f2:	bb1b      	cbnz	r3, 800473c <_vfiprintf_r+0x1d4>
 80046f4:	9b03      	ldr	r3, [sp, #12]
 80046f6:	3307      	adds	r3, #7
 80046f8:	f023 0307 	bic.w	r3, r3, #7
 80046fc:	3308      	adds	r3, #8
 80046fe:	9303      	str	r3, [sp, #12]
 8004700:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004702:	444b      	add	r3, r9
 8004704:	9309      	str	r3, [sp, #36]	; 0x24
 8004706:	e750      	b.n	80045aa <_vfiprintf_r+0x42>
 8004708:	fb05 3202 	mla	r2, r5, r2, r3
 800470c:	2001      	movs	r0, #1
 800470e:	4688      	mov	r8, r1
 8004710:	e78a      	b.n	8004628 <_vfiprintf_r+0xc0>
 8004712:	2300      	movs	r3, #0
 8004714:	f108 0801 	add.w	r8, r8, #1
 8004718:	9305      	str	r3, [sp, #20]
 800471a:	4619      	mov	r1, r3
 800471c:	250a      	movs	r5, #10
 800471e:	4640      	mov	r0, r8
 8004720:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004724:	3a30      	subs	r2, #48	; 0x30
 8004726:	2a09      	cmp	r2, #9
 8004728:	d903      	bls.n	8004732 <_vfiprintf_r+0x1ca>
 800472a:	2b00      	cmp	r3, #0
 800472c:	d0c3      	beq.n	80046b6 <_vfiprintf_r+0x14e>
 800472e:	9105      	str	r1, [sp, #20]
 8004730:	e7c1      	b.n	80046b6 <_vfiprintf_r+0x14e>
 8004732:	fb05 2101 	mla	r1, r5, r1, r2
 8004736:	2301      	movs	r3, #1
 8004738:	4680      	mov	r8, r0
 800473a:	e7f0      	b.n	800471e <_vfiprintf_r+0x1b6>
 800473c:	ab03      	add	r3, sp, #12
 800473e:	9300      	str	r3, [sp, #0]
 8004740:	4622      	mov	r2, r4
 8004742:	4b13      	ldr	r3, [pc, #76]	; (8004790 <_vfiprintf_r+0x228>)
 8004744:	a904      	add	r1, sp, #16
 8004746:	4630      	mov	r0, r6
 8004748:	f3af 8000 	nop.w
 800474c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004750:	4681      	mov	r9, r0
 8004752:	d1d5      	bne.n	8004700 <_vfiprintf_r+0x198>
 8004754:	89a3      	ldrh	r3, [r4, #12]
 8004756:	065b      	lsls	r3, r3, #25
 8004758:	f53f af7e 	bmi.w	8004658 <_vfiprintf_r+0xf0>
 800475c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800475e:	e77d      	b.n	800465c <_vfiprintf_r+0xf4>
 8004760:	ab03      	add	r3, sp, #12
 8004762:	9300      	str	r3, [sp, #0]
 8004764:	4622      	mov	r2, r4
 8004766:	4b0a      	ldr	r3, [pc, #40]	; (8004790 <_vfiprintf_r+0x228>)
 8004768:	a904      	add	r1, sp, #16
 800476a:	4630      	mov	r0, r6
 800476c:	f000 f888 	bl	8004880 <_printf_i>
 8004770:	e7ec      	b.n	800474c <_vfiprintf_r+0x1e4>
 8004772:	bf00      	nop
 8004774:	080050dc 	.word	0x080050dc
 8004778:	0800511c 	.word	0x0800511c
 800477c:	080050fc 	.word	0x080050fc
 8004780:	080050bc 	.word	0x080050bc
 8004784:	08005122 	.word	0x08005122
 8004788:	08005126 	.word	0x08005126
 800478c:	00000000 	.word	0x00000000
 8004790:	08004543 	.word	0x08004543

08004794 <_printf_common>:
 8004794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004798:	4691      	mov	r9, r2
 800479a:	461f      	mov	r7, r3
 800479c:	688a      	ldr	r2, [r1, #8]
 800479e:	690b      	ldr	r3, [r1, #16]
 80047a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047a4:	4293      	cmp	r3, r2
 80047a6:	bfb8      	it	lt
 80047a8:	4613      	movlt	r3, r2
 80047aa:	f8c9 3000 	str.w	r3, [r9]
 80047ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047b2:	4606      	mov	r6, r0
 80047b4:	460c      	mov	r4, r1
 80047b6:	b112      	cbz	r2, 80047be <_printf_common+0x2a>
 80047b8:	3301      	adds	r3, #1
 80047ba:	f8c9 3000 	str.w	r3, [r9]
 80047be:	6823      	ldr	r3, [r4, #0]
 80047c0:	0699      	lsls	r1, r3, #26
 80047c2:	bf42      	ittt	mi
 80047c4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80047c8:	3302      	addmi	r3, #2
 80047ca:	f8c9 3000 	strmi.w	r3, [r9]
 80047ce:	6825      	ldr	r5, [r4, #0]
 80047d0:	f015 0506 	ands.w	r5, r5, #6
 80047d4:	d107      	bne.n	80047e6 <_printf_common+0x52>
 80047d6:	f104 0a19 	add.w	sl, r4, #25
 80047da:	68e3      	ldr	r3, [r4, #12]
 80047dc:	f8d9 2000 	ldr.w	r2, [r9]
 80047e0:	1a9b      	subs	r3, r3, r2
 80047e2:	42ab      	cmp	r3, r5
 80047e4:	dc28      	bgt.n	8004838 <_printf_common+0xa4>
 80047e6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80047ea:	6822      	ldr	r2, [r4, #0]
 80047ec:	3300      	adds	r3, #0
 80047ee:	bf18      	it	ne
 80047f0:	2301      	movne	r3, #1
 80047f2:	0692      	lsls	r2, r2, #26
 80047f4:	d42d      	bmi.n	8004852 <_printf_common+0xbe>
 80047f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047fa:	4639      	mov	r1, r7
 80047fc:	4630      	mov	r0, r6
 80047fe:	47c0      	blx	r8
 8004800:	3001      	adds	r0, #1
 8004802:	d020      	beq.n	8004846 <_printf_common+0xb2>
 8004804:	6823      	ldr	r3, [r4, #0]
 8004806:	68e5      	ldr	r5, [r4, #12]
 8004808:	f8d9 2000 	ldr.w	r2, [r9]
 800480c:	f003 0306 	and.w	r3, r3, #6
 8004810:	2b04      	cmp	r3, #4
 8004812:	bf08      	it	eq
 8004814:	1aad      	subeq	r5, r5, r2
 8004816:	68a3      	ldr	r3, [r4, #8]
 8004818:	6922      	ldr	r2, [r4, #16]
 800481a:	bf0c      	ite	eq
 800481c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004820:	2500      	movne	r5, #0
 8004822:	4293      	cmp	r3, r2
 8004824:	bfc4      	itt	gt
 8004826:	1a9b      	subgt	r3, r3, r2
 8004828:	18ed      	addgt	r5, r5, r3
 800482a:	f04f 0900 	mov.w	r9, #0
 800482e:	341a      	adds	r4, #26
 8004830:	454d      	cmp	r5, r9
 8004832:	d11a      	bne.n	800486a <_printf_common+0xd6>
 8004834:	2000      	movs	r0, #0
 8004836:	e008      	b.n	800484a <_printf_common+0xb6>
 8004838:	2301      	movs	r3, #1
 800483a:	4652      	mov	r2, sl
 800483c:	4639      	mov	r1, r7
 800483e:	4630      	mov	r0, r6
 8004840:	47c0      	blx	r8
 8004842:	3001      	adds	r0, #1
 8004844:	d103      	bne.n	800484e <_printf_common+0xba>
 8004846:	f04f 30ff 	mov.w	r0, #4294967295
 800484a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800484e:	3501      	adds	r5, #1
 8004850:	e7c3      	b.n	80047da <_printf_common+0x46>
 8004852:	18e1      	adds	r1, r4, r3
 8004854:	1c5a      	adds	r2, r3, #1
 8004856:	2030      	movs	r0, #48	; 0x30
 8004858:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800485c:	4422      	add	r2, r4
 800485e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004862:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004866:	3302      	adds	r3, #2
 8004868:	e7c5      	b.n	80047f6 <_printf_common+0x62>
 800486a:	2301      	movs	r3, #1
 800486c:	4622      	mov	r2, r4
 800486e:	4639      	mov	r1, r7
 8004870:	4630      	mov	r0, r6
 8004872:	47c0      	blx	r8
 8004874:	3001      	adds	r0, #1
 8004876:	d0e6      	beq.n	8004846 <_printf_common+0xb2>
 8004878:	f109 0901 	add.w	r9, r9, #1
 800487c:	e7d8      	b.n	8004830 <_printf_common+0x9c>
	...

08004880 <_printf_i>:
 8004880:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004884:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004888:	460c      	mov	r4, r1
 800488a:	7e09      	ldrb	r1, [r1, #24]
 800488c:	b085      	sub	sp, #20
 800488e:	296e      	cmp	r1, #110	; 0x6e
 8004890:	4617      	mov	r7, r2
 8004892:	4606      	mov	r6, r0
 8004894:	4698      	mov	r8, r3
 8004896:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004898:	f000 80b3 	beq.w	8004a02 <_printf_i+0x182>
 800489c:	d822      	bhi.n	80048e4 <_printf_i+0x64>
 800489e:	2963      	cmp	r1, #99	; 0x63
 80048a0:	d036      	beq.n	8004910 <_printf_i+0x90>
 80048a2:	d80a      	bhi.n	80048ba <_printf_i+0x3a>
 80048a4:	2900      	cmp	r1, #0
 80048a6:	f000 80b9 	beq.w	8004a1c <_printf_i+0x19c>
 80048aa:	2958      	cmp	r1, #88	; 0x58
 80048ac:	f000 8083 	beq.w	80049b6 <_printf_i+0x136>
 80048b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048b4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80048b8:	e032      	b.n	8004920 <_printf_i+0xa0>
 80048ba:	2964      	cmp	r1, #100	; 0x64
 80048bc:	d001      	beq.n	80048c2 <_printf_i+0x42>
 80048be:	2969      	cmp	r1, #105	; 0x69
 80048c0:	d1f6      	bne.n	80048b0 <_printf_i+0x30>
 80048c2:	6820      	ldr	r0, [r4, #0]
 80048c4:	6813      	ldr	r3, [r2, #0]
 80048c6:	0605      	lsls	r5, r0, #24
 80048c8:	f103 0104 	add.w	r1, r3, #4
 80048cc:	d52a      	bpl.n	8004924 <_printf_i+0xa4>
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6011      	str	r1, [r2, #0]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	da03      	bge.n	80048de <_printf_i+0x5e>
 80048d6:	222d      	movs	r2, #45	; 0x2d
 80048d8:	425b      	negs	r3, r3
 80048da:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80048de:	486f      	ldr	r0, [pc, #444]	; (8004a9c <_printf_i+0x21c>)
 80048e0:	220a      	movs	r2, #10
 80048e2:	e039      	b.n	8004958 <_printf_i+0xd8>
 80048e4:	2973      	cmp	r1, #115	; 0x73
 80048e6:	f000 809d 	beq.w	8004a24 <_printf_i+0x1a4>
 80048ea:	d808      	bhi.n	80048fe <_printf_i+0x7e>
 80048ec:	296f      	cmp	r1, #111	; 0x6f
 80048ee:	d020      	beq.n	8004932 <_printf_i+0xb2>
 80048f0:	2970      	cmp	r1, #112	; 0x70
 80048f2:	d1dd      	bne.n	80048b0 <_printf_i+0x30>
 80048f4:	6823      	ldr	r3, [r4, #0]
 80048f6:	f043 0320 	orr.w	r3, r3, #32
 80048fa:	6023      	str	r3, [r4, #0]
 80048fc:	e003      	b.n	8004906 <_printf_i+0x86>
 80048fe:	2975      	cmp	r1, #117	; 0x75
 8004900:	d017      	beq.n	8004932 <_printf_i+0xb2>
 8004902:	2978      	cmp	r1, #120	; 0x78
 8004904:	d1d4      	bne.n	80048b0 <_printf_i+0x30>
 8004906:	2378      	movs	r3, #120	; 0x78
 8004908:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800490c:	4864      	ldr	r0, [pc, #400]	; (8004aa0 <_printf_i+0x220>)
 800490e:	e055      	b.n	80049bc <_printf_i+0x13c>
 8004910:	6813      	ldr	r3, [r2, #0]
 8004912:	1d19      	adds	r1, r3, #4
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	6011      	str	r1, [r2, #0]
 8004918:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800491c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004920:	2301      	movs	r3, #1
 8004922:	e08c      	b.n	8004a3e <_printf_i+0x1be>
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	6011      	str	r1, [r2, #0]
 8004928:	f010 0f40 	tst.w	r0, #64	; 0x40
 800492c:	bf18      	it	ne
 800492e:	b21b      	sxthne	r3, r3
 8004930:	e7cf      	b.n	80048d2 <_printf_i+0x52>
 8004932:	6813      	ldr	r3, [r2, #0]
 8004934:	6825      	ldr	r5, [r4, #0]
 8004936:	1d18      	adds	r0, r3, #4
 8004938:	6010      	str	r0, [r2, #0]
 800493a:	0628      	lsls	r0, r5, #24
 800493c:	d501      	bpl.n	8004942 <_printf_i+0xc2>
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	e002      	b.n	8004948 <_printf_i+0xc8>
 8004942:	0668      	lsls	r0, r5, #25
 8004944:	d5fb      	bpl.n	800493e <_printf_i+0xbe>
 8004946:	881b      	ldrh	r3, [r3, #0]
 8004948:	4854      	ldr	r0, [pc, #336]	; (8004a9c <_printf_i+0x21c>)
 800494a:	296f      	cmp	r1, #111	; 0x6f
 800494c:	bf14      	ite	ne
 800494e:	220a      	movne	r2, #10
 8004950:	2208      	moveq	r2, #8
 8004952:	2100      	movs	r1, #0
 8004954:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004958:	6865      	ldr	r5, [r4, #4]
 800495a:	60a5      	str	r5, [r4, #8]
 800495c:	2d00      	cmp	r5, #0
 800495e:	f2c0 8095 	blt.w	8004a8c <_printf_i+0x20c>
 8004962:	6821      	ldr	r1, [r4, #0]
 8004964:	f021 0104 	bic.w	r1, r1, #4
 8004968:	6021      	str	r1, [r4, #0]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d13d      	bne.n	80049ea <_printf_i+0x16a>
 800496e:	2d00      	cmp	r5, #0
 8004970:	f040 808e 	bne.w	8004a90 <_printf_i+0x210>
 8004974:	4665      	mov	r5, ip
 8004976:	2a08      	cmp	r2, #8
 8004978:	d10b      	bne.n	8004992 <_printf_i+0x112>
 800497a:	6823      	ldr	r3, [r4, #0]
 800497c:	07db      	lsls	r3, r3, #31
 800497e:	d508      	bpl.n	8004992 <_printf_i+0x112>
 8004980:	6923      	ldr	r3, [r4, #16]
 8004982:	6862      	ldr	r2, [r4, #4]
 8004984:	429a      	cmp	r2, r3
 8004986:	bfde      	ittt	le
 8004988:	2330      	movle	r3, #48	; 0x30
 800498a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800498e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004992:	ebac 0305 	sub.w	r3, ip, r5
 8004996:	6123      	str	r3, [r4, #16]
 8004998:	f8cd 8000 	str.w	r8, [sp]
 800499c:	463b      	mov	r3, r7
 800499e:	aa03      	add	r2, sp, #12
 80049a0:	4621      	mov	r1, r4
 80049a2:	4630      	mov	r0, r6
 80049a4:	f7ff fef6 	bl	8004794 <_printf_common>
 80049a8:	3001      	adds	r0, #1
 80049aa:	d14d      	bne.n	8004a48 <_printf_i+0x1c8>
 80049ac:	f04f 30ff 	mov.w	r0, #4294967295
 80049b0:	b005      	add	sp, #20
 80049b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80049b6:	4839      	ldr	r0, [pc, #228]	; (8004a9c <_printf_i+0x21c>)
 80049b8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80049bc:	6813      	ldr	r3, [r2, #0]
 80049be:	6821      	ldr	r1, [r4, #0]
 80049c0:	1d1d      	adds	r5, r3, #4
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	6015      	str	r5, [r2, #0]
 80049c6:	060a      	lsls	r2, r1, #24
 80049c8:	d50b      	bpl.n	80049e2 <_printf_i+0x162>
 80049ca:	07ca      	lsls	r2, r1, #31
 80049cc:	bf44      	itt	mi
 80049ce:	f041 0120 	orrmi.w	r1, r1, #32
 80049d2:	6021      	strmi	r1, [r4, #0]
 80049d4:	b91b      	cbnz	r3, 80049de <_printf_i+0x15e>
 80049d6:	6822      	ldr	r2, [r4, #0]
 80049d8:	f022 0220 	bic.w	r2, r2, #32
 80049dc:	6022      	str	r2, [r4, #0]
 80049de:	2210      	movs	r2, #16
 80049e0:	e7b7      	b.n	8004952 <_printf_i+0xd2>
 80049e2:	064d      	lsls	r5, r1, #25
 80049e4:	bf48      	it	mi
 80049e6:	b29b      	uxthmi	r3, r3
 80049e8:	e7ef      	b.n	80049ca <_printf_i+0x14a>
 80049ea:	4665      	mov	r5, ip
 80049ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80049f0:	fb02 3311 	mls	r3, r2, r1, r3
 80049f4:	5cc3      	ldrb	r3, [r0, r3]
 80049f6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80049fa:	460b      	mov	r3, r1
 80049fc:	2900      	cmp	r1, #0
 80049fe:	d1f5      	bne.n	80049ec <_printf_i+0x16c>
 8004a00:	e7b9      	b.n	8004976 <_printf_i+0xf6>
 8004a02:	6813      	ldr	r3, [r2, #0]
 8004a04:	6825      	ldr	r5, [r4, #0]
 8004a06:	6961      	ldr	r1, [r4, #20]
 8004a08:	1d18      	adds	r0, r3, #4
 8004a0a:	6010      	str	r0, [r2, #0]
 8004a0c:	0628      	lsls	r0, r5, #24
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	d501      	bpl.n	8004a16 <_printf_i+0x196>
 8004a12:	6019      	str	r1, [r3, #0]
 8004a14:	e002      	b.n	8004a1c <_printf_i+0x19c>
 8004a16:	066a      	lsls	r2, r5, #25
 8004a18:	d5fb      	bpl.n	8004a12 <_printf_i+0x192>
 8004a1a:	8019      	strh	r1, [r3, #0]
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	6123      	str	r3, [r4, #16]
 8004a20:	4665      	mov	r5, ip
 8004a22:	e7b9      	b.n	8004998 <_printf_i+0x118>
 8004a24:	6813      	ldr	r3, [r2, #0]
 8004a26:	1d19      	adds	r1, r3, #4
 8004a28:	6011      	str	r1, [r2, #0]
 8004a2a:	681d      	ldr	r5, [r3, #0]
 8004a2c:	6862      	ldr	r2, [r4, #4]
 8004a2e:	2100      	movs	r1, #0
 8004a30:	4628      	mov	r0, r5
 8004a32:	f7fb fbed 	bl	8000210 <memchr>
 8004a36:	b108      	cbz	r0, 8004a3c <_printf_i+0x1bc>
 8004a38:	1b40      	subs	r0, r0, r5
 8004a3a:	6060      	str	r0, [r4, #4]
 8004a3c:	6863      	ldr	r3, [r4, #4]
 8004a3e:	6123      	str	r3, [r4, #16]
 8004a40:	2300      	movs	r3, #0
 8004a42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a46:	e7a7      	b.n	8004998 <_printf_i+0x118>
 8004a48:	6923      	ldr	r3, [r4, #16]
 8004a4a:	462a      	mov	r2, r5
 8004a4c:	4639      	mov	r1, r7
 8004a4e:	4630      	mov	r0, r6
 8004a50:	47c0      	blx	r8
 8004a52:	3001      	adds	r0, #1
 8004a54:	d0aa      	beq.n	80049ac <_printf_i+0x12c>
 8004a56:	6823      	ldr	r3, [r4, #0]
 8004a58:	079b      	lsls	r3, r3, #30
 8004a5a:	d413      	bmi.n	8004a84 <_printf_i+0x204>
 8004a5c:	68e0      	ldr	r0, [r4, #12]
 8004a5e:	9b03      	ldr	r3, [sp, #12]
 8004a60:	4298      	cmp	r0, r3
 8004a62:	bfb8      	it	lt
 8004a64:	4618      	movlt	r0, r3
 8004a66:	e7a3      	b.n	80049b0 <_printf_i+0x130>
 8004a68:	2301      	movs	r3, #1
 8004a6a:	464a      	mov	r2, r9
 8004a6c:	4639      	mov	r1, r7
 8004a6e:	4630      	mov	r0, r6
 8004a70:	47c0      	blx	r8
 8004a72:	3001      	adds	r0, #1
 8004a74:	d09a      	beq.n	80049ac <_printf_i+0x12c>
 8004a76:	3501      	adds	r5, #1
 8004a78:	68e3      	ldr	r3, [r4, #12]
 8004a7a:	9a03      	ldr	r2, [sp, #12]
 8004a7c:	1a9b      	subs	r3, r3, r2
 8004a7e:	42ab      	cmp	r3, r5
 8004a80:	dcf2      	bgt.n	8004a68 <_printf_i+0x1e8>
 8004a82:	e7eb      	b.n	8004a5c <_printf_i+0x1dc>
 8004a84:	2500      	movs	r5, #0
 8004a86:	f104 0919 	add.w	r9, r4, #25
 8004a8a:	e7f5      	b.n	8004a78 <_printf_i+0x1f8>
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1ac      	bne.n	80049ea <_printf_i+0x16a>
 8004a90:	7803      	ldrb	r3, [r0, #0]
 8004a92:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a96:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a9a:	e76c      	b.n	8004976 <_printf_i+0xf6>
 8004a9c:	0800512d 	.word	0x0800512d
 8004aa0:	0800513e 	.word	0x0800513e

08004aa4 <__sread>:
 8004aa4:	b510      	push	{r4, lr}
 8004aa6:	460c      	mov	r4, r1
 8004aa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004aac:	f000 fa86 	bl	8004fbc <_read_r>
 8004ab0:	2800      	cmp	r0, #0
 8004ab2:	bfab      	itete	ge
 8004ab4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004ab6:	89a3      	ldrhlt	r3, [r4, #12]
 8004ab8:	181b      	addge	r3, r3, r0
 8004aba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004abe:	bfac      	ite	ge
 8004ac0:	6563      	strge	r3, [r4, #84]	; 0x54
 8004ac2:	81a3      	strhlt	r3, [r4, #12]
 8004ac4:	bd10      	pop	{r4, pc}

08004ac6 <__swrite>:
 8004ac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004aca:	461f      	mov	r7, r3
 8004acc:	898b      	ldrh	r3, [r1, #12]
 8004ace:	05db      	lsls	r3, r3, #23
 8004ad0:	4605      	mov	r5, r0
 8004ad2:	460c      	mov	r4, r1
 8004ad4:	4616      	mov	r6, r2
 8004ad6:	d505      	bpl.n	8004ae4 <__swrite+0x1e>
 8004ad8:	2302      	movs	r3, #2
 8004ada:	2200      	movs	r2, #0
 8004adc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ae0:	f000 f9b6 	bl	8004e50 <_lseek_r>
 8004ae4:	89a3      	ldrh	r3, [r4, #12]
 8004ae6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004aea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004aee:	81a3      	strh	r3, [r4, #12]
 8004af0:	4632      	mov	r2, r6
 8004af2:	463b      	mov	r3, r7
 8004af4:	4628      	mov	r0, r5
 8004af6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004afa:	f000 b869 	b.w	8004bd0 <_write_r>

08004afe <__sseek>:
 8004afe:	b510      	push	{r4, lr}
 8004b00:	460c      	mov	r4, r1
 8004b02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b06:	f000 f9a3 	bl	8004e50 <_lseek_r>
 8004b0a:	1c43      	adds	r3, r0, #1
 8004b0c:	89a3      	ldrh	r3, [r4, #12]
 8004b0e:	bf15      	itete	ne
 8004b10:	6560      	strne	r0, [r4, #84]	; 0x54
 8004b12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004b16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004b1a:	81a3      	strheq	r3, [r4, #12]
 8004b1c:	bf18      	it	ne
 8004b1e:	81a3      	strhne	r3, [r4, #12]
 8004b20:	bd10      	pop	{r4, pc}

08004b22 <__sclose>:
 8004b22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b26:	f000 b8d3 	b.w	8004cd0 <_close_r>
	...

08004b2c <__swbuf_r>:
 8004b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b2e:	460e      	mov	r6, r1
 8004b30:	4614      	mov	r4, r2
 8004b32:	4605      	mov	r5, r0
 8004b34:	b118      	cbz	r0, 8004b3e <__swbuf_r+0x12>
 8004b36:	6983      	ldr	r3, [r0, #24]
 8004b38:	b90b      	cbnz	r3, 8004b3e <__swbuf_r+0x12>
 8004b3a:	f7ff fb0d 	bl	8004158 <__sinit>
 8004b3e:	4b21      	ldr	r3, [pc, #132]	; (8004bc4 <__swbuf_r+0x98>)
 8004b40:	429c      	cmp	r4, r3
 8004b42:	d12a      	bne.n	8004b9a <__swbuf_r+0x6e>
 8004b44:	686c      	ldr	r4, [r5, #4]
 8004b46:	69a3      	ldr	r3, [r4, #24]
 8004b48:	60a3      	str	r3, [r4, #8]
 8004b4a:	89a3      	ldrh	r3, [r4, #12]
 8004b4c:	071a      	lsls	r2, r3, #28
 8004b4e:	d52e      	bpl.n	8004bae <__swbuf_r+0x82>
 8004b50:	6923      	ldr	r3, [r4, #16]
 8004b52:	b363      	cbz	r3, 8004bae <__swbuf_r+0x82>
 8004b54:	6923      	ldr	r3, [r4, #16]
 8004b56:	6820      	ldr	r0, [r4, #0]
 8004b58:	1ac0      	subs	r0, r0, r3
 8004b5a:	6963      	ldr	r3, [r4, #20]
 8004b5c:	b2f6      	uxtb	r6, r6
 8004b5e:	4283      	cmp	r3, r0
 8004b60:	4637      	mov	r7, r6
 8004b62:	dc04      	bgt.n	8004b6e <__swbuf_r+0x42>
 8004b64:	4621      	mov	r1, r4
 8004b66:	4628      	mov	r0, r5
 8004b68:	f000 f948 	bl	8004dfc <_fflush_r>
 8004b6c:	bb28      	cbnz	r0, 8004bba <__swbuf_r+0x8e>
 8004b6e:	68a3      	ldr	r3, [r4, #8]
 8004b70:	3b01      	subs	r3, #1
 8004b72:	60a3      	str	r3, [r4, #8]
 8004b74:	6823      	ldr	r3, [r4, #0]
 8004b76:	1c5a      	adds	r2, r3, #1
 8004b78:	6022      	str	r2, [r4, #0]
 8004b7a:	701e      	strb	r6, [r3, #0]
 8004b7c:	6963      	ldr	r3, [r4, #20]
 8004b7e:	3001      	adds	r0, #1
 8004b80:	4283      	cmp	r3, r0
 8004b82:	d004      	beq.n	8004b8e <__swbuf_r+0x62>
 8004b84:	89a3      	ldrh	r3, [r4, #12]
 8004b86:	07db      	lsls	r3, r3, #31
 8004b88:	d519      	bpl.n	8004bbe <__swbuf_r+0x92>
 8004b8a:	2e0a      	cmp	r6, #10
 8004b8c:	d117      	bne.n	8004bbe <__swbuf_r+0x92>
 8004b8e:	4621      	mov	r1, r4
 8004b90:	4628      	mov	r0, r5
 8004b92:	f000 f933 	bl	8004dfc <_fflush_r>
 8004b96:	b190      	cbz	r0, 8004bbe <__swbuf_r+0x92>
 8004b98:	e00f      	b.n	8004bba <__swbuf_r+0x8e>
 8004b9a:	4b0b      	ldr	r3, [pc, #44]	; (8004bc8 <__swbuf_r+0x9c>)
 8004b9c:	429c      	cmp	r4, r3
 8004b9e:	d101      	bne.n	8004ba4 <__swbuf_r+0x78>
 8004ba0:	68ac      	ldr	r4, [r5, #8]
 8004ba2:	e7d0      	b.n	8004b46 <__swbuf_r+0x1a>
 8004ba4:	4b09      	ldr	r3, [pc, #36]	; (8004bcc <__swbuf_r+0xa0>)
 8004ba6:	429c      	cmp	r4, r3
 8004ba8:	bf08      	it	eq
 8004baa:	68ec      	ldreq	r4, [r5, #12]
 8004bac:	e7cb      	b.n	8004b46 <__swbuf_r+0x1a>
 8004bae:	4621      	mov	r1, r4
 8004bb0:	4628      	mov	r0, r5
 8004bb2:	f000 f81f 	bl	8004bf4 <__swsetup_r>
 8004bb6:	2800      	cmp	r0, #0
 8004bb8:	d0cc      	beq.n	8004b54 <__swbuf_r+0x28>
 8004bba:	f04f 37ff 	mov.w	r7, #4294967295
 8004bbe:	4638      	mov	r0, r7
 8004bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	080050dc 	.word	0x080050dc
 8004bc8:	080050fc 	.word	0x080050fc
 8004bcc:	080050bc 	.word	0x080050bc

08004bd0 <_write_r>:
 8004bd0:	b538      	push	{r3, r4, r5, lr}
 8004bd2:	4c07      	ldr	r4, [pc, #28]	; (8004bf0 <_write_r+0x20>)
 8004bd4:	4605      	mov	r5, r0
 8004bd6:	4608      	mov	r0, r1
 8004bd8:	4611      	mov	r1, r2
 8004bda:	2200      	movs	r2, #0
 8004bdc:	6022      	str	r2, [r4, #0]
 8004bde:	461a      	mov	r2, r3
 8004be0:	f7fe fc5a 	bl	8003498 <_write>
 8004be4:	1c43      	adds	r3, r0, #1
 8004be6:	d102      	bne.n	8004bee <_write_r+0x1e>
 8004be8:	6823      	ldr	r3, [r4, #0]
 8004bea:	b103      	cbz	r3, 8004bee <_write_r+0x1e>
 8004bec:	602b      	str	r3, [r5, #0]
 8004bee:	bd38      	pop	{r3, r4, r5, pc}
 8004bf0:	20004244 	.word	0x20004244

08004bf4 <__swsetup_r>:
 8004bf4:	4b32      	ldr	r3, [pc, #200]	; (8004cc0 <__swsetup_r+0xcc>)
 8004bf6:	b570      	push	{r4, r5, r6, lr}
 8004bf8:	681d      	ldr	r5, [r3, #0]
 8004bfa:	4606      	mov	r6, r0
 8004bfc:	460c      	mov	r4, r1
 8004bfe:	b125      	cbz	r5, 8004c0a <__swsetup_r+0x16>
 8004c00:	69ab      	ldr	r3, [r5, #24]
 8004c02:	b913      	cbnz	r3, 8004c0a <__swsetup_r+0x16>
 8004c04:	4628      	mov	r0, r5
 8004c06:	f7ff faa7 	bl	8004158 <__sinit>
 8004c0a:	4b2e      	ldr	r3, [pc, #184]	; (8004cc4 <__swsetup_r+0xd0>)
 8004c0c:	429c      	cmp	r4, r3
 8004c0e:	d10f      	bne.n	8004c30 <__swsetup_r+0x3c>
 8004c10:	686c      	ldr	r4, [r5, #4]
 8004c12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c16:	b29a      	uxth	r2, r3
 8004c18:	0715      	lsls	r5, r2, #28
 8004c1a:	d42c      	bmi.n	8004c76 <__swsetup_r+0x82>
 8004c1c:	06d0      	lsls	r0, r2, #27
 8004c1e:	d411      	bmi.n	8004c44 <__swsetup_r+0x50>
 8004c20:	2209      	movs	r2, #9
 8004c22:	6032      	str	r2, [r6, #0]
 8004c24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c28:	81a3      	strh	r3, [r4, #12]
 8004c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c2e:	e03e      	b.n	8004cae <__swsetup_r+0xba>
 8004c30:	4b25      	ldr	r3, [pc, #148]	; (8004cc8 <__swsetup_r+0xd4>)
 8004c32:	429c      	cmp	r4, r3
 8004c34:	d101      	bne.n	8004c3a <__swsetup_r+0x46>
 8004c36:	68ac      	ldr	r4, [r5, #8]
 8004c38:	e7eb      	b.n	8004c12 <__swsetup_r+0x1e>
 8004c3a:	4b24      	ldr	r3, [pc, #144]	; (8004ccc <__swsetup_r+0xd8>)
 8004c3c:	429c      	cmp	r4, r3
 8004c3e:	bf08      	it	eq
 8004c40:	68ec      	ldreq	r4, [r5, #12]
 8004c42:	e7e6      	b.n	8004c12 <__swsetup_r+0x1e>
 8004c44:	0751      	lsls	r1, r2, #29
 8004c46:	d512      	bpl.n	8004c6e <__swsetup_r+0x7a>
 8004c48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c4a:	b141      	cbz	r1, 8004c5e <__swsetup_r+0x6a>
 8004c4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c50:	4299      	cmp	r1, r3
 8004c52:	d002      	beq.n	8004c5a <__swsetup_r+0x66>
 8004c54:	4630      	mov	r0, r6
 8004c56:	f7ff f94f 	bl	8003ef8 <_free_r>
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	6363      	str	r3, [r4, #52]	; 0x34
 8004c5e:	89a3      	ldrh	r3, [r4, #12]
 8004c60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004c64:	81a3      	strh	r3, [r4, #12]
 8004c66:	2300      	movs	r3, #0
 8004c68:	6063      	str	r3, [r4, #4]
 8004c6a:	6923      	ldr	r3, [r4, #16]
 8004c6c:	6023      	str	r3, [r4, #0]
 8004c6e:	89a3      	ldrh	r3, [r4, #12]
 8004c70:	f043 0308 	orr.w	r3, r3, #8
 8004c74:	81a3      	strh	r3, [r4, #12]
 8004c76:	6923      	ldr	r3, [r4, #16]
 8004c78:	b94b      	cbnz	r3, 8004c8e <__swsetup_r+0x9a>
 8004c7a:	89a3      	ldrh	r3, [r4, #12]
 8004c7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004c80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c84:	d003      	beq.n	8004c8e <__swsetup_r+0x9a>
 8004c86:	4621      	mov	r1, r4
 8004c88:	4630      	mov	r0, r6
 8004c8a:	f000 f917 	bl	8004ebc <__smakebuf_r>
 8004c8e:	89a2      	ldrh	r2, [r4, #12]
 8004c90:	f012 0301 	ands.w	r3, r2, #1
 8004c94:	d00c      	beq.n	8004cb0 <__swsetup_r+0xbc>
 8004c96:	2300      	movs	r3, #0
 8004c98:	60a3      	str	r3, [r4, #8]
 8004c9a:	6963      	ldr	r3, [r4, #20]
 8004c9c:	425b      	negs	r3, r3
 8004c9e:	61a3      	str	r3, [r4, #24]
 8004ca0:	6923      	ldr	r3, [r4, #16]
 8004ca2:	b953      	cbnz	r3, 8004cba <__swsetup_r+0xc6>
 8004ca4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ca8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004cac:	d1ba      	bne.n	8004c24 <__swsetup_r+0x30>
 8004cae:	bd70      	pop	{r4, r5, r6, pc}
 8004cb0:	0792      	lsls	r2, r2, #30
 8004cb2:	bf58      	it	pl
 8004cb4:	6963      	ldrpl	r3, [r4, #20]
 8004cb6:	60a3      	str	r3, [r4, #8]
 8004cb8:	e7f2      	b.n	8004ca0 <__swsetup_r+0xac>
 8004cba:	2000      	movs	r0, #0
 8004cbc:	e7f7      	b.n	8004cae <__swsetup_r+0xba>
 8004cbe:	bf00      	nop
 8004cc0:	20000014 	.word	0x20000014
 8004cc4:	080050dc 	.word	0x080050dc
 8004cc8:	080050fc 	.word	0x080050fc
 8004ccc:	080050bc 	.word	0x080050bc

08004cd0 <_close_r>:
 8004cd0:	b538      	push	{r3, r4, r5, lr}
 8004cd2:	4c06      	ldr	r4, [pc, #24]	; (8004cec <_close_r+0x1c>)
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	4605      	mov	r5, r0
 8004cd8:	4608      	mov	r0, r1
 8004cda:	6023      	str	r3, [r4, #0]
 8004cdc:	f7fe fc04 	bl	80034e8 <_close>
 8004ce0:	1c43      	adds	r3, r0, #1
 8004ce2:	d102      	bne.n	8004cea <_close_r+0x1a>
 8004ce4:	6823      	ldr	r3, [r4, #0]
 8004ce6:	b103      	cbz	r3, 8004cea <_close_r+0x1a>
 8004ce8:	602b      	str	r3, [r5, #0]
 8004cea:	bd38      	pop	{r3, r4, r5, pc}
 8004cec:	20004244 	.word	0x20004244

08004cf0 <__sflush_r>:
 8004cf0:	898a      	ldrh	r2, [r1, #12]
 8004cf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cf6:	4605      	mov	r5, r0
 8004cf8:	0710      	lsls	r0, r2, #28
 8004cfa:	460c      	mov	r4, r1
 8004cfc:	d458      	bmi.n	8004db0 <__sflush_r+0xc0>
 8004cfe:	684b      	ldr	r3, [r1, #4]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	dc05      	bgt.n	8004d10 <__sflush_r+0x20>
 8004d04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	dc02      	bgt.n	8004d10 <__sflush_r+0x20>
 8004d0a:	2000      	movs	r0, #0
 8004d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d12:	2e00      	cmp	r6, #0
 8004d14:	d0f9      	beq.n	8004d0a <__sflush_r+0x1a>
 8004d16:	2300      	movs	r3, #0
 8004d18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004d1c:	682f      	ldr	r7, [r5, #0]
 8004d1e:	6a21      	ldr	r1, [r4, #32]
 8004d20:	602b      	str	r3, [r5, #0]
 8004d22:	d032      	beq.n	8004d8a <__sflush_r+0x9a>
 8004d24:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004d26:	89a3      	ldrh	r3, [r4, #12]
 8004d28:	075a      	lsls	r2, r3, #29
 8004d2a:	d505      	bpl.n	8004d38 <__sflush_r+0x48>
 8004d2c:	6863      	ldr	r3, [r4, #4]
 8004d2e:	1ac0      	subs	r0, r0, r3
 8004d30:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d32:	b10b      	cbz	r3, 8004d38 <__sflush_r+0x48>
 8004d34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d36:	1ac0      	subs	r0, r0, r3
 8004d38:	2300      	movs	r3, #0
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d3e:	6a21      	ldr	r1, [r4, #32]
 8004d40:	4628      	mov	r0, r5
 8004d42:	47b0      	blx	r6
 8004d44:	1c43      	adds	r3, r0, #1
 8004d46:	89a3      	ldrh	r3, [r4, #12]
 8004d48:	d106      	bne.n	8004d58 <__sflush_r+0x68>
 8004d4a:	6829      	ldr	r1, [r5, #0]
 8004d4c:	291d      	cmp	r1, #29
 8004d4e:	d848      	bhi.n	8004de2 <__sflush_r+0xf2>
 8004d50:	4a29      	ldr	r2, [pc, #164]	; (8004df8 <__sflush_r+0x108>)
 8004d52:	40ca      	lsrs	r2, r1
 8004d54:	07d6      	lsls	r6, r2, #31
 8004d56:	d544      	bpl.n	8004de2 <__sflush_r+0xf2>
 8004d58:	2200      	movs	r2, #0
 8004d5a:	6062      	str	r2, [r4, #4]
 8004d5c:	04d9      	lsls	r1, r3, #19
 8004d5e:	6922      	ldr	r2, [r4, #16]
 8004d60:	6022      	str	r2, [r4, #0]
 8004d62:	d504      	bpl.n	8004d6e <__sflush_r+0x7e>
 8004d64:	1c42      	adds	r2, r0, #1
 8004d66:	d101      	bne.n	8004d6c <__sflush_r+0x7c>
 8004d68:	682b      	ldr	r3, [r5, #0]
 8004d6a:	b903      	cbnz	r3, 8004d6e <__sflush_r+0x7e>
 8004d6c:	6560      	str	r0, [r4, #84]	; 0x54
 8004d6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d70:	602f      	str	r7, [r5, #0]
 8004d72:	2900      	cmp	r1, #0
 8004d74:	d0c9      	beq.n	8004d0a <__sflush_r+0x1a>
 8004d76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d7a:	4299      	cmp	r1, r3
 8004d7c:	d002      	beq.n	8004d84 <__sflush_r+0x94>
 8004d7e:	4628      	mov	r0, r5
 8004d80:	f7ff f8ba 	bl	8003ef8 <_free_r>
 8004d84:	2000      	movs	r0, #0
 8004d86:	6360      	str	r0, [r4, #52]	; 0x34
 8004d88:	e7c0      	b.n	8004d0c <__sflush_r+0x1c>
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	4628      	mov	r0, r5
 8004d8e:	47b0      	blx	r6
 8004d90:	1c41      	adds	r1, r0, #1
 8004d92:	d1c8      	bne.n	8004d26 <__sflush_r+0x36>
 8004d94:	682b      	ldr	r3, [r5, #0]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d0c5      	beq.n	8004d26 <__sflush_r+0x36>
 8004d9a:	2b1d      	cmp	r3, #29
 8004d9c:	d001      	beq.n	8004da2 <__sflush_r+0xb2>
 8004d9e:	2b16      	cmp	r3, #22
 8004da0:	d101      	bne.n	8004da6 <__sflush_r+0xb6>
 8004da2:	602f      	str	r7, [r5, #0]
 8004da4:	e7b1      	b.n	8004d0a <__sflush_r+0x1a>
 8004da6:	89a3      	ldrh	r3, [r4, #12]
 8004da8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dac:	81a3      	strh	r3, [r4, #12]
 8004dae:	e7ad      	b.n	8004d0c <__sflush_r+0x1c>
 8004db0:	690f      	ldr	r7, [r1, #16]
 8004db2:	2f00      	cmp	r7, #0
 8004db4:	d0a9      	beq.n	8004d0a <__sflush_r+0x1a>
 8004db6:	0793      	lsls	r3, r2, #30
 8004db8:	680e      	ldr	r6, [r1, #0]
 8004dba:	bf08      	it	eq
 8004dbc:	694b      	ldreq	r3, [r1, #20]
 8004dbe:	600f      	str	r7, [r1, #0]
 8004dc0:	bf18      	it	ne
 8004dc2:	2300      	movne	r3, #0
 8004dc4:	eba6 0807 	sub.w	r8, r6, r7
 8004dc8:	608b      	str	r3, [r1, #8]
 8004dca:	f1b8 0f00 	cmp.w	r8, #0
 8004dce:	dd9c      	ble.n	8004d0a <__sflush_r+0x1a>
 8004dd0:	4643      	mov	r3, r8
 8004dd2:	463a      	mov	r2, r7
 8004dd4:	6a21      	ldr	r1, [r4, #32]
 8004dd6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004dd8:	4628      	mov	r0, r5
 8004dda:	47b0      	blx	r6
 8004ddc:	2800      	cmp	r0, #0
 8004dde:	dc06      	bgt.n	8004dee <__sflush_r+0xfe>
 8004de0:	89a3      	ldrh	r3, [r4, #12]
 8004de2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004de6:	81a3      	strh	r3, [r4, #12]
 8004de8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dec:	e78e      	b.n	8004d0c <__sflush_r+0x1c>
 8004dee:	4407      	add	r7, r0
 8004df0:	eba8 0800 	sub.w	r8, r8, r0
 8004df4:	e7e9      	b.n	8004dca <__sflush_r+0xda>
 8004df6:	bf00      	nop
 8004df8:	20400001 	.word	0x20400001

08004dfc <_fflush_r>:
 8004dfc:	b538      	push	{r3, r4, r5, lr}
 8004dfe:	690b      	ldr	r3, [r1, #16]
 8004e00:	4605      	mov	r5, r0
 8004e02:	460c      	mov	r4, r1
 8004e04:	b1db      	cbz	r3, 8004e3e <_fflush_r+0x42>
 8004e06:	b118      	cbz	r0, 8004e10 <_fflush_r+0x14>
 8004e08:	6983      	ldr	r3, [r0, #24]
 8004e0a:	b90b      	cbnz	r3, 8004e10 <_fflush_r+0x14>
 8004e0c:	f7ff f9a4 	bl	8004158 <__sinit>
 8004e10:	4b0c      	ldr	r3, [pc, #48]	; (8004e44 <_fflush_r+0x48>)
 8004e12:	429c      	cmp	r4, r3
 8004e14:	d109      	bne.n	8004e2a <_fflush_r+0x2e>
 8004e16:	686c      	ldr	r4, [r5, #4]
 8004e18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e1c:	b17b      	cbz	r3, 8004e3e <_fflush_r+0x42>
 8004e1e:	4621      	mov	r1, r4
 8004e20:	4628      	mov	r0, r5
 8004e22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e26:	f7ff bf63 	b.w	8004cf0 <__sflush_r>
 8004e2a:	4b07      	ldr	r3, [pc, #28]	; (8004e48 <_fflush_r+0x4c>)
 8004e2c:	429c      	cmp	r4, r3
 8004e2e:	d101      	bne.n	8004e34 <_fflush_r+0x38>
 8004e30:	68ac      	ldr	r4, [r5, #8]
 8004e32:	e7f1      	b.n	8004e18 <_fflush_r+0x1c>
 8004e34:	4b05      	ldr	r3, [pc, #20]	; (8004e4c <_fflush_r+0x50>)
 8004e36:	429c      	cmp	r4, r3
 8004e38:	bf08      	it	eq
 8004e3a:	68ec      	ldreq	r4, [r5, #12]
 8004e3c:	e7ec      	b.n	8004e18 <_fflush_r+0x1c>
 8004e3e:	2000      	movs	r0, #0
 8004e40:	bd38      	pop	{r3, r4, r5, pc}
 8004e42:	bf00      	nop
 8004e44:	080050dc 	.word	0x080050dc
 8004e48:	080050fc 	.word	0x080050fc
 8004e4c:	080050bc 	.word	0x080050bc

08004e50 <_lseek_r>:
 8004e50:	b538      	push	{r3, r4, r5, lr}
 8004e52:	4c07      	ldr	r4, [pc, #28]	; (8004e70 <_lseek_r+0x20>)
 8004e54:	4605      	mov	r5, r0
 8004e56:	4608      	mov	r0, r1
 8004e58:	4611      	mov	r1, r2
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	6022      	str	r2, [r4, #0]
 8004e5e:	461a      	mov	r2, r3
 8004e60:	f7fe fb4c 	bl	80034fc <_lseek>
 8004e64:	1c43      	adds	r3, r0, #1
 8004e66:	d102      	bne.n	8004e6e <_lseek_r+0x1e>
 8004e68:	6823      	ldr	r3, [r4, #0]
 8004e6a:	b103      	cbz	r3, 8004e6e <_lseek_r+0x1e>
 8004e6c:	602b      	str	r3, [r5, #0]
 8004e6e:	bd38      	pop	{r3, r4, r5, pc}
 8004e70:	20004244 	.word	0x20004244

08004e74 <__swhatbuf_r>:
 8004e74:	b570      	push	{r4, r5, r6, lr}
 8004e76:	460e      	mov	r6, r1
 8004e78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e7c:	2900      	cmp	r1, #0
 8004e7e:	b096      	sub	sp, #88	; 0x58
 8004e80:	4614      	mov	r4, r2
 8004e82:	461d      	mov	r5, r3
 8004e84:	da07      	bge.n	8004e96 <__swhatbuf_r+0x22>
 8004e86:	2300      	movs	r3, #0
 8004e88:	602b      	str	r3, [r5, #0]
 8004e8a:	89b3      	ldrh	r3, [r6, #12]
 8004e8c:	061a      	lsls	r2, r3, #24
 8004e8e:	d410      	bmi.n	8004eb2 <__swhatbuf_r+0x3e>
 8004e90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e94:	e00e      	b.n	8004eb4 <__swhatbuf_r+0x40>
 8004e96:	466a      	mov	r2, sp
 8004e98:	f000 f8a2 	bl	8004fe0 <_fstat_r>
 8004e9c:	2800      	cmp	r0, #0
 8004e9e:	dbf2      	blt.n	8004e86 <__swhatbuf_r+0x12>
 8004ea0:	9a01      	ldr	r2, [sp, #4]
 8004ea2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004ea6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004eaa:	425a      	negs	r2, r3
 8004eac:	415a      	adcs	r2, r3
 8004eae:	602a      	str	r2, [r5, #0]
 8004eb0:	e7ee      	b.n	8004e90 <__swhatbuf_r+0x1c>
 8004eb2:	2340      	movs	r3, #64	; 0x40
 8004eb4:	2000      	movs	r0, #0
 8004eb6:	6023      	str	r3, [r4, #0]
 8004eb8:	b016      	add	sp, #88	; 0x58
 8004eba:	bd70      	pop	{r4, r5, r6, pc}

08004ebc <__smakebuf_r>:
 8004ebc:	898b      	ldrh	r3, [r1, #12]
 8004ebe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004ec0:	079d      	lsls	r5, r3, #30
 8004ec2:	4606      	mov	r6, r0
 8004ec4:	460c      	mov	r4, r1
 8004ec6:	d507      	bpl.n	8004ed8 <__smakebuf_r+0x1c>
 8004ec8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004ecc:	6023      	str	r3, [r4, #0]
 8004ece:	6123      	str	r3, [r4, #16]
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	6163      	str	r3, [r4, #20]
 8004ed4:	b002      	add	sp, #8
 8004ed6:	bd70      	pop	{r4, r5, r6, pc}
 8004ed8:	ab01      	add	r3, sp, #4
 8004eda:	466a      	mov	r2, sp
 8004edc:	f7ff ffca 	bl	8004e74 <__swhatbuf_r>
 8004ee0:	9900      	ldr	r1, [sp, #0]
 8004ee2:	4605      	mov	r5, r0
 8004ee4:	4630      	mov	r0, r6
 8004ee6:	f7ff f855 	bl	8003f94 <_malloc_r>
 8004eea:	b948      	cbnz	r0, 8004f00 <__smakebuf_r+0x44>
 8004eec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ef0:	059a      	lsls	r2, r3, #22
 8004ef2:	d4ef      	bmi.n	8004ed4 <__smakebuf_r+0x18>
 8004ef4:	f023 0303 	bic.w	r3, r3, #3
 8004ef8:	f043 0302 	orr.w	r3, r3, #2
 8004efc:	81a3      	strh	r3, [r4, #12]
 8004efe:	e7e3      	b.n	8004ec8 <__smakebuf_r+0xc>
 8004f00:	4b0d      	ldr	r3, [pc, #52]	; (8004f38 <__smakebuf_r+0x7c>)
 8004f02:	62b3      	str	r3, [r6, #40]	; 0x28
 8004f04:	89a3      	ldrh	r3, [r4, #12]
 8004f06:	6020      	str	r0, [r4, #0]
 8004f08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f0c:	81a3      	strh	r3, [r4, #12]
 8004f0e:	9b00      	ldr	r3, [sp, #0]
 8004f10:	6163      	str	r3, [r4, #20]
 8004f12:	9b01      	ldr	r3, [sp, #4]
 8004f14:	6120      	str	r0, [r4, #16]
 8004f16:	b15b      	cbz	r3, 8004f30 <__smakebuf_r+0x74>
 8004f18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f1c:	4630      	mov	r0, r6
 8004f1e:	f000 f871 	bl	8005004 <_isatty_r>
 8004f22:	b128      	cbz	r0, 8004f30 <__smakebuf_r+0x74>
 8004f24:	89a3      	ldrh	r3, [r4, #12]
 8004f26:	f023 0303 	bic.w	r3, r3, #3
 8004f2a:	f043 0301 	orr.w	r3, r3, #1
 8004f2e:	81a3      	strh	r3, [r4, #12]
 8004f30:	89a3      	ldrh	r3, [r4, #12]
 8004f32:	431d      	orrs	r5, r3
 8004f34:	81a5      	strh	r5, [r4, #12]
 8004f36:	e7cd      	b.n	8004ed4 <__smakebuf_r+0x18>
 8004f38:	08004121 	.word	0x08004121

08004f3c <memmove>:
 8004f3c:	4288      	cmp	r0, r1
 8004f3e:	b510      	push	{r4, lr}
 8004f40:	eb01 0302 	add.w	r3, r1, r2
 8004f44:	d807      	bhi.n	8004f56 <memmove+0x1a>
 8004f46:	1e42      	subs	r2, r0, #1
 8004f48:	4299      	cmp	r1, r3
 8004f4a:	d00a      	beq.n	8004f62 <memmove+0x26>
 8004f4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f50:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004f54:	e7f8      	b.n	8004f48 <memmove+0xc>
 8004f56:	4283      	cmp	r3, r0
 8004f58:	d9f5      	bls.n	8004f46 <memmove+0xa>
 8004f5a:	1881      	adds	r1, r0, r2
 8004f5c:	1ad2      	subs	r2, r2, r3
 8004f5e:	42d3      	cmn	r3, r2
 8004f60:	d100      	bne.n	8004f64 <memmove+0x28>
 8004f62:	bd10      	pop	{r4, pc}
 8004f64:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004f68:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004f6c:	e7f7      	b.n	8004f5e <memmove+0x22>

08004f6e <_realloc_r>:
 8004f6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f70:	4607      	mov	r7, r0
 8004f72:	4614      	mov	r4, r2
 8004f74:	460e      	mov	r6, r1
 8004f76:	b921      	cbnz	r1, 8004f82 <_realloc_r+0x14>
 8004f78:	4611      	mov	r1, r2
 8004f7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004f7e:	f7ff b809 	b.w	8003f94 <_malloc_r>
 8004f82:	b922      	cbnz	r2, 8004f8e <_realloc_r+0x20>
 8004f84:	f7fe ffb8 	bl	8003ef8 <_free_r>
 8004f88:	4625      	mov	r5, r4
 8004f8a:	4628      	mov	r0, r5
 8004f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f8e:	f000 f849 	bl	8005024 <_malloc_usable_size_r>
 8004f92:	42a0      	cmp	r0, r4
 8004f94:	d20f      	bcs.n	8004fb6 <_realloc_r+0x48>
 8004f96:	4621      	mov	r1, r4
 8004f98:	4638      	mov	r0, r7
 8004f9a:	f7fe fffb 	bl	8003f94 <_malloc_r>
 8004f9e:	4605      	mov	r5, r0
 8004fa0:	2800      	cmp	r0, #0
 8004fa2:	d0f2      	beq.n	8004f8a <_realloc_r+0x1c>
 8004fa4:	4631      	mov	r1, r6
 8004fa6:	4622      	mov	r2, r4
 8004fa8:	f7fe ff92 	bl	8003ed0 <memcpy>
 8004fac:	4631      	mov	r1, r6
 8004fae:	4638      	mov	r0, r7
 8004fb0:	f7fe ffa2 	bl	8003ef8 <_free_r>
 8004fb4:	e7e9      	b.n	8004f8a <_realloc_r+0x1c>
 8004fb6:	4635      	mov	r5, r6
 8004fb8:	e7e7      	b.n	8004f8a <_realloc_r+0x1c>
	...

08004fbc <_read_r>:
 8004fbc:	b538      	push	{r3, r4, r5, lr}
 8004fbe:	4c07      	ldr	r4, [pc, #28]	; (8004fdc <_read_r+0x20>)
 8004fc0:	4605      	mov	r5, r0
 8004fc2:	4608      	mov	r0, r1
 8004fc4:	4611      	mov	r1, r2
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	6022      	str	r2, [r4, #0]
 8004fca:	461a      	mov	r2, r3
 8004fcc:	f7fe fa56 	bl	800347c <_read>
 8004fd0:	1c43      	adds	r3, r0, #1
 8004fd2:	d102      	bne.n	8004fda <_read_r+0x1e>
 8004fd4:	6823      	ldr	r3, [r4, #0]
 8004fd6:	b103      	cbz	r3, 8004fda <_read_r+0x1e>
 8004fd8:	602b      	str	r3, [r5, #0]
 8004fda:	bd38      	pop	{r3, r4, r5, pc}
 8004fdc:	20004244 	.word	0x20004244

08004fe0 <_fstat_r>:
 8004fe0:	b538      	push	{r3, r4, r5, lr}
 8004fe2:	4c07      	ldr	r4, [pc, #28]	; (8005000 <_fstat_r+0x20>)
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	4605      	mov	r5, r0
 8004fe8:	4608      	mov	r0, r1
 8004fea:	4611      	mov	r1, r2
 8004fec:	6023      	str	r3, [r4, #0]
 8004fee:	f7fe fa7e 	bl	80034ee <_fstat>
 8004ff2:	1c43      	adds	r3, r0, #1
 8004ff4:	d102      	bne.n	8004ffc <_fstat_r+0x1c>
 8004ff6:	6823      	ldr	r3, [r4, #0]
 8004ff8:	b103      	cbz	r3, 8004ffc <_fstat_r+0x1c>
 8004ffa:	602b      	str	r3, [r5, #0]
 8004ffc:	bd38      	pop	{r3, r4, r5, pc}
 8004ffe:	bf00      	nop
 8005000:	20004244 	.word	0x20004244

08005004 <_isatty_r>:
 8005004:	b538      	push	{r3, r4, r5, lr}
 8005006:	4c06      	ldr	r4, [pc, #24]	; (8005020 <_isatty_r+0x1c>)
 8005008:	2300      	movs	r3, #0
 800500a:	4605      	mov	r5, r0
 800500c:	4608      	mov	r0, r1
 800500e:	6023      	str	r3, [r4, #0]
 8005010:	f7fe fa72 	bl	80034f8 <_isatty>
 8005014:	1c43      	adds	r3, r0, #1
 8005016:	d102      	bne.n	800501e <_isatty_r+0x1a>
 8005018:	6823      	ldr	r3, [r4, #0]
 800501a:	b103      	cbz	r3, 800501e <_isatty_r+0x1a>
 800501c:	602b      	str	r3, [r5, #0]
 800501e:	bd38      	pop	{r3, r4, r5, pc}
 8005020:	20004244 	.word	0x20004244

08005024 <_malloc_usable_size_r>:
 8005024:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005028:	1f18      	subs	r0, r3, #4
 800502a:	2b00      	cmp	r3, #0
 800502c:	bfbc      	itt	lt
 800502e:	580b      	ldrlt	r3, [r1, r0]
 8005030:	18c0      	addlt	r0, r0, r3
 8005032:	4770      	bx	lr

08005034 <_init>:
 8005034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005036:	bf00      	nop
 8005038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800503a:	bc08      	pop	{r3}
 800503c:	469e      	mov	lr, r3
 800503e:	4770      	bx	lr

08005040 <_fini>:
 8005040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005042:	bf00      	nop
 8005044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005046:	bc08      	pop	{r3}
 8005048:	469e      	mov	lr, r3
 800504a:	4770      	bx	lr
