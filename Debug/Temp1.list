
Temp1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003adc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003cac  08003cac  00013cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003cf4  08003cf4  00013cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003cfc  08003cfc  00013cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003d00  08003d00  00013d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  20000000  08003d04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000041c0  20000014  08003d18  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200041d4  08003d18  000241d4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001e616  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004815  00000000  00000000  0003e65a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000c331  00000000  00000000  00042e6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000012b0  00000000  00000000  0004f1a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001690  00000000  00000000  00050450  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00025a0f  00000000  00000000  00051ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00011fce  00000000  00000000  000774ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000de7cc  00000000  00000000  000894bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  00167c89  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003608  00000000  00000000  00167d04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000014 	.word	0x20000014
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003c94 	.word	0x08003c94

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000018 	.word	0x20000018
 800020c:	08003c94 	.word	0x08003c94

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b972 	b.w	800050c <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	4688      	mov	r8, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14b      	bne.n	80002e6 <__udivmoddi4+0xa6>
 800024e:	428a      	cmp	r2, r1
 8000250:	4615      	mov	r5, r2
 8000252:	d967      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0720 	rsb	r7, r2, #32
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	fa20 f707 	lsr.w	r7, r0, r7
 8000266:	4095      	lsls	r5, r2
 8000268:	ea47 0803 	orr.w	r8, r7, r3
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbb8 f7fe 	udiv	r7, r8, lr
 8000278:	fa1f fc85 	uxth.w	ip, r5
 800027c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000280:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000284:	fb07 f10c 	mul.w	r1, r7, ip
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18eb      	adds	r3, r5, r3
 800028e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000292:	f080 811b 	bcs.w	80004cc <__udivmoddi4+0x28c>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8118 	bls.w	80004cc <__udivmoddi4+0x28c>
 800029c:	3f02      	subs	r7, #2
 800029e:	442b      	add	r3, r5
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b4:	45a4      	cmp	ip, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	192c      	adds	r4, r5, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8107 	bcs.w	80004d0 <__udivmoddi4+0x290>
 80002c2:	45a4      	cmp	ip, r4
 80002c4:	f240 8104 	bls.w	80004d0 <__udivmoddi4+0x290>
 80002c8:	3802      	subs	r0, #2
 80002ca:	442c      	add	r4, r5
 80002cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d0:	eba4 040c 	sub.w	r4, r4, ip
 80002d4:	2700      	movs	r7, #0
 80002d6:	b11e      	cbz	r6, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c6 4300 	strd	r4, r3, [r6]
 80002e0:	4639      	mov	r1, r7
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0xbe>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80eb 	beq.w	80004c6 <__udivmoddi4+0x286>
 80002f0:	2700      	movs	r7, #0
 80002f2:	e9c6 0100 	strd	r0, r1, [r6]
 80002f6:	4638      	mov	r0, r7
 80002f8:	4639      	mov	r1, r7
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	fab3 f783 	clz	r7, r3
 8000302:	2f00      	cmp	r7, #0
 8000304:	d147      	bne.n	8000396 <__udivmoddi4+0x156>
 8000306:	428b      	cmp	r3, r1
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xd0>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2c4>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb61 0303 	sbc.w	r3, r1, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4698      	mov	r8, r3
 800031a:	2e00      	cmp	r6, #0
 800031c:	d0e0      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800031e:	e9c6 4800 	strd	r4, r8, [r6]
 8000322:	e7dd      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000324:	b902      	cbnz	r2, 8000328 <__udivmoddi4+0xe8>
 8000326:	deff      	udf	#255	; 0xff
 8000328:	fab2 f282 	clz	r2, r2
 800032c:	2a00      	cmp	r2, #0
 800032e:	f040 808f 	bne.w	8000450 <__udivmoddi4+0x210>
 8000332:	1b49      	subs	r1, r1, r5
 8000334:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000338:	fa1f f885 	uxth.w	r8, r5
 800033c:	2701      	movs	r7, #1
 800033e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fb0e 111c 	mls	r1, lr, ip, r1
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb08 f10c 	mul.w	r1, r8, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x124>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f10c 30ff 	add.w	r0, ip, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4299      	cmp	r1, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 8000362:	4684      	mov	ip, r0
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb1 f0fe 	udiv	r0, r1, lr
 800036c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000370:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000374:	fb08 f800 	mul.w	r8, r8, r0
 8000378:	45a0      	cmp	r8, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x14c>
 800037c:	192c      	adds	r4, r5, r4
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x14a>
 8000384:	45a0      	cmp	r8, r4
 8000386:	f200 80b6 	bhi.w	80004f6 <__udivmoddi4+0x2b6>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 0408 	sub.w	r4, r4, r8
 8000390:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000394:	e79f      	b.n	80002d6 <__udivmoddi4+0x96>
 8000396:	f1c7 0c20 	rsb	ip, r7, #32
 800039a:	40bb      	lsls	r3, r7
 800039c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a4:	fa01 f407 	lsl.w	r4, r1, r7
 80003a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b4:	4325      	orrs	r5, r4
 80003b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ba:	0c2c      	lsrs	r4, r5, #16
 80003bc:	fb08 3319 	mls	r3, r8, r9, r3
 80003c0:	fa1f fa8e 	uxth.w	sl, lr
 80003c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c8:	fb09 f40a 	mul.w	r4, r9, sl
 80003cc:	429c      	cmp	r4, r3
 80003ce:	fa02 f207 	lsl.w	r2, r2, r7
 80003d2:	fa00 f107 	lsl.w	r1, r0, r7
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1e 0303 	adds.w	r3, lr, r3
 80003dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e0:	f080 8087 	bcs.w	80004f2 <__udivmoddi4+0x2b2>
 80003e4:	429c      	cmp	r4, r3
 80003e6:	f240 8084 	bls.w	80004f2 <__udivmoddi4+0x2b2>
 80003ea:	f1a9 0902 	sub.w	r9, r9, #2
 80003ee:	4473      	add	r3, lr
 80003f0:	1b1b      	subs	r3, r3, r4
 80003f2:	b2ad      	uxth	r5, r5
 80003f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f8:	fb08 3310 	mls	r3, r8, r0, r3
 80003fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000400:	fb00 fa0a 	mul.w	sl, r0, sl
 8000404:	45a2      	cmp	sl, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1e 0404 	adds.w	r4, lr, r4
 800040c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000410:	d26b      	bcs.n	80004ea <__udivmoddi4+0x2aa>
 8000412:	45a2      	cmp	sl, r4
 8000414:	d969      	bls.n	80004ea <__udivmoddi4+0x2aa>
 8000416:	3802      	subs	r0, #2
 8000418:	4474      	add	r4, lr
 800041a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800041e:	fba0 8902 	umull	r8, r9, r0, r2
 8000422:	eba4 040a 	sub.w	r4, r4, sl
 8000426:	454c      	cmp	r4, r9
 8000428:	46c2      	mov	sl, r8
 800042a:	464b      	mov	r3, r9
 800042c:	d354      	bcc.n	80004d8 <__udivmoddi4+0x298>
 800042e:	d051      	beq.n	80004d4 <__udivmoddi4+0x294>
 8000430:	2e00      	cmp	r6, #0
 8000432:	d069      	beq.n	8000508 <__udivmoddi4+0x2c8>
 8000434:	ebb1 050a 	subs.w	r5, r1, sl
 8000438:	eb64 0403 	sbc.w	r4, r4, r3
 800043c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000440:	40fd      	lsrs	r5, r7
 8000442:	40fc      	lsrs	r4, r7
 8000444:	ea4c 0505 	orr.w	r5, ip, r5
 8000448:	e9c6 5400 	strd	r5, r4, [r6]
 800044c:	2700      	movs	r7, #0
 800044e:	e747      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000450:	f1c2 0320 	rsb	r3, r2, #32
 8000454:	fa20 f703 	lsr.w	r7, r0, r3
 8000458:	4095      	lsls	r5, r2
 800045a:	fa01 f002 	lsl.w	r0, r1, r2
 800045e:	fa21 f303 	lsr.w	r3, r1, r3
 8000462:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000466:	4338      	orrs	r0, r7
 8000468:	0c01      	lsrs	r1, r0, #16
 800046a:	fbb3 f7fe 	udiv	r7, r3, lr
 800046e:	fa1f f885 	uxth.w	r8, r5
 8000472:	fb0e 3317 	mls	r3, lr, r7, r3
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb07 f308 	mul.w	r3, r7, r8
 800047e:	428b      	cmp	r3, r1
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x256>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f107 3cff 	add.w	ip, r7, #4294967295
 800048c:	d22f      	bcs.n	80004ee <__udivmoddi4+0x2ae>
 800048e:	428b      	cmp	r3, r1
 8000490:	d92d      	bls.n	80004ee <__udivmoddi4+0x2ae>
 8000492:	3f02      	subs	r7, #2
 8000494:	4429      	add	r1, r5
 8000496:	1acb      	subs	r3, r1, r3
 8000498:	b281      	uxth	r1, r0
 800049a:	fbb3 f0fe 	udiv	r0, r3, lr
 800049e:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a6:	fb00 f308 	mul.w	r3, r0, r8
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x27e>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004b4:	d217      	bcs.n	80004e6 <__udivmoddi4+0x2a6>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d915      	bls.n	80004e6 <__udivmoddi4+0x2a6>
 80004ba:	3802      	subs	r0, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c4:	e73b      	b.n	800033e <__udivmoddi4+0xfe>
 80004c6:	4637      	mov	r7, r6
 80004c8:	4630      	mov	r0, r6
 80004ca:	e709      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004cc:	4607      	mov	r7, r0
 80004ce:	e6e7      	b.n	80002a0 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fb      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d4:	4541      	cmp	r1, r8
 80004d6:	d2ab      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004dc:	eb69 020e 	sbc.w	r2, r9, lr
 80004e0:	3801      	subs	r0, #1
 80004e2:	4613      	mov	r3, r2
 80004e4:	e7a4      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e6:	4660      	mov	r0, ip
 80004e8:	e7e9      	b.n	80004be <__udivmoddi4+0x27e>
 80004ea:	4618      	mov	r0, r3
 80004ec:	e795      	b.n	800041a <__udivmoddi4+0x1da>
 80004ee:	4667      	mov	r7, ip
 80004f0:	e7d1      	b.n	8000496 <__udivmoddi4+0x256>
 80004f2:	4681      	mov	r9, r0
 80004f4:	e77c      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	442c      	add	r4, r5
 80004fa:	e747      	b.n	800038c <__udivmoddi4+0x14c>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	442b      	add	r3, r5
 8000502:	e72f      	b.n	8000364 <__udivmoddi4+0x124>
 8000504:	4638      	mov	r0, r7
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xda>
 8000508:	4637      	mov	r7, r6
 800050a:	e6e9      	b.n	80002e0 <__udivmoddi4+0xa0>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000510:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000512:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <HAL_Init+0x30>)
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800051a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000522:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800052a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800052c:	2003      	movs	r0, #3
 800052e:	f000 f809 	bl	8000544 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000532:	2000      	movs	r0, #0
 8000534:	f002 fe6e 	bl	8003214 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000538:	f002 fdaa 	bl	8003090 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800053c:	2000      	movs	r0, #0
 800053e:	bd08      	pop	{r3, pc}
 8000540:	40023c00 	.word	0x40023c00

08000544 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000544:	4a07      	ldr	r2, [pc, #28]	; (8000564 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000546:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000548:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800054c:	041b      	lsls	r3, r3, #16
 800054e:	0c1b      	lsrs	r3, r3, #16
 8000550:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000554:	0200      	lsls	r0, r0, #8
 8000556:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800055a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800055e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000560:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000562:	4770      	bx	lr
 8000564:	e000ed00 	.word	0xe000ed00

08000568 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000568:	4b17      	ldr	r3, [pc, #92]	; (80005c8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800056a:	b570      	push	{r4, r5, r6, lr}
 800056c:	68dc      	ldr	r4, [r3, #12]
 800056e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000572:	f1c4 0507 	rsb	r5, r4, #7
 8000576:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000578:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800057c:	bf28      	it	cs
 800057e:	2504      	movcs	r5, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000580:	f04f 36ff 	mov.w	r6, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000584:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000586:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800058a:	bf8c      	ite	hi
 800058c:	3c03      	subhi	r4, #3
 800058e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000590:	ea21 0303 	bic.w	r3, r1, r3
 8000594:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000596:	fa06 f404 	lsl.w	r4, r6, r4
 800059a:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 800059e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005a0:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005a4:	bfa8      	it	ge
 80005a6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 80005aa:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ae:	bfbc      	itt	lt
 80005b0:	f000 000f 	andlt.w	r0, r0, #15
 80005b4:	4a05      	ldrlt	r2, [pc, #20]	; (80005cc <HAL_NVIC_SetPriority+0x64>)
 80005b6:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b8:	bfaa      	itet	ge
 80005ba:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005be:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c0:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80005c4:	bd70      	pop	{r4, r5, r6, pc}
 80005c6:	bf00      	nop
 80005c8:	e000ed00 	.word	0xe000ed00
 80005cc:	e000ed14 	.word	0xe000ed14

080005d0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80005d0:	2800      	cmp	r0, #0
 80005d2:	db08      	blt.n	80005e6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005d4:	0942      	lsrs	r2, r0, #5
 80005d6:	2301      	movs	r3, #1
 80005d8:	f000 001f 	and.w	r0, r0, #31
 80005dc:	fa03 f000 	lsl.w	r0, r3, r0
 80005e0:	4b01      	ldr	r3, [pc, #4]	; (80005e8 <HAL_NVIC_EnableIRQ+0x18>)
 80005e2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80005e6:	4770      	bx	lr
 80005e8:	e000e100 	.word	0xe000e100

080005ec <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80005ec:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80005f0:	2b02      	cmp	r3, #2
 80005f2:	d003      	beq.n	80005fc <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80005f4:	2380      	movs	r3, #128	; 0x80
 80005f6:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80005f8:	2001      	movs	r0, #1
 80005fa:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80005fc:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80005fe:	2305      	movs	r3, #5
 8000600:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000604:	6813      	ldr	r3, [r2, #0]
 8000606:	f023 0301 	bic.w	r3, r3, #1
 800060a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800060c:	2000      	movs	r0, #0
}
 800060e:	4770      	bx	lr

08000610 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000614:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000616:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000618:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80007bc <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800061c:	4a65      	ldr	r2, [pc, #404]	; (80007b4 <HAL_GPIO_Init+0x1a4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800061e:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 80007c0 <HAL_GPIO_Init+0x1b0>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000622:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000624:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000626:	f04f 0c01 	mov.w	ip, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800062a:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 800062c:	fa0c fc03 	lsl.w	ip, ip, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000630:	ea04 060c 	and.w	r6, r4, ip
    if(iocurrent == ioposition)
 8000634:	45b4      	cmp	ip, r6
 8000636:	f040 80aa 	bne.w	800078e <HAL_GPIO_Init+0x17e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800063a:	684c      	ldr	r4, [r1, #4]
 800063c:	f024 0710 	bic.w	r7, r4, #16
 8000640:	2f02      	cmp	r7, #2
 8000642:	d116      	bne.n	8000672 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000644:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000648:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800064c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000650:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000654:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000658:	f04f 0e0f 	mov.w	lr, #15
 800065c:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000660:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000664:	690d      	ldr	r5, [r1, #16]
 8000666:	fa05 f50b 	lsl.w	r5, r5, fp
 800066a:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 800066e:	f8ca 5020 	str.w	r5, [sl, #32]
 8000672:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000676:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000678:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800067c:	fa05 f50a 	lsl.w	r5, r5, sl
 8000680:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000682:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000686:	ea05 0b0b 	and.w	fp, r5, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800068a:	fa0e fe0a 	lsl.w	lr, lr, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800068e:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000690:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000694:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000696:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800069a:	d811      	bhi.n	80006c0 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 800069c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800069e:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80006a2:	68cf      	ldr	r7, [r1, #12]
 80006a4:	fa07 fe0a 	lsl.w	lr, r7, sl
 80006a8:	ea4e 070b 	orr.w	r7, lr, fp
        GPIOx->OSPEEDR = temp;
 80006ac:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80006ae:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80006b0:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006b4:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80006b8:	409f      	lsls	r7, r3
 80006ba:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 80006be:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80006c0:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006c2:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80006c4:	688f      	ldr	r7, [r1, #8]
 80006c6:	fa07 f70a 	lsl.w	r7, r7, sl
 80006ca:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80006cc:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80006ce:	00e5      	lsls	r5, r4, #3
 80006d0:	d55d      	bpl.n	800078e <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d2:	f04f 0b00 	mov.w	fp, #0
 80006d6:	f8cd b00c 	str.w	fp, [sp, #12]
 80006da:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006de:	4d36      	ldr	r5, [pc, #216]	; (80007b8 <HAL_GPIO_Init+0x1a8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006e0:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80006e4:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80006e8:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80006ec:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80006f0:	9703      	str	r7, [sp, #12]
 80006f2:	9f03      	ldr	r7, [sp, #12]
 80006f4:	f023 0703 	bic.w	r7, r3, #3
 80006f8:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80006fc:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000700:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000704:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000708:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800070c:	f04f 0c0f 	mov.w	ip, #15
 8000710:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000714:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000716:	ea2a 0c0c 	bic.w	ip, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800071a:	d03f      	beq.n	800079c <HAL_GPIO_Init+0x18c>
 800071c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000720:	42a8      	cmp	r0, r5
 8000722:	d03d      	beq.n	80007a0 <HAL_GPIO_Init+0x190>
 8000724:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000728:	42a8      	cmp	r0, r5
 800072a:	d03b      	beq.n	80007a4 <HAL_GPIO_Init+0x194>
 800072c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000730:	42a8      	cmp	r0, r5
 8000732:	d039      	beq.n	80007a8 <HAL_GPIO_Init+0x198>
 8000734:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000738:	42a8      	cmp	r0, r5
 800073a:	d037      	beq.n	80007ac <HAL_GPIO_Init+0x19c>
 800073c:	4548      	cmp	r0, r9
 800073e:	d037      	beq.n	80007b0 <HAL_GPIO_Init+0x1a0>
 8000740:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000744:	42a8      	cmp	r0, r5
 8000746:	bf14      	ite	ne
 8000748:	2507      	movne	r5, #7
 800074a:	2506      	moveq	r5, #6
 800074c:	fa05 f50e 	lsl.w	r5, r5, lr
 8000750:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000754:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000756:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000758:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800075a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800075e:	bf0c      	ite	eq
 8000760:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000762:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000764:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000766:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000768:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800076c:	bf0c      	ite	eq
 800076e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000770:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000772:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000774:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000776:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800077a:	bf0c      	ite	eq
 800077c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800077e:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000780:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000782:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000784:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000786:	bf54      	ite	pl
 8000788:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800078a:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 800078c:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800078e:	3301      	adds	r3, #1
 8000790:	2b10      	cmp	r3, #16
 8000792:	f47f af48 	bne.w	8000626 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000796:	b005      	add	sp, #20
 8000798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800079c:	465d      	mov	r5, fp
 800079e:	e7d5      	b.n	800074c <HAL_GPIO_Init+0x13c>
 80007a0:	2501      	movs	r5, #1
 80007a2:	e7d3      	b.n	800074c <HAL_GPIO_Init+0x13c>
 80007a4:	2502      	movs	r5, #2
 80007a6:	e7d1      	b.n	800074c <HAL_GPIO_Init+0x13c>
 80007a8:	2503      	movs	r5, #3
 80007aa:	e7cf      	b.n	800074c <HAL_GPIO_Init+0x13c>
 80007ac:	2504      	movs	r5, #4
 80007ae:	e7cd      	b.n	800074c <HAL_GPIO_Init+0x13c>
 80007b0:	2505      	movs	r5, #5
 80007b2:	e7cb      	b.n	800074c <HAL_GPIO_Init+0x13c>
 80007b4:	40013c00 	.word	0x40013c00
 80007b8:	40020000 	.word	0x40020000
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40021400 	.word	0x40021400

080007c4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80007c4:	6903      	ldr	r3, [r0, #16]
 80007c6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80007c8:	bf14      	ite	ne
 80007ca:	2001      	movne	r0, #1
 80007cc:	2000      	moveq	r0, #0
 80007ce:	4770      	bx	lr

080007d0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80007d0:	b10a      	cbz	r2, 80007d6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80007d2:	6181      	str	r1, [r0, #24]
  }
}
 80007d4:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80007d6:	0409      	lsls	r1, r1, #16
 80007d8:	e7fb      	b.n	80007d2 <HAL_GPIO_WritePin+0x2>
	...

080007dc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80007dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	9301      	str	r3, [sp, #4]
 80007e2:	4b18      	ldr	r3, [pc, #96]	; (8000844 <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80007e4:	4c18      	ldr	r4, [pc, #96]	; (8000848 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007e8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80007ec:	641a      	str	r2, [r3, #64]	; 0x40
 80007ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f4:	9301      	str	r3, [sp, #4]
 80007f6:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80007f8:	4b14      	ldr	r3, [pc, #80]	; (800084c <HAL_PWREx_EnableOverDrive+0x70>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80007fe:	f002 fddd 	bl	80033bc <HAL_GetTick>
 8000802:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000804:	6863      	ldr	r3, [r4, #4]
 8000806:	03da      	lsls	r2, r3, #15
 8000808:	d50b      	bpl.n	8000822 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800080a:	4b11      	ldr	r3, [pc, #68]	; (8000850 <HAL_PWREx_EnableOverDrive+0x74>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800080c:	4c0e      	ldr	r4, [pc, #56]	; (8000848 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800080e:	2201      	movs	r2, #1
 8000810:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000812:	f002 fdd3 	bl	80033bc <HAL_GetTick>
 8000816:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000818:	6863      	ldr	r3, [r4, #4]
 800081a:	039b      	lsls	r3, r3, #14
 800081c:	d50a      	bpl.n	8000834 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800081e:	2000      	movs	r0, #0
 8000820:	e006      	b.n	8000830 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000822:	f002 fdcb 	bl	80033bc <HAL_GetTick>
 8000826:	1b40      	subs	r0, r0, r5
 8000828:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800082c:	d9ea      	bls.n	8000804 <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 800082e:	2003      	movs	r0, #3
}
 8000830:	b003      	add	sp, #12
 8000832:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000834:	f002 fdc2 	bl	80033bc <HAL_GetTick>
 8000838:	1b40      	subs	r0, r0, r5
 800083a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800083e:	d9eb      	bls.n	8000818 <HAL_PWREx_EnableOverDrive+0x3c>
 8000840:	e7f5      	b.n	800082e <HAL_PWREx_EnableOverDrive+0x52>
 8000842:	bf00      	nop
 8000844:	40023800 	.word	0x40023800
 8000848:	40007000 	.word	0x40007000
 800084c:	420e0040 	.word	0x420e0040
 8000850:	420e0044 	.word	0x420e0044

08000854 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000858:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800085a:	4604      	mov	r4, r0
 800085c:	b910      	cbnz	r0, 8000864 <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 800085e:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);

  return HAL_OK;
}
 8000860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000864:	4b43      	ldr	r3, [pc, #268]	; (8000974 <HAL_RCC_ClockConfig+0x120>)
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	f002 020f 	and.w	r2, r2, #15
 800086c:	428a      	cmp	r2, r1
 800086e:	d327      	bcc.n	80008c0 <HAL_RCC_ClockConfig+0x6c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000870:	6821      	ldr	r1, [r4, #0]
 8000872:	078f      	lsls	r7, r1, #30
 8000874:	d42c      	bmi.n	80008d0 <HAL_RCC_ClockConfig+0x7c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000876:	07c8      	lsls	r0, r1, #31
 8000878:	d43f      	bmi.n	80008fa <HAL_RCC_ClockConfig+0xa6>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800087a:	4b3e      	ldr	r3, [pc, #248]	; (8000974 <HAL_RCC_ClockConfig+0x120>)
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	f002 020f 	and.w	r2, r2, #15
 8000882:	42aa      	cmp	r2, r5
 8000884:	d864      	bhi.n	8000950 <HAL_RCC_ClockConfig+0xfc>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000886:	6822      	ldr	r2, [r4, #0]
 8000888:	0751      	lsls	r1, r2, #29
 800088a:	d46a      	bmi.n	8000962 <HAL_RCC_ClockConfig+0x10e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800088c:	0713      	lsls	r3, r2, #28
 800088e:	d507      	bpl.n	80008a0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000890:	4a39      	ldr	r2, [pc, #228]	; (8000978 <HAL_RCC_ClockConfig+0x124>)
 8000892:	6921      	ldr	r1, [r4, #16]
 8000894:	6893      	ldr	r3, [r2, #8]
 8000896:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800089a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800089e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80008a0:	f000 fabc 	bl	8000e1c <HAL_RCC_GetSysClockFreq>
 80008a4:	4b34      	ldr	r3, [pc, #208]	; (8000978 <HAL_RCC_ClockConfig+0x124>)
 80008a6:	4a35      	ldr	r2, [pc, #212]	; (800097c <HAL_RCC_ClockConfig+0x128>)
 80008a8:	689b      	ldr	r3, [r3, #8]
 80008aa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80008ae:	5cd3      	ldrb	r3, [r2, r3]
 80008b0:	40d8      	lsrs	r0, r3
 80008b2:	4b33      	ldr	r3, [pc, #204]	; (8000980 <HAL_RCC_ClockConfig+0x12c>)
 80008b4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80008b6:	2000      	movs	r0, #0
 80008b8:	f002 fcac 	bl	8003214 <HAL_InitTick>
  return HAL_OK;
 80008bc:	2000      	movs	r0, #0
 80008be:	e7cf      	b.n	8000860 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80008c0:	b2ca      	uxtb	r2, r1
 80008c2:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f003 030f 	and.w	r3, r3, #15
 80008ca:	428b      	cmp	r3, r1
 80008cc:	d1c7      	bne.n	800085e <HAL_RCC_ClockConfig+0xa>
 80008ce:	e7cf      	b.n	8000870 <HAL_RCC_ClockConfig+0x1c>
 80008d0:	4b29      	ldr	r3, [pc, #164]	; (8000978 <HAL_RCC_ClockConfig+0x124>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80008d2:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80008d6:	bf1e      	ittt	ne
 80008d8:	689a      	ldrne	r2, [r3, #8]
 80008da:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80008de:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80008e0:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80008e2:	bf42      	ittt	mi
 80008e4:	689a      	ldrmi	r2, [r3, #8]
 80008e6:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80008ea:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80008ec:	689a      	ldr	r2, [r3, #8]
 80008ee:	68a0      	ldr	r0, [r4, #8]
 80008f0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80008f4:	4302      	orrs	r2, r0
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	e7bd      	b.n	8000876 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008fa:	6862      	ldr	r2, [r4, #4]
 80008fc:	4b1e      	ldr	r3, [pc, #120]	; (8000978 <HAL_RCC_ClockConfig+0x124>)
 80008fe:	2a01      	cmp	r2, #1
 8000900:	d11c      	bne.n	800093c <HAL_RCC_ClockConfig+0xe8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000908:	d0a9      	beq.n	800085e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800090a:	4e1b      	ldr	r6, [pc, #108]	; (8000978 <HAL_RCC_ClockConfig+0x124>)
 800090c:	68b3      	ldr	r3, [r6, #8]
 800090e:	f023 0303 	bic.w	r3, r3, #3
 8000912:	4313      	orrs	r3, r2
 8000914:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000916:	f002 fd51 	bl	80033bc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800091a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800091e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000920:	68b3      	ldr	r3, [r6, #8]
 8000922:	6862      	ldr	r2, [r4, #4]
 8000924:	f003 030c 	and.w	r3, r3, #12
 8000928:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800092c:	d0a5      	beq.n	800087a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800092e:	f002 fd45 	bl	80033bc <HAL_GetTick>
 8000932:	1bc0      	subs	r0, r0, r7
 8000934:	4540      	cmp	r0, r8
 8000936:	d9f3      	bls.n	8000920 <HAL_RCC_ClockConfig+0xcc>
        return HAL_TIMEOUT;
 8000938:	2003      	movs	r0, #3
 800093a:	e791      	b.n	8000860 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800093c:	1e91      	subs	r1, r2, #2
 800093e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000940:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000942:	d802      	bhi.n	800094a <HAL_RCC_ClockConfig+0xf6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000944:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000948:	e7de      	b.n	8000908 <HAL_RCC_ClockConfig+0xb4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800094a:	f013 0f02 	tst.w	r3, #2
 800094e:	e7db      	b.n	8000908 <HAL_RCC_ClockConfig+0xb4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000950:	b2ea      	uxtb	r2, r5
 8000952:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	f003 030f 	and.w	r3, r3, #15
 800095a:	42ab      	cmp	r3, r5
 800095c:	f47f af7f 	bne.w	800085e <HAL_RCC_ClockConfig+0xa>
 8000960:	e791      	b.n	8000886 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000962:	4905      	ldr	r1, [pc, #20]	; (8000978 <HAL_RCC_ClockConfig+0x124>)
 8000964:	68e0      	ldr	r0, [r4, #12]
 8000966:	688b      	ldr	r3, [r1, #8]
 8000968:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800096c:	4303      	orrs	r3, r0
 800096e:	608b      	str	r3, [r1, #8]
 8000970:	e78c      	b.n	800088c <HAL_RCC_ClockConfig+0x38>
 8000972:	bf00      	nop
 8000974:	40023c00 	.word	0x40023c00
 8000978:	40023800 	.word	0x40023800
 800097c:	08003cd9 	.word	0x08003cd9
 8000980:	20000010 	.word	0x20000010

08000984 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000984:	4b01      	ldr	r3, [pc, #4]	; (800098c <HAL_RCC_GetHCLKFreq+0x8>)
 8000986:	6818      	ldr	r0, [r3, #0]
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	20000010 	.word	0x20000010

08000990 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000990:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000992:	4a05      	ldr	r2, [pc, #20]	; (80009a8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000994:	689b      	ldr	r3, [r3, #8]
 8000996:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800099a:	5cd3      	ldrb	r3, [r2, r3]
 800099c:	4a03      	ldr	r2, [pc, #12]	; (80009ac <HAL_RCC_GetPCLK1Freq+0x1c>)
 800099e:	6810      	ldr	r0, [r2, #0]
}
 80009a0:	40d8      	lsrs	r0, r3
 80009a2:	4770      	bx	lr
 80009a4:	40023800 	.word	0x40023800
 80009a8:	08003ce9 	.word	0x08003ce9
 80009ac:	20000010 	.word	0x20000010

080009b0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80009b0:	4b04      	ldr	r3, [pc, #16]	; (80009c4 <HAL_RCC_GetPCLK2Freq+0x14>)
 80009b2:	4a05      	ldr	r2, [pc, #20]	; (80009c8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80009b4:	689b      	ldr	r3, [r3, #8]
 80009b6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80009ba:	5cd3      	ldrb	r3, [r2, r3]
 80009bc:	4a03      	ldr	r2, [pc, #12]	; (80009cc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80009be:	6810      	ldr	r0, [r2, #0]
}
 80009c0:	40d8      	lsrs	r0, r3
 80009c2:	4770      	bx	lr
 80009c4:	40023800 	.word	0x40023800
 80009c8:	08003ce9 	.word	0x08003ce9
 80009cc:	20000010 	.word	0x20000010

080009d0 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80009d0:	230f      	movs	r3, #15
 80009d2:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80009d4:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <HAL_RCC_GetClockConfig+0x34>)
 80009d6:	689a      	ldr	r2, [r3, #8]
 80009d8:	f002 0203 	and.w	r2, r2, #3
 80009dc:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80009de:	689a      	ldr	r2, [r3, #8]
 80009e0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80009e4:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80009e6:	689a      	ldr	r2, [r3, #8]
 80009e8:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80009ec:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80009ee:	689b      	ldr	r3, [r3, #8]
 80009f0:	08db      	lsrs	r3, r3, #3
 80009f2:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80009f6:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80009f8:	4b03      	ldr	r3, [pc, #12]	; (8000a08 <HAL_RCC_GetClockConfig+0x38>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f003 030f 	and.w	r3, r3, #15
 8000a00:	600b      	str	r3, [r1, #0]
}
 8000a02:	4770      	bx	lr
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40023c00 	.word	0x40023c00

08000a0c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8000a0c:	6803      	ldr	r3, [r0, #0]
{
 8000a0e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8000a12:	f013 0601 	ands.w	r6, r3, #1
{
 8000a16:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8000a18:	d00b      	beq.n	8000a32 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8000a1a:	49aa      	ldr	r1, [pc, #680]	; (8000cc4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8000a1c:	6b86      	ldr	r6, [r0, #56]	; 0x38
 8000a1e:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8000a22:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8000a26:	4332      	orrs	r2, r6
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8000a28:	fab6 f686 	clz	r6, r6
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8000a2c:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8000a30:	0976      	lsrs	r6, r6, #5
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8000a32:	079d      	lsls	r5, r3, #30
 8000a34:	d50b      	bpl.n	8000a4e <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8000a36:	48a3      	ldr	r0, [pc, #652]	; (8000cc4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8000a38:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8000a3a:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8000a3e:	f022 52c0 	bic.w	r2, r2, #402653184	; 0x18000000
 8000a42:	430a      	orrs	r2, r1
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
    {
      plli2sused = 1U;
 8000a44:	2900      	cmp	r1, #0
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8000a46:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
      plli2sused = 1U;
 8000a4a:	bf08      	it	eq
 8000a4c:	2601      	moveq	r6, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8000a4e:	f013 0504 	ands.w	r5, r3, #4
 8000a52:	d012      	beq.n	8000a7a <HAL_RCCEx_PeriphCLKConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8000a54:	499b      	ldr	r1, [pc, #620]	; (8000cc4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8000a56:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8000a58:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8000a5c:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8000a60:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8000a64:	ea42 0205 	orr.w	r2, r2, r5
    {
      plli2sused = 1U;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8000a68:	bf18      	it	ne
 8000a6a:	fab5 f585 	clzne	r5, r5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8000a6e:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8000a72:	bf12      	itee	ne
 8000a74:	096d      	lsrne	r5, r5, #5
  uint32_t pllsaiused = 0U;
 8000a76:	2500      	moveq	r5, #0
      plli2sused = 1U;
 8000a78:	2601      	moveq	r6, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8000a7a:	0718      	lsls	r0, r3, #28
 8000a7c:	d50f      	bpl.n	8000a9e <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8000a7e:	4891      	ldr	r0, [pc, #580]	; (8000cc4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8000a80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000a82:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8000a86:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8000a8a:	430a      	orrs	r2, r1

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8000a8c:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8000a90:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8000a94:	f000 8109 	beq.w	8000caa <HAL_RCCEx_PeriphCLKConfig+0x29e>
      plli2sused = 1U;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1U;
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	2501      	moveq	r5, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000a9e:	0699      	lsls	r1, r3, #26
 8000aa0:	d533      	bpl.n	8000b0a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	9301      	str	r3, [sp, #4]
 8000aa6:	4b87      	ldr	r3, [pc, #540]	; (8000cc4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8000aa8:	4f87      	ldr	r7, [pc, #540]	; (8000cc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8000aaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000aac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ab0:	641a      	str	r2, [r3, #64]	; 0x40
 8000ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab8:	9301      	str	r3, [sp, #4]
 8000aba:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ac2:	603b      	str	r3, [r7, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000ac4:	f002 fc7a 	bl	80033bc <HAL_GetTick>
 8000ac8:	4680      	mov	r8, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	05da      	lsls	r2, r3, #23
 8000ace:	f140 80ee 	bpl.w	8000cae <HAL_RCCEx_PeriphCLKConfig+0x2a2>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000ad2:	4f7c      	ldr	r7, [pc, #496]	; (8000cc4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8000ad4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000ad6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000ada:	f040 80fb 	bne.w	8000cd4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000ade:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ae0:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8000ae4:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8000ae8:	4a76      	ldr	r2, [pc, #472]	; (8000cc4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8000aea:	f040 8116 	bne.w	8000d1a <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8000aee:	6891      	ldr	r1, [r2, #8]
 8000af0:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8000af4:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8000af8:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8000afc:	4301      	orrs	r1, r0
 8000afe:	6091      	str	r1, [r2, #8]
 8000b00:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8000b02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000b06:	430b      	orrs	r3, r1
 8000b08:	6713      	str	r3, [r2, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8000b0a:	6823      	ldr	r3, [r4, #0]
 8000b0c:	06d9      	lsls	r1, r3, #27
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8000b0e:	bf42      	ittt	mi
 8000b10:	4b6e      	ldrmi	r3, [pc, #440]	; (8000ccc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8000b12:	f894 2058 	ldrbmi.w	r2, [r4, #88]	; 0x58
 8000b16:	601a      	strmi	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8000b18:	6823      	ldr	r3, [r4, #0]
 8000b1a:	061a      	lsls	r2, r3, #24
 8000b1c:	d508      	bpl.n	8000b30 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8000b1e:	4969      	ldr	r1, [pc, #420]	; (8000cc4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8000b20:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8000b22:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 8000b26:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8000b2a:	4302      	orrs	r2, r0
 8000b2c:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8000b30:	065f      	lsls	r7, r3, #25
 8000b32:	d508      	bpl.n	8000b46 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8000b34:	4963      	ldr	r1, [pc, #396]	; (8000cc4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8000b36:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8000b38:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 8000b3c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8000b40:	4302      	orrs	r2, r0
 8000b42:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8000b46:	05d8      	lsls	r0, r3, #23
 8000b48:	d50c      	bpl.n	8000b64 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8000b4a:	485e      	ldr	r0, [pc, #376]	; (8000cc4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8000b4c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8000b4e:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 8000b52:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 8000b56:	430a      	orrs	r2, r1

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
    {
      pllsaiused = 1U;
 8000b58:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8000b5c:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
      pllsaiused = 1U;
 8000b60:	bf08      	it	eq
 8000b62:	2501      	moveq	r5, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8000b64:	0599      	lsls	r1, r3, #22
 8000b66:	d508      	bpl.n	8000b7a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8000b68:	4956      	ldr	r1, [pc, #344]	; (8000cc4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8000b6a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8000b6c:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 8000b70:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8000b74:	4302      	orrs	r2, r0
 8000b76:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8000b7a:	055a      	lsls	r2, r3, #21
 8000b7c:	f100 80d1 	bmi.w	8000d22 <HAL_RCCEx_PeriphCLKConfig+0x316>
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8000b80:	2e01      	cmp	r6, #1
 8000b82:	f040 80dc 	bne.w	8000d3e <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8000b86:	4e52      	ldr	r6, [pc, #328]	; (8000cd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8000b88:	4f4e      	ldr	r7, [pc, #312]	; (8000cc4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
    __HAL_RCC_PLLI2S_DISABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8000b8e:	f002 fc15 	bl	80033bc <HAL_GetTick>
 8000b92:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	011b      	lsls	r3, r3, #4
 8000b98:	f100 8125 	bmi.w	8000de6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8000b9c:	6822      	ldr	r2, [r4, #0]
 8000b9e:	07d0      	lsls	r0, r2, #31
 8000ba0:	d501      	bpl.n	8000ba6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
 8000ba2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000ba4:	b11b      	cbz	r3, 8000bae <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8000ba6:	0791      	lsls	r1, r2, #30
 8000ba8:	d515      	bpl.n	8000bd6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8000baa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000bac:	b99b      	cbnz	r3, 8000bd6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8000bae:	4945      	ldr	r1, [pc, #276]	; (8000cc4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8000bb0:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8000bb4:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8000bb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000bbc:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8000bc0:	4303      	orrs	r3, r0
 8000bc2:	6860      	ldr	r0, [r4, #4]
 8000bc4:	4303      	orrs	r3, r0
 8000bc6:	68a0      	ldr	r0, [r4, #8]
 8000bc8:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8000bcc:	6960      	ldr	r0, [r4, #20]
 8000bce:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 8000bd2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8000bd6:	0753      	lsls	r3, r2, #29
 8000bd8:	d503      	bpl.n	8000be2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 8000bda:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000bdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000be0:	d005      	beq.n	8000bee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8000be2:	0717      	lsls	r7, r2, #28
 8000be4:	d520      	bpl.n	8000c28 <HAL_RCCEx_PeriphCLKConfig+0x21c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8000be6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000be8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000bec:	d11c      	bne.n	8000c28 <HAL_RCCEx_PeriphCLKConfig+0x21c>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8000bee:	4935      	ldr	r1, [pc, #212]	; (8000cc4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8000bf0:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8000bf4:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8000bf8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000bfc:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8000c00:	4303      	orrs	r3, r0
 8000c02:	6860      	ldr	r0, [r4, #4]
 8000c04:	4303      	orrs	r3, r0
 8000c06:	68a0      	ldr	r0, [r4, #8]
 8000c08:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8000c0c:	6920      	ldr	r0, [r4, #16]
 8000c0e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8000c12:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8000c16:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8000c1a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000c1c:	f020 001f 	bic.w	r0, r0, #31
 8000c20:	3b01      	subs	r3, #1
 8000c22:	4303      	orrs	r3, r0
 8000c24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8000c28:	0550      	lsls	r0, r2, #21
 8000c2a:	d51b      	bpl.n	8000c64 <HAL_RCCEx_PeriphCLKConfig+0x258>
 8000c2c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000c2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000c32:	d117      	bne.n	8000c64 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8000c34:	4823      	ldr	r0, [pc, #140]	; (8000cc4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8000c36:	6867      	ldr	r7, [r4, #4]
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8000c38:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8000c3c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8000c40:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8000c44:	433b      	orrs	r3, r7
 8000c46:	68a7      	ldr	r7, [r4, #8]
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8000c48:	f3c1 4101 	ubfx	r1, r1, #16, #2
 8000c4c:	3101      	adds	r1, #1
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8000c4e:	ea43 1387 	orr.w	r3, r3, r7, lsl #6
 8000c52:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8000c56:	68e1      	ldr	r1, [r4, #12]
 8000c58:	0849      	lsrs	r1, r1, #1
 8000c5a:	3901      	subs	r1, #1
 8000c5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c60:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8000c64:	0511      	lsls	r1, r2, #20
 8000c66:	d511      	bpl.n	8000c8c <HAL_RCCEx_PeriphCLKConfig+0x280>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8000c68:	6923      	ldr	r3, [r4, #16]
 8000c6a:	68a2      	ldr	r2, [r4, #8]
 8000c6c:	061b      	lsls	r3, r3, #24
 8000c6e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000c72:	6862      	ldr	r2, [r4, #4]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	6962      	ldr	r2, [r4, #20]
 8000c78:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8000c7c:	68e2      	ldr	r2, [r4, #12]
 8000c7e:	0852      	lsrs	r2, r2, #1
 8000c80:	3a01      	subs	r2, #1
 8000c82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c86:	4a0f      	ldr	r2, [pc, #60]	; (8000cc4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8000c88:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	6033      	str	r3, [r6, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8000c90:	f002 fb94 	bl	80033bc <HAL_GetTick>
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8000c94:	4e0b      	ldr	r6, [pc, #44]	; (8000cc4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
    tickstart = HAL_GetTick();
 8000c96:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8000c98:	6833      	ldr	r3, [r6, #0]
 8000c9a:	011a      	lsls	r2, r3, #4
 8000c9c:	d453      	bmi.n	8000d46 <HAL_RCCEx_PeriphCLKConfig+0x33a>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8000c9e:	f002 fb8d 	bl	80033bc <HAL_GetTick>
 8000ca2:	1bc0      	subs	r0, r0, r7
 8000ca4:	2802      	cmp	r0, #2
 8000ca6:	d9f7      	bls.n	8000c98 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8000ca8:	e008      	b.n	8000cbc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      plli2sused = 1U;
 8000caa:	2601      	movs	r6, #1
 8000cac:	e6f7      	b.n	8000a9e <HAL_RCCEx_PeriphCLKConfig+0x92>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000cae:	f002 fb85 	bl	80033bc <HAL_GetTick>
 8000cb2:	eba0 0008 	sub.w	r0, r0, r8
 8000cb6:	2802      	cmp	r0, #2
 8000cb8:	f67f af07 	bls.w	8000aca <HAL_RCCEx_PeriphCLKConfig+0xbe>
        return HAL_TIMEOUT;
 8000cbc:	2003      	movs	r0, #3
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
}
 8000cbe:	b003      	add	sp, #12
 8000cc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000cc4:	40023800 	.word	0x40023800
 8000cc8:	40007000 	.word	0x40007000
 8000ccc:	424711e0 	.word	0x424711e0
 8000cd0:	42470068 	.word	0x42470068
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000cd4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000cd6:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	f43f aeff 	beq.w	8000ade <HAL_RCCEx_PeriphCLKConfig+0xd2>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000ce0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8000ce2:	4a4b      	ldr	r2, [pc, #300]	; (8000e10 <HAL_RCCEx_PeriphCLKConfig+0x404>)
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000ce8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000cec:	2100      	movs	r1, #0
 8000cee:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 8000cf0:	673b      	str	r3, [r7, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8000cf2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000cf4:	07db      	lsls	r3, r3, #31
 8000cf6:	f57f aef2 	bpl.w	8000ade <HAL_RCCEx_PeriphCLKConfig+0xd2>
        tickstart = HAL_GetTick();
 8000cfa:	f002 fb5f 	bl	80033bc <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000cfe:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8000d02:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000d06:	0798      	lsls	r0, r3, #30
 8000d08:	f53f aee9 	bmi.w	8000ade <HAL_RCCEx_PeriphCLKConfig+0xd2>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d0c:	f002 fb56 	bl	80033bc <HAL_GetTick>
 8000d10:	eba0 0008 	sub.w	r0, r0, r8
 8000d14:	4548      	cmp	r0, r9
 8000d16:	d9f5      	bls.n	8000d04 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8000d18:	e7d0      	b.n	8000cbc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000d1a:	6891      	ldr	r1, [r2, #8]
 8000d1c:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8000d20:	e6ed      	b.n	8000afe <HAL_RCCEx_PeriphCLKConfig+0xf2>
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8000d22:	483c      	ldr	r0, [pc, #240]	; (8000e14 <HAL_RCCEx_PeriphCLKConfig+0x408>)
 8000d24:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8000d26:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 8000d2a:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8000d2e:	430a      	orrs	r2, r1
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8000d30:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8000d34:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8000d38:	f47f af22 	bne.w	8000b80 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8000d3c:	e723      	b.n	8000b86 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8000d3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000d42:	f43f af20 	beq.w	8000b86 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  if(pllsaiused == 1U)
 8000d46:	2d01      	cmp	r5, #1
 8000d48:	d14b      	bne.n	8000de2 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    __HAL_RCC_PLLSAI_DISABLE();
 8000d4a:	4d33      	ldr	r5, [pc, #204]	; (8000e18 <HAL_RCCEx_PeriphCLKConfig+0x40c>)
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8000d4c:	4e31      	ldr	r6, [pc, #196]	; (8000e14 <HAL_RCCEx_PeriphCLKConfig+0x408>)
    __HAL_RCC_PLLSAI_DISABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8000d52:	f002 fb33 	bl	80033bc <HAL_GetTick>
 8000d56:	4607      	mov	r7, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8000d58:	6833      	ldr	r3, [r6, #0]
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	d44b      	bmi.n	8000df6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8000d5e:	6821      	ldr	r1, [r4, #0]
 8000d60:	074e      	lsls	r6, r1, #29
 8000d62:	d501      	bpl.n	8000d68 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8000d64:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000d66:	b11b      	cbz	r3, 8000d70 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8000d68:	0708      	lsls	r0, r1, #28
 8000d6a:	d51a      	bpl.n	8000da2 <HAL_RCCEx_PeriphCLKConfig+0x396>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8000d6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000d6e:	b9c3      	cbnz	r3, 8000da2 <HAL_RCCEx_PeriphCLKConfig+0x396>
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8000d70:	4a28      	ldr	r2, [pc, #160]	; (8000e14 <HAL_RCCEx_PeriphCLKConfig+0x408>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8000d72:	69a0      	ldr	r0, [r4, #24]
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8000d74:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8000d78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d7c:	4303      	orrs	r3, r0
 8000d7e:	69e0      	ldr	r0, [r4, #28]
 8000d80:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8000d84:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000d86:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8000d8a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8000d8e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8000d92:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8000d94:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8000d98:	3801      	subs	r0, #1
 8000d9a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8000d9e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8000da2:	05ca      	lsls	r2, r1, #23
 8000da4:	d514      	bpl.n	8000dd0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8000da6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000da8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000dac:	d110      	bne.n	8000dd0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8000dae:	4919      	ldr	r1, [pc, #100]	; (8000e14 <HAL_RCCEx_PeriphCLKConfig+0x408>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8000db0:	69a2      	ldr	r2, [r4, #24]
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8000db2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8000db6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	69e2      	ldr	r2, [r4, #28]
 8000dbe:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000dc2:	6a22      	ldr	r2, [r4, #32]
 8000dc4:	0852      	lsrs	r2, r2, #1
 8000dc6:	3a01      	subs	r2, #1
 8000dc8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    __HAL_RCC_PLLSAI_ENABLE();
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8000dd4:	f002 faf2 	bl	80033bc <HAL_GetTick>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8000dd8:	4c0e      	ldr	r4, [pc, #56]	; (8000e14 <HAL_RCCEx_PeriphCLKConfig+0x408>)
    tickstart = HAL_GetTick();
 8000dda:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8000ddc:	6823      	ldr	r3, [r4, #0]
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	d50f      	bpl.n	8000e02 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
  return HAL_OK;
 8000de2:	2000      	movs	r0, #0
 8000de4:	e76b      	b.n	8000cbe <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8000de6:	f002 fae9 	bl	80033bc <HAL_GetTick>
 8000dea:	eba0 0008 	sub.w	r0, r0, r8
 8000dee:	2802      	cmp	r0, #2
 8000df0:	f67f aed0 	bls.w	8000b94 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8000df4:	e762      	b.n	8000cbc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8000df6:	f002 fae1 	bl	80033bc <HAL_GetTick>
 8000dfa:	1bc0      	subs	r0, r0, r7
 8000dfc:	2802      	cmp	r0, #2
 8000dfe:	d9ab      	bls.n	8000d58 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8000e00:	e75c      	b.n	8000cbc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8000e02:	f002 fadb 	bl	80033bc <HAL_GetTick>
 8000e06:	1b40      	subs	r0, r0, r5
 8000e08:	2802      	cmp	r0, #2
 8000e0a:	d9e7      	bls.n	8000ddc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8000e0c:	e756      	b.n	8000cbc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8000e0e:	bf00      	nop
 8000e10:	42470e40 	.word	0x42470e40
 8000e14:	40023800 	.word	0x40023800
 8000e18:	42470070 	.word	0x42470070

08000e1c <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e1c:	4920      	ldr	r1, [pc, #128]	; (8000ea0 <HAL_RCC_GetSysClockFreq+0x84>)
{
 8000e1e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e20:	688b      	ldr	r3, [r1, #8]
 8000e22:	f003 030c 	and.w	r3, r3, #12
 8000e26:	2b08      	cmp	r3, #8
 8000e28:	d007      	beq.n	8000e3a <HAL_RCC_GetSysClockFreq+0x1e>
 8000e2a:	2b0c      	cmp	r3, #12
 8000e2c:	d020      	beq.n	8000e70 <HAL_RCC_GetSysClockFreq+0x54>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000e2e:	481d      	ldr	r0, [pc, #116]	; (8000ea4 <HAL_RCC_GetSysClockFreq+0x88>)
 8000e30:	4a1d      	ldr	r2, [pc, #116]	; (8000ea8 <HAL_RCC_GetSysClockFreq+0x8c>)
 8000e32:	2b04      	cmp	r3, #4
 8000e34:	bf18      	it	ne
 8000e36:	4610      	movne	r0, r2
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000e38:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e3a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e3c:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e3e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e40:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e44:	bf14      	ite	ne
 8000e46:	4817      	ldrne	r0, [pc, #92]	; (8000ea4 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e48:	4817      	ldreq	r0, [pc, #92]	; (8000ea8 <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e4a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000e4e:	bf18      	it	ne
 8000e50:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e52:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e56:	fba1 0100 	umull	r0, r1, r1, r0
 8000e5a:	f7ff f9d9 	bl	8000210 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000e5e:	4b10      	ldr	r3, [pc, #64]	; (8000ea0 <HAL_RCC_GetSysClockFreq+0x84>)
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000e66:	3301      	adds	r3, #1
 8000e68:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllr;
 8000e6a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8000e6e:	e7e3      	b.n	8000e38 <HAL_RCC_GetSysClockFreq+0x1c>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e70:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e72:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e74:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e76:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e7a:	bf14      	ite	ne
 8000e7c:	4809      	ldrne	r0, [pc, #36]	; (8000ea4 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e7e:	480a      	ldreq	r0, [pc, #40]	; (8000ea8 <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e80:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000e84:	bf18      	it	ne
 8000e86:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e88:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e8c:	fba1 0100 	umull	r0, r1, r1, r0
 8000e90:	f7ff f9be 	bl	8000210 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8000e94:	4b02      	ldr	r3, [pc, #8]	; (8000ea0 <HAL_RCC_GetSysClockFreq+0x84>)
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8000e9c:	e7e5      	b.n	8000e6a <HAL_RCC_GetSysClockFreq+0x4e>
 8000e9e:	bf00      	nop
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	007a1200 	.word	0x007a1200
 8000ea8:	00f42400 	.word	0x00f42400

08000eac <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eac:	6803      	ldr	r3, [r0, #0]
{
 8000eae:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eb2:	07df      	lsls	r7, r3, #31
{
 8000eb4:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eb6:	d410      	bmi.n	8000eda <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000eb8:	6823      	ldr	r3, [r4, #0]
 8000eba:	079e      	lsls	r6, r3, #30
 8000ebc:	d467      	bmi.n	8000f8e <HAL_RCC_OscConfig+0xe2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ebe:	6823      	ldr	r3, [r4, #0]
 8000ec0:	071a      	lsls	r2, r3, #28
 8000ec2:	f100 80b2 	bmi.w	800102a <HAL_RCC_OscConfig+0x17e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ec6:	6823      	ldr	r3, [r4, #0]
 8000ec8:	075b      	lsls	r3, r3, #29
 8000eca:	f100 80d0 	bmi.w	800106e <HAL_RCC_OscConfig+0x1c2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ece:	69a2      	ldr	r2, [r4, #24]
 8000ed0:	2a00      	cmp	r2, #0
 8000ed2:	f040 8139 	bne.w	8001148 <HAL_RCC_OscConfig+0x29c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	e01e      	b.n	8000f18 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000eda:	4b97      	ldr	r3, [pc, #604]	; (8001138 <HAL_RCC_OscConfig+0x28c>)
 8000edc:	689a      	ldr	r2, [r3, #8]
 8000ede:	f002 020c 	and.w	r2, r2, #12
 8000ee2:	2a04      	cmp	r2, #4
 8000ee4:	d010      	beq.n	8000f08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000ee6:	689a      	ldr	r2, [r3, #8]
 8000ee8:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000eec:	2a08      	cmp	r2, #8
 8000eee:	d102      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x4a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	025d      	lsls	r5, r3, #9
 8000ef4:	d408      	bmi.n	8000f08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ef6:	4b90      	ldr	r3, [pc, #576]	; (8001138 <HAL_RCC_OscConfig+0x28c>)
 8000ef8:	689a      	ldr	r2, [r3, #8]
 8000efa:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000efe:	2a0c      	cmp	r2, #12
 8000f00:	d10d      	bne.n	8000f1e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f02:	685a      	ldr	r2, [r3, #4]
 8000f04:	0250      	lsls	r0, r2, #9
 8000f06:	d50a      	bpl.n	8000f1e <HAL_RCC_OscConfig+0x72>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f08:	4b8b      	ldr	r3, [pc, #556]	; (8001138 <HAL_RCC_OscConfig+0x28c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	0399      	lsls	r1, r3, #14
 8000f0e:	d5d3      	bpl.n	8000eb8 <HAL_RCC_OscConfig+0xc>
 8000f10:	6863      	ldr	r3, [r4, #4]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d1d0      	bne.n	8000eb8 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000f16:	2001      	movs	r0, #1
}
 8000f18:	b002      	add	sp, #8
 8000f1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f1e:	6862      	ldr	r2, [r4, #4]
 8000f20:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000f24:	d111      	bne.n	8000f4a <HAL_RCC_OscConfig+0x9e>
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000f2c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f2e:	f002 fa45 	bl	80033bc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f32:	4d81      	ldr	r5, [pc, #516]	; (8001138 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8000f34:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f36:	682b      	ldr	r3, [r5, #0]
 8000f38:	039a      	lsls	r2, r3, #14
 8000f3a:	d4bd      	bmi.n	8000eb8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f3c:	f002 fa3e 	bl	80033bc <HAL_GetTick>
 8000f40:	1b80      	subs	r0, r0, r6
 8000f42:	2864      	cmp	r0, #100	; 0x64
 8000f44:	d9f7      	bls.n	8000f36 <HAL_RCC_OscConfig+0x8a>
            return HAL_TIMEOUT;
 8000f46:	2003      	movs	r0, #3
 8000f48:	e7e6      	b.n	8000f18 <HAL_RCC_OscConfig+0x6c>
 8000f4a:	4d7b      	ldr	r5, [pc, #492]	; (8001138 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f4c:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000f50:	682b      	ldr	r3, [r5, #0]
 8000f52:	d107      	bne.n	8000f64 <HAL_RCC_OscConfig+0xb8>
 8000f54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f58:	602b      	str	r3, [r5, #0]
 8000f5a:	682b      	ldr	r3, [r5, #0]
 8000f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f60:	602b      	str	r3, [r5, #0]
 8000f62:	e7e4      	b.n	8000f2e <HAL_RCC_OscConfig+0x82>
 8000f64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f68:	602b      	str	r3, [r5, #0]
 8000f6a:	682b      	ldr	r3, [r5, #0]
 8000f6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f70:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f72:	2a00      	cmp	r2, #0
 8000f74:	d1db      	bne.n	8000f2e <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8000f76:	f002 fa21 	bl	80033bc <HAL_GetTick>
 8000f7a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f7c:	682b      	ldr	r3, [r5, #0]
 8000f7e:	039b      	lsls	r3, r3, #14
 8000f80:	d59a      	bpl.n	8000eb8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f82:	f002 fa1b 	bl	80033bc <HAL_GetTick>
 8000f86:	1b80      	subs	r0, r0, r6
 8000f88:	2864      	cmp	r0, #100	; 0x64
 8000f8a:	d9f7      	bls.n	8000f7c <HAL_RCC_OscConfig+0xd0>
 8000f8c:	e7db      	b.n	8000f46 <HAL_RCC_OscConfig+0x9a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8000f8e:	4b6a      	ldr	r3, [pc, #424]	; (8001138 <HAL_RCC_OscConfig+0x28c>)
 8000f90:	689a      	ldr	r2, [r3, #8]
 8000f92:	f012 0f0c 	tst.w	r2, #12
 8000f96:	d010      	beq.n	8000fba <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000f98:	689a      	ldr	r2, [r3, #8]
 8000f9a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8000f9e:	2a08      	cmp	r2, #8
 8000fa0:	d102      	bne.n	8000fa8 <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	025f      	lsls	r7, r3, #9
 8000fa6:	d508      	bpl.n	8000fba <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fa8:	4a63      	ldr	r2, [pc, #396]	; (8001138 <HAL_RCC_OscConfig+0x28c>)
 8000faa:	6893      	ldr	r3, [r2, #8]
 8000fac:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000fb0:	2b0c      	cmp	r3, #12
 8000fb2:	d111      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x12c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fb4:	6853      	ldr	r3, [r2, #4]
 8000fb6:	025e      	lsls	r6, r3, #9
 8000fb8:	d40e      	bmi.n	8000fd8 <HAL_RCC_OscConfig+0x12c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fba:	4b5f      	ldr	r3, [pc, #380]	; (8001138 <HAL_RCC_OscConfig+0x28c>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	0795      	lsls	r5, r2, #30
 8000fc0:	d502      	bpl.n	8000fc8 <HAL_RCC_OscConfig+0x11c>
 8000fc2:	68e2      	ldr	r2, [r4, #12]
 8000fc4:	2a01      	cmp	r2, #1
 8000fc6:	d1a6      	bne.n	8000f16 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	6921      	ldr	r1, [r4, #16]
 8000fcc:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000fd0:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000fd4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fd6:	e772      	b.n	8000ebe <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000fd8:	68e2      	ldr	r2, [r4, #12]
 8000fda:	4b58      	ldr	r3, [pc, #352]	; (800113c <HAL_RCC_OscConfig+0x290>)
 8000fdc:	b1b2      	cbz	r2, 800100c <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_ENABLE();
 8000fde:	2201      	movs	r2, #1
 8000fe0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000fe2:	f002 f9eb 	bl	80033bc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fe6:	4d54      	ldr	r5, [pc, #336]	; (8001138 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8000fe8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fea:	682b      	ldr	r3, [r5, #0]
 8000fec:	0798      	lsls	r0, r3, #30
 8000fee:	d507      	bpl.n	8001000 <HAL_RCC_OscConfig+0x154>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ff0:	682b      	ldr	r3, [r5, #0]
 8000ff2:	6922      	ldr	r2, [r4, #16]
 8000ff4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000ff8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000ffc:	602b      	str	r3, [r5, #0]
 8000ffe:	e75e      	b.n	8000ebe <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001000:	f002 f9dc 	bl	80033bc <HAL_GetTick>
 8001004:	1b80      	subs	r0, r0, r6
 8001006:	2802      	cmp	r0, #2
 8001008:	d9ef      	bls.n	8000fea <HAL_RCC_OscConfig+0x13e>
 800100a:	e79c      	b.n	8000f46 <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_HSI_DISABLE();
 800100c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800100e:	f002 f9d5 	bl	80033bc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001012:	4d49      	ldr	r5, [pc, #292]	; (8001138 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8001014:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001016:	682b      	ldr	r3, [r5, #0]
 8001018:	0799      	lsls	r1, r3, #30
 800101a:	f57f af50 	bpl.w	8000ebe <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800101e:	f002 f9cd 	bl	80033bc <HAL_GetTick>
 8001022:	1b80      	subs	r0, r0, r6
 8001024:	2802      	cmp	r0, #2
 8001026:	d9f6      	bls.n	8001016 <HAL_RCC_OscConfig+0x16a>
 8001028:	e78d      	b.n	8000f46 <HAL_RCC_OscConfig+0x9a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800102a:	6962      	ldr	r2, [r4, #20]
 800102c:	4b44      	ldr	r3, [pc, #272]	; (8001140 <HAL_RCC_OscConfig+0x294>)
 800102e:	b17a      	cbz	r2, 8001050 <HAL_RCC_OscConfig+0x1a4>
      __HAL_RCC_LSI_ENABLE();
 8001030:	2201      	movs	r2, #1
 8001032:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001034:	f002 f9c2 	bl	80033bc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001038:	4d3f      	ldr	r5, [pc, #252]	; (8001138 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 800103a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800103c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800103e:	079f      	lsls	r7, r3, #30
 8001040:	f53f af41 	bmi.w	8000ec6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001044:	f002 f9ba 	bl	80033bc <HAL_GetTick>
 8001048:	1b80      	subs	r0, r0, r6
 800104a:	2802      	cmp	r0, #2
 800104c:	d9f6      	bls.n	800103c <HAL_RCC_OscConfig+0x190>
 800104e:	e77a      	b.n	8000f46 <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_LSI_DISABLE();
 8001050:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001052:	f002 f9b3 	bl	80033bc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001056:	4d38      	ldr	r5, [pc, #224]	; (8001138 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8001058:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800105a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800105c:	0798      	lsls	r0, r3, #30
 800105e:	f57f af32 	bpl.w	8000ec6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001062:	f002 f9ab 	bl	80033bc <HAL_GetTick>
 8001066:	1b80      	subs	r0, r0, r6
 8001068:	2802      	cmp	r0, #2
 800106a:	d9f6      	bls.n	800105a <HAL_RCC_OscConfig+0x1ae>
 800106c:	e76b      	b.n	8000f46 <HAL_RCC_OscConfig+0x9a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800106e:	4b32      	ldr	r3, [pc, #200]	; (8001138 <HAL_RCC_OscConfig+0x28c>)
 8001070:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001072:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001076:	d128      	bne.n	80010ca <HAL_RCC_OscConfig+0x21e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001078:	9201      	str	r2, [sp, #4]
 800107a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800107c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001080:	641a      	str	r2, [r3, #64]	; 0x40
 8001082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001088:	9301      	str	r3, [sp, #4]
 800108a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800108c:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800108e:	4d2d      	ldr	r5, [pc, #180]	; (8001144 <HAL_RCC_OscConfig+0x298>)
 8001090:	682b      	ldr	r3, [r5, #0]
 8001092:	05d9      	lsls	r1, r3, #23
 8001094:	d51b      	bpl.n	80010ce <HAL_RCC_OscConfig+0x222>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001096:	68a3      	ldr	r3, [r4, #8]
 8001098:	4d27      	ldr	r5, [pc, #156]	; (8001138 <HAL_RCC_OscConfig+0x28c>)
 800109a:	2b01      	cmp	r3, #1
 800109c:	d127      	bne.n	80010ee <HAL_RCC_OscConfig+0x242>
 800109e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80010a6:	f002 f989 	bl	80033bc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010aa:	4d23      	ldr	r5, [pc, #140]	; (8001138 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 80010ac:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010ae:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010b2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80010b4:	079b      	lsls	r3, r3, #30
 80010b6:	d539      	bpl.n	800112c <HAL_RCC_OscConfig+0x280>
    if(pwrclkchanged == SET)
 80010b8:	2e00      	cmp	r6, #0
 80010ba:	f43f af08 	beq.w	8000ece <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 80010be:	4a1e      	ldr	r2, [pc, #120]	; (8001138 <HAL_RCC_OscConfig+0x28c>)
 80010c0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80010c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010c6:	6413      	str	r3, [r2, #64]	; 0x40
 80010c8:	e701      	b.n	8000ece <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 80010ca:	2600      	movs	r6, #0
 80010cc:	e7df      	b.n	800108e <HAL_RCC_OscConfig+0x1e2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010ce:	682b      	ldr	r3, [r5, #0]
 80010d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010d4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80010d6:	f002 f971 	bl	80033bc <HAL_GetTick>
 80010da:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010dc:	682b      	ldr	r3, [r5, #0]
 80010de:	05da      	lsls	r2, r3, #23
 80010e0:	d4d9      	bmi.n	8001096 <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010e2:	f002 f96b 	bl	80033bc <HAL_GetTick>
 80010e6:	1bc0      	subs	r0, r0, r7
 80010e8:	2802      	cmp	r0, #2
 80010ea:	d9f7      	bls.n	80010dc <HAL_RCC_OscConfig+0x230>
 80010ec:	e72b      	b.n	8000f46 <HAL_RCC_OscConfig+0x9a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010ee:	2b05      	cmp	r3, #5
 80010f0:	d104      	bne.n	80010fc <HAL_RCC_OscConfig+0x250>
 80010f2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80010f4:	f043 0304 	orr.w	r3, r3, #4
 80010f8:	672b      	str	r3, [r5, #112]	; 0x70
 80010fa:	e7d0      	b.n	800109e <HAL_RCC_OscConfig+0x1f2>
 80010fc:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80010fe:	f022 0201 	bic.w	r2, r2, #1
 8001102:	672a      	str	r2, [r5, #112]	; 0x70
 8001104:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001106:	f022 0204 	bic.w	r2, r2, #4
 800110a:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800110c:	2b00      	cmp	r3, #0
 800110e:	d1ca      	bne.n	80010a6 <HAL_RCC_OscConfig+0x1fa>
      tickstart = HAL_GetTick();
 8001110:	f002 f954 	bl	80033bc <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001114:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001118:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800111a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800111c:	0798      	lsls	r0, r3, #30
 800111e:	d5cb      	bpl.n	80010b8 <HAL_RCC_OscConfig+0x20c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001120:	f002 f94c 	bl	80033bc <HAL_GetTick>
 8001124:	1bc0      	subs	r0, r0, r7
 8001126:	4540      	cmp	r0, r8
 8001128:	d9f7      	bls.n	800111a <HAL_RCC_OscConfig+0x26e>
 800112a:	e70c      	b.n	8000f46 <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800112c:	f002 f946 	bl	80033bc <HAL_GetTick>
 8001130:	1bc0      	subs	r0, r0, r7
 8001132:	4540      	cmp	r0, r8
 8001134:	d9bd      	bls.n	80010b2 <HAL_RCC_OscConfig+0x206>
 8001136:	e706      	b.n	8000f46 <HAL_RCC_OscConfig+0x9a>
 8001138:	40023800 	.word	0x40023800
 800113c:	42470000 	.word	0x42470000
 8001140:	42470e80 	.word	0x42470e80
 8001144:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001148:	4d23      	ldr	r5, [pc, #140]	; (80011d8 <HAL_RCC_OscConfig+0x32c>)
 800114a:	68ab      	ldr	r3, [r5, #8]
 800114c:	f003 030c 	and.w	r3, r3, #12
 8001150:	2b08      	cmp	r3, #8
 8001152:	f43f aee0 	beq.w	8000f16 <HAL_RCC_OscConfig+0x6a>
 8001156:	4e21      	ldr	r6, [pc, #132]	; (80011dc <HAL_RCC_OscConfig+0x330>)
 8001158:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800115a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800115c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800115e:	d12d      	bne.n	80011bc <HAL_RCC_OscConfig+0x310>
        tickstart = HAL_GetTick();
 8001160:	f002 f92c 	bl	80033bc <HAL_GetTick>
 8001164:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001166:	682b      	ldr	r3, [r5, #0]
 8001168:	0199      	lsls	r1, r3, #6
 800116a:	d421      	bmi.n	80011b0 <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800116c:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8001170:	4313      	orrs	r3, r2
 8001172:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001174:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001178:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800117a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800117e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001180:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001184:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001186:	4c14      	ldr	r4, [pc, #80]	; (80011d8 <HAL_RCC_OscConfig+0x32c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001188:	0852      	lsrs	r2, r2, #1
 800118a:	3a01      	subs	r2, #1
 800118c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001190:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001192:	2301      	movs	r3, #1
 8001194:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001196:	f002 f911 	bl	80033bc <HAL_GetTick>
 800119a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800119c:	6823      	ldr	r3, [r4, #0]
 800119e:	019a      	lsls	r2, r3, #6
 80011a0:	f53f ae99 	bmi.w	8000ed6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011a4:	f002 f90a 	bl	80033bc <HAL_GetTick>
 80011a8:	1b40      	subs	r0, r0, r5
 80011aa:	2802      	cmp	r0, #2
 80011ac:	d9f6      	bls.n	800119c <HAL_RCC_OscConfig+0x2f0>
 80011ae:	e6ca      	b.n	8000f46 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011b0:	f002 f904 	bl	80033bc <HAL_GetTick>
 80011b4:	1bc0      	subs	r0, r0, r7
 80011b6:	2802      	cmp	r0, #2
 80011b8:	d9d5      	bls.n	8001166 <HAL_RCC_OscConfig+0x2ba>
 80011ba:	e6c4      	b.n	8000f46 <HAL_RCC_OscConfig+0x9a>
        tickstart = HAL_GetTick();
 80011bc:	f002 f8fe 	bl	80033bc <HAL_GetTick>
 80011c0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011c2:	682b      	ldr	r3, [r5, #0]
 80011c4:	019b      	lsls	r3, r3, #6
 80011c6:	f57f ae86 	bpl.w	8000ed6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011ca:	f002 f8f7 	bl	80033bc <HAL_GetTick>
 80011ce:	1b00      	subs	r0, r0, r4
 80011d0:	2802      	cmp	r0, #2
 80011d2:	d9f6      	bls.n	80011c2 <HAL_RCC_OscConfig+0x316>
 80011d4:	e6b7      	b.n	8000f46 <HAL_RCC_OscConfig+0x9a>
 80011d6:	bf00      	nop
 80011d8:	40023800 	.word	0x40023800
 80011dc:	42470060 	.word	0x42470060

080011e0 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80011e0:	6802      	ldr	r2, [r0, #0]
{
 80011e2:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80011e4:	68d3      	ldr	r3, [r2, #12]
 80011e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80011ea:	60d3      	str	r3, [r2, #12]
{
 80011ec:	4604      	mov	r4, r0

    /* Get tick */
    tickstart = HAL_GetTick();
 80011ee:	f002 f8e5 	bl	80033bc <HAL_GetTick>
 80011f2:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80011f4:	6823      	ldr	r3, [r4, #0]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	069b      	lsls	r3, r3, #26
 80011fa:	d501      	bpl.n	8001200 <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 80011fc:	2000      	movs	r0, #0
}
 80011fe:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001200:	f002 f8dc 	bl	80033bc <HAL_GetTick>
 8001204:	1b40      	subs	r0, r0, r5
 8001206:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800120a:	d9f3      	bls.n	80011f4 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 800120c:	2003      	movs	r0, #3
 800120e:	e7f6      	b.n	80011fe <HAL_RTC_WaitForSynchro+0x1e>

08001210 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8001210:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001212:	6803      	ldr	r3, [r0, #0]
 8001214:	68da      	ldr	r2, [r3, #12]
 8001216:	0652      	lsls	r2, r2, #25
{
 8001218:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800121a:	d501      	bpl.n	8001220 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800121c:	2000      	movs	r0, #0
}
 800121e:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8001220:	f04f 32ff 	mov.w	r2, #4294967295
 8001224:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8001226:	f002 f8c9 	bl	80033bc <HAL_GetTick>
 800122a:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800122c:	6823      	ldr	r3, [r4, #0]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	065b      	lsls	r3, r3, #25
 8001232:	d4f3      	bmi.n	800121c <RTC_EnterInitMode+0xc>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001234:	f002 f8c2 	bl	80033bc <HAL_GetTick>
 8001238:	1b40      	subs	r0, r0, r5
 800123a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800123e:	d9f5      	bls.n	800122c <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8001240:	2003      	movs	r0, #3
 8001242:	e7ec      	b.n	800121e <RTC_EnterInitMode+0xe>

08001244 <HAL_RTC_Init>:
{
 8001244:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8001246:	4604      	mov	r4, r0
 8001248:	b1b8      	cbz	r0, 800127a <HAL_RTC_Init+0x36>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800124a:	7f43      	ldrb	r3, [r0, #29]
 800124c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001250:	b913      	cbnz	r3, 8001258 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 8001252:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8001254:	f001 ffd2 	bl	80031fc <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001258:	2302      	movs	r3, #2
 800125a:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800125c:	6823      	ldr	r3, [r4, #0]
 800125e:	22ca      	movs	r2, #202	; 0xca
 8001260:	625a      	str	r2, [r3, #36]	; 0x24
 8001262:	2253      	movs	r2, #83	; 0x53
 8001264:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001266:	4620      	mov	r0, r4
 8001268:	f7ff ffd2 	bl	8001210 <RTC_EnterInitMode>
 800126c:	6823      	ldr	r3, [r4, #0]
 800126e:	4605      	mov	r5, r0
 8001270:	b128      	cbz	r0, 800127e <HAL_RTC_Init+0x3a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001272:	22ff      	movs	r2, #255	; 0xff
 8001274:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001276:	2304      	movs	r3, #4
 8001278:	7763      	strb	r3, [r4, #29]
     return HAL_ERROR;
 800127a:	2501      	movs	r5, #1
 800127c:	e02e      	b.n	80012dc <HAL_RTC_Init+0x98>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800127e:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001280:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001282:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8001286:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800128a:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800128c:	6862      	ldr	r2, [r4, #4]
 800128e:	6899      	ldr	r1, [r3, #8]
 8001290:	4302      	orrs	r2, r0
 8001292:	6960      	ldr	r0, [r4, #20]
 8001294:	4302      	orrs	r2, r0
 8001296:	430a      	orrs	r2, r1
 8001298:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800129a:	68e2      	ldr	r2, [r4, #12]
 800129c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800129e:	691a      	ldr	r2, [r3, #16]
 80012a0:	68a1      	ldr	r1, [r4, #8]
 80012a2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80012a6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80012a8:	68da      	ldr	r2, [r3, #12]
 80012aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012ae:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	069b      	lsls	r3, r3, #26
 80012b4:	d405      	bmi.n	80012c2 <HAL_RTC_Init+0x7e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80012b6:	4620      	mov	r0, r4
 80012b8:	f7ff ff92 	bl	80011e0 <HAL_RTC_WaitForSynchro>
 80012bc:	b108      	cbz	r0, 80012c2 <HAL_RTC_Init+0x7e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80012be:	6823      	ldr	r3, [r4, #0]
 80012c0:	e7d7      	b.n	8001272 <HAL_RTC_Init+0x2e>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80012c2:	6823      	ldr	r3, [r4, #0]
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80012c4:	69a1      	ldr	r1, [r4, #24]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80012c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80012cc:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80012ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012d0:	430a      	orrs	r2, r1
 80012d2:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80012d4:	22ff      	movs	r2, #255	; 0xff
 80012d6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80012d8:	2301      	movs	r3, #1
 80012da:	7763      	strb	r3, [r4, #29]
}
 80012dc:	4628      	mov	r0, r5
 80012de:	bd38      	pop	{r3, r4, r5, pc}

080012e0 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 80012e0:	2300      	movs	r3, #0

  while(Value >= 10U)
 80012e2:	2809      	cmp	r0, #9
 80012e4:	d803      	bhi.n	80012ee <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10U;
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80012e6:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 80012ea:	b2c0      	uxtb	r0, r0
 80012ec:	4770      	bx	lr
    Value -= 10U;
 80012ee:	380a      	subs	r0, #10
    bcdhigh++;
 80012f0:	3301      	adds	r3, #1
    Value -= 10U;
 80012f2:	b2c0      	uxtb	r0, r0
 80012f4:	e7f5      	b.n	80012e2 <RTC_ByteToBcd2+0x2>

080012f6 <HAL_RTC_SetTime>:
  __HAL_LOCK(hrtc);
 80012f6:	7f03      	ldrb	r3, [r0, #28]
 80012f8:	2b01      	cmp	r3, #1
{
 80012fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012fe:	4606      	mov	r6, r0
 8001300:	460f      	mov	r7, r1
 8001302:	f04f 0502 	mov.w	r5, #2
  __HAL_LOCK(hrtc);
 8001306:	d02e      	beq.n	8001366 <HAL_RTC_SetTime+0x70>
 8001308:	2301      	movs	r3, #1
 800130a:	6801      	ldr	r1, [r0, #0]
 800130c:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800130e:	7745      	strb	r5, [r0, #29]
 8001310:	7838      	ldrb	r0, [r7, #0]
 8001312:	787d      	ldrb	r5, [r7, #1]
 8001314:	78bc      	ldrb	r4, [r7, #2]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001316:	688b      	ldr	r3, [r1, #8]
  if(Format == RTC_FORMAT_BIN)
 8001318:	bb42      	cbnz	r2, 800136c <HAL_RTC_SetTime+0x76>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800131a:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sTime->TimeFormat = 0x00U;
 800131e:	bf08      	it	eq
 8001320:	70fb      	strbeq	r3, [r7, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001322:	f7ff ffdd 	bl	80012e0 <RTC_ByteToBcd2>
 8001326:	4680      	mov	r8, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001328:	4628      	mov	r0, r5
 800132a:	f7ff ffd9 	bl	80012e0 <RTC_ByteToBcd2>
 800132e:	4602      	mov	r2, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8001330:	4620      	mov	r0, r4
 8001332:	f7ff ffd5 	bl	80012e0 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8001336:	78fb      	ldrb	r3, [r7, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001338:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800133c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001340:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001344:	23ca      	movs	r3, #202	; 0xca
 8001346:	624b      	str	r3, [r1, #36]	; 0x24
 8001348:	2353      	movs	r3, #83	; 0x53
 800134a:	624b      	str	r3, [r1, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800134c:	4630      	mov	r0, r6
 800134e:	f7ff ff5f 	bl	8001210 <RTC_EnterInitMode>
 8001352:	6833      	ldr	r3, [r6, #0]
 8001354:	4605      	mov	r5, r0
 8001356:	b1b0      	cbz	r0, 8001386 <HAL_RTC_SetTime+0x90>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001358:	22ff      	movs	r2, #255	; 0xff
 800135a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800135c:	2304      	movs	r3, #4
 800135e:	7773      	strb	r3, [r6, #29]
    __HAL_UNLOCK(hrtc);
 8001360:	2300      	movs	r3, #0
 8001362:	7733      	strb	r3, [r6, #28]
        return HAL_ERROR;
 8001364:	2501      	movs	r5, #1
}
 8001366:	4628      	mov	r0, r5
 8001368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800136c:	f013 0340 	ands.w	r3, r3, #64	; 0x40
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001370:	ea4f 2505 	mov.w	r5, r5, lsl #8
      sTime->TimeFormat = 0x00U;
 8001374:	bf08      	it	eq
 8001376:	70fb      	strbeq	r3, [r7, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001378:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800137c:	4320      	orrs	r0, r4
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800137e:	78fc      	ldrb	r4, [r7, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001380:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8001384:	e7de      	b.n	8001344 <HAL_RTC_SetTime+0x4e>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001386:	f004 347f 	and.w	r4, r4, #2139062143	; 0x7f7f7f7f
 800138a:	f024 44fe 	bic.w	r4, r4, #2130706432	; 0x7f000000
 800138e:	601c      	str	r4, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8001390:	689a      	ldr	r2, [r3, #8]
 8001392:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001396:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001398:	e9d7 2003 	ldrd	r2, r0, [r7, #12]
 800139c:	6899      	ldr	r1, [r3, #8]
 800139e:	4302      	orrs	r2, r0
 80013a0:	430a      	orrs	r2, r1
 80013a2:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80013a4:	68da      	ldr	r2, [r3, #12]
 80013a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013aa:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	069b      	lsls	r3, r3, #26
 80013b0:	d40a      	bmi.n	80013c8 <HAL_RTC_SetTime+0xd2>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80013b2:	4630      	mov	r0, r6
 80013b4:	f7ff ff14 	bl	80011e0 <HAL_RTC_WaitForSynchro>
 80013b8:	b130      	cbz	r0, 80013c8 <HAL_RTC_SetTime+0xd2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80013ba:	6833      	ldr	r3, [r6, #0]
 80013bc:	22ff      	movs	r2, #255	; 0xff
 80013be:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80013c0:	2304      	movs	r3, #4
 80013c2:	7773      	strb	r3, [r6, #29]
        __HAL_UNLOCK(hrtc);
 80013c4:	7735      	strb	r5, [r6, #28]
 80013c6:	e7cd      	b.n	8001364 <HAL_RTC_SetTime+0x6e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80013c8:	6833      	ldr	r3, [r6, #0]
 80013ca:	22ff      	movs	r2, #255	; 0xff
 80013cc:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 80013ce:	2301      	movs	r3, #1
 80013d0:	7773      	strb	r3, [r6, #29]
   __HAL_UNLOCK(hrtc);
 80013d2:	2300      	movs	r3, #0
 80013d4:	7733      	strb	r3, [r6, #28]
   return HAL_OK;
 80013d6:	e7c6      	b.n	8001366 <HAL_RTC_SetTime+0x70>

080013d8 <HAL_RTC_SetDate>:
{
 80013d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 80013da:	7f03      	ldrb	r3, [r0, #28]
 80013dc:	2b01      	cmp	r3, #1
{
 80013de:	4606      	mov	r6, r0
 80013e0:	f04f 0502 	mov.w	r5, #2
 __HAL_LOCK(hrtc);
 80013e4:	d030      	beq.n	8001448 <HAL_RTC_SetDate+0x70>
 80013e6:	2301      	movs	r3, #1
 80013e8:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80013ea:	7745      	strb	r5, [r0, #29]
 80013ec:	780d      	ldrb	r5, [r1, #0]
 80013ee:	78c8      	ldrb	r0, [r1, #3]
 80013f0:	784c      	ldrb	r4, [r1, #1]
 80013f2:	788f      	ldrb	r7, [r1, #2]
 80013f4:	036d      	lsls	r5, r5, #13
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80013f6:	2a00      	cmp	r2, #0
 80013f8:	d147      	bne.n	800148a <HAL_RTC_SetDate+0xb2>
 80013fa:	06e2      	lsls	r2, r4, #27
 80013fc:	d503      	bpl.n	8001406 <HAL_RTC_SetDate+0x2e>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80013fe:	f024 0410 	bic.w	r4, r4, #16
 8001402:	340a      	adds	r4, #10
 8001404:	704c      	strb	r4, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001406:	f7ff ff6b 	bl	80012e0 <RTC_ByteToBcd2>
 800140a:	4602      	mov	r2, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800140c:	7848      	ldrb	r0, [r1, #1]
 800140e:	f7ff ff67 	bl	80012e0 <RTC_ByteToBcd2>
 8001412:	4604      	mov	r4, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8001414:	4638      	mov	r0, r7
 8001416:	f7ff ff63 	bl	80012e0 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800141a:	4328      	orrs	r0, r5
 800141c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001420:	6833      	ldr	r3, [r6, #0]
 8001422:	22ca      	movs	r2, #202	; 0xca
 8001424:	625a      	str	r2, [r3, #36]	; 0x24
 8001426:	2253      	movs	r2, #83	; 0x53
 8001428:	625a      	str	r2, [r3, #36]	; 0x24
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800142a:	ea40 2404 	orr.w	r4, r0, r4, lsl #8
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800142e:	4630      	mov	r0, r6
 8001430:	f7ff feee 	bl	8001210 <RTC_EnterInitMode>
 8001434:	6833      	ldr	r3, [r6, #0]
 8001436:	4605      	mov	r5, r0
 8001438:	b140      	cbz	r0, 800144c <HAL_RTC_SetDate+0x74>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800143a:	22ff      	movs	r2, #255	; 0xff
 800143c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800143e:	2304      	movs	r3, #4
 8001440:	7773      	strb	r3, [r6, #29]
    __HAL_UNLOCK(hrtc);
 8001442:	2300      	movs	r3, #0
 8001444:	7733      	strb	r3, [r6, #28]
        return HAL_ERROR;
 8001446:	2501      	movs	r5, #1
}
 8001448:	4628      	mov	r0, r5
 800144a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800144c:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 8001450:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 8001454:	605c      	str	r4, [r3, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8001456:	68da      	ldr	r2, [r3, #12]
 8001458:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800145c:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	069b      	lsls	r3, r3, #26
 8001462:	d40a      	bmi.n	800147a <HAL_RTC_SetDate+0xa2>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001464:	4630      	mov	r0, r6
 8001466:	f7ff febb 	bl	80011e0 <HAL_RTC_WaitForSynchro>
 800146a:	b130      	cbz	r0, 800147a <HAL_RTC_SetDate+0xa2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800146c:	6833      	ldr	r3, [r6, #0]
 800146e:	22ff      	movs	r2, #255	; 0xff
 8001470:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001472:	2304      	movs	r3, #4
 8001474:	7773      	strb	r3, [r6, #29]
        __HAL_UNLOCK(hrtc);
 8001476:	7735      	strb	r5, [r6, #28]
 8001478:	e7e5      	b.n	8001446 <HAL_RTC_SetDate+0x6e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800147a:	6833      	ldr	r3, [r6, #0]
 800147c:	22ff      	movs	r2, #255	; 0xff
 800147e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8001480:	2301      	movs	r3, #1
 8001482:	7773      	strb	r3, [r6, #29]
    __HAL_UNLOCK(hrtc);
 8001484:	2300      	movs	r3, #0
 8001486:	7733      	strb	r3, [r6, #28]
    return HAL_OK;
 8001488:	e7de      	b.n	8001448 <HAL_RTC_SetDate+0x70>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800148a:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
 800148e:	4338      	orrs	r0, r7
 8001490:	e7c6      	b.n	8001420 <HAL_RTC_SetDate+0x48>

08001492 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8001492:	6803      	ldr	r3, [r0, #0]
 8001494:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8001496:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 800149a:	4770      	bx	lr

0800149c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800149c:	6803      	ldr	r3, [r0, #0]
 800149e:	68da      	ldr	r2, [r3, #12]
 80014a0:	f042 0201 	orr.w	r2, r2, #1
 80014a4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014ac:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 80014ae:	bf1e      	ittt	ne
 80014b0:	681a      	ldrne	r2, [r3, #0]
 80014b2:	f042 0201 	orrne.w	r2, r2, #1
 80014b6:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 80014b8:	2000      	movs	r0, #0
 80014ba:	4770      	bx	lr

080014bc <HAL_TIM_OC_DelayElapsedCallback>:
 80014bc:	4770      	bx	lr

080014be <HAL_TIM_IC_CaptureCallback>:
 80014be:	4770      	bx	lr

080014c0 <HAL_TIM_PWM_PulseFinishedCallback>:
 80014c0:	4770      	bx	lr

080014c2 <HAL_TIM_TriggerCallback>:
 80014c2:	4770      	bx	lr

080014c4 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80014c4:	6803      	ldr	r3, [r0, #0]
 80014c6:	691a      	ldr	r2, [r3, #16]
 80014c8:	0791      	lsls	r1, r2, #30
{
 80014ca:	b510      	push	{r4, lr}
 80014cc:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80014ce:	d50e      	bpl.n	80014ee <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80014d0:	68da      	ldr	r2, [r3, #12]
 80014d2:	0792      	lsls	r2, r2, #30
 80014d4:	d50b      	bpl.n	80014ee <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80014d6:	f06f 0202 	mvn.w	r2, #2
 80014da:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80014dc:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80014de:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80014e0:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80014e2:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80014e4:	d077      	beq.n	80015d6 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80014e6:	f7ff ffea 	bl	80014be <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014ea:	2300      	movs	r3, #0
 80014ec:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80014ee:	6823      	ldr	r3, [r4, #0]
 80014f0:	691a      	ldr	r2, [r3, #16]
 80014f2:	0750      	lsls	r0, r2, #29
 80014f4:	d510      	bpl.n	8001518 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80014f6:	68da      	ldr	r2, [r3, #12]
 80014f8:	0751      	lsls	r1, r2, #29
 80014fa:	d50d      	bpl.n	8001518 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80014fc:	f06f 0204 	mvn.w	r2, #4
 8001500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001502:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001504:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001506:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800150a:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800150c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800150e:	d068      	beq.n	80015e2 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001510:	f7ff ffd5 	bl	80014be <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001514:	2300      	movs	r3, #0
 8001516:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001518:	6823      	ldr	r3, [r4, #0]
 800151a:	691a      	ldr	r2, [r3, #16]
 800151c:	0712      	lsls	r2, r2, #28
 800151e:	d50f      	bpl.n	8001540 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001520:	68da      	ldr	r2, [r3, #12]
 8001522:	0710      	lsls	r0, r2, #28
 8001524:	d50c      	bpl.n	8001540 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001526:	f06f 0208 	mvn.w	r2, #8
 800152a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800152c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800152e:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001530:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001532:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001534:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001536:	d05a      	beq.n	80015ee <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001538:	f7ff ffc1 	bl	80014be <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800153c:	2300      	movs	r3, #0
 800153e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001540:	6823      	ldr	r3, [r4, #0]
 8001542:	691a      	ldr	r2, [r3, #16]
 8001544:	06d2      	lsls	r2, r2, #27
 8001546:	d510      	bpl.n	800156a <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001548:	68da      	ldr	r2, [r3, #12]
 800154a:	06d0      	lsls	r0, r2, #27
 800154c:	d50d      	bpl.n	800156a <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800154e:	f06f 0210 	mvn.w	r2, #16
 8001552:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001554:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001556:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001558:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800155c:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800155e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001560:	d04b      	beq.n	80015fa <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001562:	f7ff ffac 	bl	80014be <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001566:	2300      	movs	r3, #0
 8001568:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800156a:	6823      	ldr	r3, [r4, #0]
 800156c:	691a      	ldr	r2, [r3, #16]
 800156e:	07d1      	lsls	r1, r2, #31
 8001570:	d508      	bpl.n	8001584 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001572:	68da      	ldr	r2, [r3, #12]
 8001574:	07d2      	lsls	r2, r2, #31
 8001576:	d505      	bpl.n	8001584 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001578:	f06f 0201 	mvn.w	r2, #1
 800157c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800157e:	4620      	mov	r0, r4
 8001580:	f001 fd7c 	bl	800307c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001584:	6823      	ldr	r3, [r4, #0]
 8001586:	691a      	ldr	r2, [r3, #16]
 8001588:	0610      	lsls	r0, r2, #24
 800158a:	d508      	bpl.n	800159e <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800158c:	68da      	ldr	r2, [r3, #12]
 800158e:	0611      	lsls	r1, r2, #24
 8001590:	d505      	bpl.n	800159e <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001592:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001596:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001598:	4620      	mov	r0, r4
 800159a:	f000 f8d4 	bl	8001746 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800159e:	6823      	ldr	r3, [r4, #0]
 80015a0:	691a      	ldr	r2, [r3, #16]
 80015a2:	0652      	lsls	r2, r2, #25
 80015a4:	d508      	bpl.n	80015b8 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80015a6:	68da      	ldr	r2, [r3, #12]
 80015a8:	0650      	lsls	r0, r2, #25
 80015aa:	d505      	bpl.n	80015b8 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80015ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80015b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80015b2:	4620      	mov	r0, r4
 80015b4:	f7ff ff85 	bl	80014c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80015b8:	6823      	ldr	r3, [r4, #0]
 80015ba:	691a      	ldr	r2, [r3, #16]
 80015bc:	0691      	lsls	r1, r2, #26
 80015be:	d522      	bpl.n	8001606 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80015c0:	68da      	ldr	r2, [r3, #12]
 80015c2:	0692      	lsls	r2, r2, #26
 80015c4:	d51f      	bpl.n	8001606 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80015c6:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80015ca:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80015cc:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80015ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80015d2:	f000 b8b7 	b.w	8001744 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80015d6:	f7ff ff71 	bl	80014bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015da:	4620      	mov	r0, r4
 80015dc:	f7ff ff70 	bl	80014c0 <HAL_TIM_PWM_PulseFinishedCallback>
 80015e0:	e783      	b.n	80014ea <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015e2:	f7ff ff6b 	bl	80014bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015e6:	4620      	mov	r0, r4
 80015e8:	f7ff ff6a 	bl	80014c0 <HAL_TIM_PWM_PulseFinishedCallback>
 80015ec:	e792      	b.n	8001514 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015ee:	f7ff ff65 	bl	80014bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015f2:	4620      	mov	r0, r4
 80015f4:	f7ff ff64 	bl	80014c0 <HAL_TIM_PWM_PulseFinishedCallback>
 80015f8:	e7a0      	b.n	800153c <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015fa:	f7ff ff5f 	bl	80014bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015fe:	4620      	mov	r0, r4
 8001600:	f7ff ff5e 	bl	80014c0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001604:	e7af      	b.n	8001566 <HAL_TIM_IRQHandler+0xa2>
}
 8001606:	bd10      	pop	{r4, pc}

08001608 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001608:	4a30      	ldr	r2, [pc, #192]	; (80016cc <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800160a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800160c:	4290      	cmp	r0, r2
 800160e:	d012      	beq.n	8001636 <TIM_Base_SetConfig+0x2e>
 8001610:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001614:	d00f      	beq.n	8001636 <TIM_Base_SetConfig+0x2e>
 8001616:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800161a:	4290      	cmp	r0, r2
 800161c:	d00b      	beq.n	8001636 <TIM_Base_SetConfig+0x2e>
 800161e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001622:	4290      	cmp	r0, r2
 8001624:	d007      	beq.n	8001636 <TIM_Base_SetConfig+0x2e>
 8001626:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800162a:	4290      	cmp	r0, r2
 800162c:	d003      	beq.n	8001636 <TIM_Base_SetConfig+0x2e>
 800162e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001632:	4290      	cmp	r0, r2
 8001634:	d119      	bne.n	800166a <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001636:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001638:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800163c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800163e:	4a23      	ldr	r2, [pc, #140]	; (80016cc <TIM_Base_SetConfig+0xc4>)
 8001640:	4290      	cmp	r0, r2
 8001642:	d029      	beq.n	8001698 <TIM_Base_SetConfig+0x90>
 8001644:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001648:	d026      	beq.n	8001698 <TIM_Base_SetConfig+0x90>
 800164a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800164e:	4290      	cmp	r0, r2
 8001650:	d022      	beq.n	8001698 <TIM_Base_SetConfig+0x90>
 8001652:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001656:	4290      	cmp	r0, r2
 8001658:	d01e      	beq.n	8001698 <TIM_Base_SetConfig+0x90>
 800165a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800165e:	4290      	cmp	r0, r2
 8001660:	d01a      	beq.n	8001698 <TIM_Base_SetConfig+0x90>
 8001662:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001666:	4290      	cmp	r0, r2
 8001668:	d016      	beq.n	8001698 <TIM_Base_SetConfig+0x90>
 800166a:	4a19      	ldr	r2, [pc, #100]	; (80016d0 <TIM_Base_SetConfig+0xc8>)
 800166c:	4290      	cmp	r0, r2
 800166e:	d013      	beq.n	8001698 <TIM_Base_SetConfig+0x90>
 8001670:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001674:	4290      	cmp	r0, r2
 8001676:	d00f      	beq.n	8001698 <TIM_Base_SetConfig+0x90>
 8001678:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800167c:	4290      	cmp	r0, r2
 800167e:	d00b      	beq.n	8001698 <TIM_Base_SetConfig+0x90>
 8001680:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001684:	4290      	cmp	r0, r2
 8001686:	d007      	beq.n	8001698 <TIM_Base_SetConfig+0x90>
 8001688:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800168c:	4290      	cmp	r0, r2
 800168e:	d003      	beq.n	8001698 <TIM_Base_SetConfig+0x90>
 8001690:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001694:	4290      	cmp	r0, r2
 8001696:	d103      	bne.n	80016a0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001698:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800169a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800169e:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80016a0:	694a      	ldr	r2, [r1, #20]
 80016a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80016a6:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80016a8:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80016aa:	688b      	ldr	r3, [r1, #8]
 80016ac:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80016ae:	680b      	ldr	r3, [r1, #0]
 80016b0:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80016b2:	4b06      	ldr	r3, [pc, #24]	; (80016cc <TIM_Base_SetConfig+0xc4>)
 80016b4:	4298      	cmp	r0, r3
 80016b6:	d003      	beq.n	80016c0 <TIM_Base_SetConfig+0xb8>
 80016b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016bc:	4298      	cmp	r0, r3
 80016be:	d101      	bne.n	80016c4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80016c0:	690b      	ldr	r3, [r1, #16]
 80016c2:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80016c4:	2301      	movs	r3, #1
 80016c6:	6143      	str	r3, [r0, #20]
}
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	40010000 	.word	0x40010000
 80016d0:	40014000 	.word	0x40014000

080016d4 <HAL_TIM_Base_Init>:
{
 80016d4:	b510      	push	{r4, lr}
  if (htim == NULL)
 80016d6:	4604      	mov	r4, r0
 80016d8:	b1a0      	cbz	r0, 8001704 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80016da:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80016de:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80016e2:	b91b      	cbnz	r3, 80016ec <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80016e4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80016e8:	f001 fcf2 	bl	80030d0 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80016ec:	2302      	movs	r3, #2
 80016ee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016f2:	6820      	ldr	r0, [r4, #0]
 80016f4:	1d21      	adds	r1, r4, #4
 80016f6:	f7ff ff87 	bl	8001608 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80016fa:	2301      	movs	r3, #1
 80016fc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001700:	2000      	movs	r0, #0
}
 8001702:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001704:	2001      	movs	r0, #1
 8001706:	e7fc      	b.n	8001702 <HAL_TIM_Base_Init+0x2e>

08001708 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001708:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800170c:	2b01      	cmp	r3, #1
{
 800170e:	b530      	push	{r4, r5, lr}
 8001710:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001714:	d014      	beq.n	8001740 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001716:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001718:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 800171c:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800171e:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001720:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001722:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001724:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001728:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800172c:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800172e:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001730:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001732:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001734:	2301      	movs	r3, #1
 8001736:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800173a:	2300      	movs	r3, #0
 800173c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001740:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001742:	bd30      	pop	{r4, r5, pc}

08001744 <HAL_TIMEx_CommutCallback>:
 8001744:	4770      	bx	lr

08001746 <HAL_TIMEx_BreakCallback>:
 8001746:	4770      	bx	lr

08001748 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001748:	6803      	ldr	r3, [r0, #0]
 800174a:	68da      	ldr	r2, [r3, #12]
 800174c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001750:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001752:	695a      	ldr	r2, [r3, #20]
 8001754:	f022 0201 	bic.w	r2, r2, #1
 8001758:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800175a:	2320      	movs	r3, #32
 800175c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 8001760:	4770      	bx	lr
	...

08001764 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001768:	6803      	ldr	r3, [r0, #0]
 800176a:	68c1      	ldr	r1, [r0, #12]
 800176c:	691a      	ldr	r2, [r3, #16]
{
 800176e:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001770:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001774:	430a      	orrs	r2, r1
 8001776:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001778:	6925      	ldr	r5, [r4, #16]
 800177a:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 800177c:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800177e:	69c0      	ldr	r0, [r0, #28]
 8001780:	432a      	orrs	r2, r5
 8001782:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8001784:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001788:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 800178a:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800178e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8001790:	430a      	orrs	r2, r1
 8001792:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001794:	695a      	ldr	r2, [r3, #20]
 8001796:	69a1      	ldr	r1, [r4, #24]
 8001798:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800179c:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800179e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80017a2:	615a      	str	r2, [r3, #20]
 80017a4:	4a7a      	ldr	r2, [pc, #488]	; (8001990 <UART_SetConfig+0x22c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80017a6:	d17b      	bne.n	80018a0 <UART_SetConfig+0x13c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d003      	beq.n	80017b4 <UART_SetConfig+0x50>
 80017ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d144      	bne.n	800183e <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80017b4:	f7ff f8fc 	bl	80009b0 <HAL_RCC_GetPCLK2Freq>
 80017b8:	6867      	ldr	r7, [r4, #4]
 80017ba:	2519      	movs	r5, #25
 80017bc:	f04f 0864 	mov.w	r8, #100	; 0x64
 80017c0:	fb05 f300 	mul.w	r3, r5, r0
 80017c4:	007f      	lsls	r7, r7, #1
 80017c6:	fbb3 f3f7 	udiv	r3, r3, r7
 80017ca:	fbb3 f3f8 	udiv	r3, r3, r8
 80017ce:	011f      	lsls	r7, r3, #4
 80017d0:	f7ff f8ee 	bl	80009b0 <HAL_RCC_GetPCLK2Freq>
 80017d4:	6863      	ldr	r3, [r4, #4]
 80017d6:	4368      	muls	r0, r5
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	fbb0 f6f3 	udiv	r6, r0, r3
 80017de:	f7ff f8e7 	bl	80009b0 <HAL_RCC_GetPCLK2Freq>
 80017e2:	6863      	ldr	r3, [r4, #4]
 80017e4:	4368      	muls	r0, r5
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80017ec:	fbb3 f3f8 	udiv	r3, r3, r8
 80017f0:	fb08 6313 	mls	r3, r8, r3, r6
 80017f4:	00db      	lsls	r3, r3, #3
 80017f6:	3332      	adds	r3, #50	; 0x32
 80017f8:	fbb3 f3f8 	udiv	r3, r3, r8
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 8001802:	f7ff f8d5 	bl	80009b0 <HAL_RCC_GetPCLK2Freq>
 8001806:	6862      	ldr	r2, [r4, #4]
 8001808:	4368      	muls	r0, r5
 800180a:	0052      	lsls	r2, r2, #1
 800180c:	fbb0 f9f2 	udiv	r9, r0, r2
 8001810:	f7ff f8ce 	bl	80009b0 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001814:	6863      	ldr	r3, [r4, #4]
 8001816:	6822      	ldr	r2, [r4, #0]
 8001818:	4368      	muls	r0, r5
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001820:	fbb3 f3f8 	udiv	r3, r3, r8
 8001824:	fb08 9313 	mls	r3, r8, r3, r9
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	3332      	adds	r3, #50	; 0x32
 800182c:	fbb3 f3f8 	udiv	r3, r3, r8
 8001830:	f003 0307 	and.w	r3, r3, #7
 8001834:	443b      	add	r3, r7
 8001836:	4433      	add	r3, r6
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001838:	6093      	str	r3, [r2, #8]
    }
  }
}
 800183a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800183e:	f7ff f8a7 	bl	8000990 <HAL_RCC_GetPCLK1Freq>
 8001842:	6867      	ldr	r7, [r4, #4]
 8001844:	2519      	movs	r5, #25
 8001846:	f04f 0864 	mov.w	r8, #100	; 0x64
 800184a:	fb05 f300 	mul.w	r3, r5, r0
 800184e:	007f      	lsls	r7, r7, #1
 8001850:	fbb3 f3f7 	udiv	r3, r3, r7
 8001854:	fbb3 f3f8 	udiv	r3, r3, r8
 8001858:	011f      	lsls	r7, r3, #4
 800185a:	f7ff f899 	bl	8000990 <HAL_RCC_GetPCLK1Freq>
 800185e:	6863      	ldr	r3, [r4, #4]
 8001860:	4368      	muls	r0, r5
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	fbb0 f6f3 	udiv	r6, r0, r3
 8001868:	f7ff f892 	bl	8000990 <HAL_RCC_GetPCLK1Freq>
 800186c:	6863      	ldr	r3, [r4, #4]
 800186e:	4368      	muls	r0, r5
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	fbb0 f3f3 	udiv	r3, r0, r3
 8001876:	fbb3 f3f8 	udiv	r3, r3, r8
 800187a:	fb08 6313 	mls	r3, r8, r3, r6
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	3332      	adds	r3, #50	; 0x32
 8001882:	fbb3 f3f8 	udiv	r3, r3, r8
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 800188c:	f7ff f880 	bl	8000990 <HAL_RCC_GetPCLK1Freq>
 8001890:	6862      	ldr	r2, [r4, #4]
 8001892:	4368      	muls	r0, r5
 8001894:	0052      	lsls	r2, r2, #1
 8001896:	fbb0 f9f2 	udiv	r9, r0, r2
 800189a:	f7ff f879 	bl	8000990 <HAL_RCC_GetPCLK1Freq>
 800189e:	e7b9      	b.n	8001814 <UART_SetConfig+0xb0>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d002      	beq.n	80018aa <UART_SetConfig+0x146>
 80018a4:	4a3b      	ldr	r2, [pc, #236]	; (8001994 <UART_SetConfig+0x230>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d141      	bne.n	800192e <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80018aa:	f7ff f881 	bl	80009b0 <HAL_RCC_GetPCLK2Freq>
 80018ae:	6867      	ldr	r7, [r4, #4]
 80018b0:	2519      	movs	r5, #25
 80018b2:	f04f 0864 	mov.w	r8, #100	; 0x64
 80018b6:	fb05 f300 	mul.w	r3, r5, r0
 80018ba:	00bf      	lsls	r7, r7, #2
 80018bc:	fbb3 f3f7 	udiv	r3, r3, r7
 80018c0:	fbb3 f3f8 	udiv	r3, r3, r8
 80018c4:	011f      	lsls	r7, r3, #4
 80018c6:	f7ff f873 	bl	80009b0 <HAL_RCC_GetPCLK2Freq>
 80018ca:	6863      	ldr	r3, [r4, #4]
 80018cc:	4368      	muls	r0, r5
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	fbb0 f6f3 	udiv	r6, r0, r3
 80018d4:	f7ff f86c 	bl	80009b0 <HAL_RCC_GetPCLK2Freq>
 80018d8:	6863      	ldr	r3, [r4, #4]
 80018da:	4368      	muls	r0, r5
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	fbb0 f3f3 	udiv	r3, r0, r3
 80018e2:	fbb3 f3f8 	udiv	r3, r3, r8
 80018e6:	fb08 6313 	mls	r3, r8, r3, r6
 80018ea:	011b      	lsls	r3, r3, #4
 80018ec:	3332      	adds	r3, #50	; 0x32
 80018ee:	fbb3 f3f8 	udiv	r3, r3, r8
 80018f2:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 80018f6:	f7ff f85b 	bl	80009b0 <HAL_RCC_GetPCLK2Freq>
 80018fa:	6862      	ldr	r2, [r4, #4]
 80018fc:	4368      	muls	r0, r5
 80018fe:	0092      	lsls	r2, r2, #2
 8001900:	fbb0 f9f2 	udiv	r9, r0, r2
 8001904:	f7ff f854 	bl	80009b0 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001908:	6863      	ldr	r3, [r4, #4]
 800190a:	6822      	ldr	r2, [r4, #0]
 800190c:	4368      	muls	r0, r5
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	fbb0 f3f3 	udiv	r3, r0, r3
 8001914:	fbb3 f3f8 	udiv	r3, r3, r8
 8001918:	fb08 9313 	mls	r3, r8, r3, r9
 800191c:	011b      	lsls	r3, r3, #4
 800191e:	3332      	adds	r3, #50	; 0x32
 8001920:	fbb3 f3f8 	udiv	r3, r3, r8
 8001924:	f003 030f 	and.w	r3, r3, #15
 8001928:	4333      	orrs	r3, r6
 800192a:	443b      	add	r3, r7
 800192c:	e784      	b.n	8001838 <UART_SetConfig+0xd4>
 800192e:	f7ff f82f 	bl	8000990 <HAL_RCC_GetPCLK1Freq>
 8001932:	6867      	ldr	r7, [r4, #4]
 8001934:	2519      	movs	r5, #25
 8001936:	f04f 0864 	mov.w	r8, #100	; 0x64
 800193a:	fb05 f300 	mul.w	r3, r5, r0
 800193e:	00bf      	lsls	r7, r7, #2
 8001940:	fbb3 f3f7 	udiv	r3, r3, r7
 8001944:	fbb3 f3f8 	udiv	r3, r3, r8
 8001948:	011f      	lsls	r7, r3, #4
 800194a:	f7ff f821 	bl	8000990 <HAL_RCC_GetPCLK1Freq>
 800194e:	6863      	ldr	r3, [r4, #4]
 8001950:	4368      	muls	r0, r5
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	fbb0 f6f3 	udiv	r6, r0, r3
 8001958:	f7ff f81a 	bl	8000990 <HAL_RCC_GetPCLK1Freq>
 800195c:	6863      	ldr	r3, [r4, #4]
 800195e:	4368      	muls	r0, r5
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	fbb0 f3f3 	udiv	r3, r0, r3
 8001966:	fbb3 f3f8 	udiv	r3, r3, r8
 800196a:	fb08 6313 	mls	r3, r8, r3, r6
 800196e:	011b      	lsls	r3, r3, #4
 8001970:	3332      	adds	r3, #50	; 0x32
 8001972:	fbb3 f3f8 	udiv	r3, r3, r8
 8001976:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 800197a:	f7ff f809 	bl	8000990 <HAL_RCC_GetPCLK1Freq>
 800197e:	6862      	ldr	r2, [r4, #4]
 8001980:	4368      	muls	r0, r5
 8001982:	0092      	lsls	r2, r2, #2
 8001984:	fbb0 f9f2 	udiv	r9, r0, r2
 8001988:	f7ff f802 	bl	8000990 <HAL_RCC_GetPCLK1Freq>
 800198c:	e7bc      	b.n	8001908 <UART_SetConfig+0x1a4>
 800198e:	bf00      	nop
 8001990:	40011000 	.word	0x40011000
 8001994:	40011400 	.word	0x40011400

08001998 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800199a:	4604      	mov	r4, r0
 800199c:	460e      	mov	r6, r1
 800199e:	4617      	mov	r7, r2
 80019a0:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80019a2:	6821      	ldr	r1, [r4, #0]
 80019a4:	680b      	ldr	r3, [r1, #0]
 80019a6:	ea36 0303 	bics.w	r3, r6, r3
 80019aa:	d101      	bne.n	80019b0 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80019ac:	2000      	movs	r0, #0
 80019ae:	e014      	b.n	80019da <UART_WaitOnFlagUntilTimeout.constprop.3+0x42>
    if (Timeout != HAL_MAX_DELAY)
 80019b0:	1c6b      	adds	r3, r5, #1
 80019b2:	d0f7      	beq.n	80019a4 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80019b4:	b995      	cbnz	r5, 80019dc <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80019b6:	6823      	ldr	r3, [r4, #0]
 80019b8:	68da      	ldr	r2, [r3, #12]
 80019ba:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80019be:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80019c0:	695a      	ldr	r2, [r3, #20]
 80019c2:	f022 0201 	bic.w	r2, r2, #1
 80019c6:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80019c8:	2320      	movs	r3, #32
 80019ca:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80019ce:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80019d2:	2300      	movs	r3, #0
 80019d4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80019d8:	2003      	movs	r0, #3
}
 80019da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80019dc:	f001 fcee 	bl	80033bc <HAL_GetTick>
 80019e0:	1bc0      	subs	r0, r0, r7
 80019e2:	4285      	cmp	r5, r0
 80019e4:	d2dd      	bcs.n	80019a2 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80019e6:	e7e6      	b.n	80019b6 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080019e8 <HAL_UART_Init>:
{
 80019e8:	b510      	push	{r4, lr}
  if (huart == NULL)
 80019ea:	4604      	mov	r4, r0
 80019ec:	b340      	cbz	r0, 8001a40 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80019ee:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80019f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80019f6:	b91b      	cbnz	r3, 8001a00 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80019f8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80019fc:	f001 fb8a 	bl	8003114 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001a00:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001a02:	2324      	movs	r3, #36	; 0x24
 8001a04:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001a08:	68d3      	ldr	r3, [r2, #12]
 8001a0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001a0e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001a10:	4620      	mov	r0, r4
 8001a12:	f7ff fea7 	bl	8001764 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a16:	6823      	ldr	r3, [r4, #0]
 8001a18:	691a      	ldr	r2, [r3, #16]
 8001a1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a1e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a20:	695a      	ldr	r2, [r3, #20]
 8001a22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a26:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001a28:	68da      	ldr	r2, [r3, #12]
 8001a2a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a2e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a30:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001a32:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a34:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001a36:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001a3a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8001a3e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001a40:	2001      	movs	r0, #1
 8001a42:	e7fc      	b.n	8001a3e <HAL_UART_Init+0x56>

08001a44 <HAL_UART_Transmit>:
{
 8001a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a48:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001a4a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001a4e:	2b20      	cmp	r3, #32
{
 8001a50:	4604      	mov	r4, r0
 8001a52:	460d      	mov	r5, r1
 8001a54:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001a56:	d14d      	bne.n	8001af4 <HAL_UART_Transmit+0xb0>
    if ((pData == NULL) || (Size == 0U))
 8001a58:	2900      	cmp	r1, #0
 8001a5a:	d049      	beq.n	8001af0 <HAL_UART_Transmit+0xac>
 8001a5c:	2a00      	cmp	r2, #0
 8001a5e:	d047      	beq.n	8001af0 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8001a60:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d045      	beq.n	8001af4 <HAL_UART_Transmit+0xb0>
 8001a68:	2301      	movs	r3, #1
 8001a6a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a72:	2321      	movs	r3, #33	; 0x21
 8001a74:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001a78:	f001 fca0 	bl	80033bc <HAL_GetTick>
    huart->TxXferSize = Size;
 8001a7c:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8001a80:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001a82:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001a86:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	b963      	cbnz	r3, 8001aa6 <HAL_UART_Transmit+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001a8c:	463b      	mov	r3, r7
 8001a8e:	4632      	mov	r2, r6
 8001a90:	2140      	movs	r1, #64	; 0x40
 8001a92:	4620      	mov	r0, r4
 8001a94:	f7ff ff80 	bl	8001998 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001a98:	b9a8      	cbnz	r0, 8001ac6 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8001a9a:	2320      	movs	r3, #32
 8001a9c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8001aa0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8001aa4:	e010      	b.n	8001ac8 <HAL_UART_Transmit+0x84>
      huart->TxXferCount--;
 8001aa6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001aae:	68a3      	ldr	r3, [r4, #8]
 8001ab0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ab4:	4632      	mov	r2, r6
 8001ab6:	463b      	mov	r3, r7
 8001ab8:	f04f 0180 	mov.w	r1, #128	; 0x80
 8001abc:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001abe:	d10e      	bne.n	8001ade <HAL_UART_Transmit+0x9a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ac0:	f7ff ff6a 	bl	8001998 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001ac4:	b110      	cbz	r0, 8001acc <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8001ac6:	2003      	movs	r0, #3
}
 8001ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001acc:	882b      	ldrh	r3, [r5, #0]
 8001ace:	6822      	ldr	r2, [r4, #0]
 8001ad0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ad4:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001ad6:	6923      	ldr	r3, [r4, #16]
 8001ad8:	b943      	cbnz	r3, 8001aec <HAL_UART_Transmit+0xa8>
          pData += 2U;
 8001ada:	3502      	adds	r5, #2
 8001adc:	e7d3      	b.n	8001a86 <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ade:	f7ff ff5b 	bl	8001998 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001ae2:	2800      	cmp	r0, #0
 8001ae4:	d1ef      	bne.n	8001ac6 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001ae6:	6823      	ldr	r3, [r4, #0]
 8001ae8:	782a      	ldrb	r2, [r5, #0]
 8001aea:	605a      	str	r2, [r3, #4]
 8001aec:	3501      	adds	r5, #1
 8001aee:	e7ca      	b.n	8001a86 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001af0:	2001      	movs	r0, #1
 8001af2:	e7e9      	b.n	8001ac8 <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 8001af4:	2002      	movs	r0, #2
 8001af6:	e7e7      	b.n	8001ac8 <HAL_UART_Transmit+0x84>

08001af8 <HAL_UART_Receive>:
{
 8001af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001afc:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8001afe:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001b02:	2b20      	cmp	r3, #32
{
 8001b04:	4604      	mov	r4, r0
 8001b06:	460d      	mov	r5, r1
 8001b08:	4690      	mov	r8, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8001b0a:	d153      	bne.n	8001bb4 <HAL_UART_Receive+0xbc>
    if ((pData == NULL) || (Size == 0U))
 8001b0c:	2900      	cmp	r1, #0
 8001b0e:	d04f      	beq.n	8001bb0 <HAL_UART_Receive+0xb8>
 8001b10:	2a00      	cmp	r2, #0
 8001b12:	d04d      	beq.n	8001bb0 <HAL_UART_Receive+0xb8>
    __HAL_LOCK(huart);
 8001b14:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d04b      	beq.n	8001bb4 <HAL_UART_Receive+0xbc>
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b22:	2300      	movs	r3, #0
 8001b24:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001b26:	2322      	movs	r3, #34	; 0x22
 8001b28:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 8001b2c:	f001 fc46 	bl	80033bc <HAL_GetTick>
    huart->RxXferSize = Size;
 8001b30:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    tickstart = HAL_GetTick();
 8001b34:	4606      	mov	r6, r0
    huart->RxXferCount = Size;
 8001b36:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001b3a:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8001b3c:	b280      	uxth	r0, r0
 8001b3e:	b928      	cbnz	r0, 8001b4c <HAL_UART_Receive+0x54>
    huart->RxState = HAL_UART_STATE_READY;
 8001b40:	2320      	movs	r3, #32
 8001b42:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    __HAL_UNLOCK(huart);
 8001b46:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8001b4a:	e010      	b.n	8001b6e <HAL_UART_Receive+0x76>
      huart->RxXferCount--;
 8001b4c:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001b54:	68a3      	ldr	r3, [r4, #8]
 8001b56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001b5a:	4632      	mov	r2, r6
 8001b5c:	463b      	mov	r3, r7
 8001b5e:	f04f 0120 	mov.w	r1, #32
 8001b62:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001b64:	d116      	bne.n	8001b94 <HAL_UART_Receive+0x9c>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001b66:	f7ff ff17 	bl	8001998 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001b6a:	b110      	cbz	r0, 8001b72 <HAL_UART_Receive+0x7a>
          return HAL_TIMEOUT;
 8001b6c:	2003      	movs	r0, #3
}
 8001b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001b72:	6922      	ldr	r2, [r4, #16]
 8001b74:	6823      	ldr	r3, [r4, #0]
 8001b76:	b93a      	cbnz	r2, 8001b88 <HAL_UART_Receive+0x90>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	462b      	mov	r3, r5
 8001b7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b80:	f823 2b02 	strh.w	r2, [r3], #2
{
 8001b84:	461d      	mov	r5, r3
 8001b86:	e7d8      	b.n	8001b3a <HAL_UART_Receive+0x42>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001b88:	685a      	ldr	r2, [r3, #4]
 8001b8a:	462b      	mov	r3, r5
 8001b8c:	b2d2      	uxtb	r2, r2
 8001b8e:	f823 2b01 	strh.w	r2, [r3], #1
 8001b92:	e7f7      	b.n	8001b84 <HAL_UART_Receive+0x8c>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001b94:	f7ff ff00 	bl	8001998 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001b98:	2800      	cmp	r0, #0
 8001b9a:	d1e7      	bne.n	8001b6c <HAL_UART_Receive+0x74>
 8001b9c:	6822      	ldr	r2, [r4, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001b9e:	6921      	ldr	r1, [r4, #16]
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001ba0:	6852      	ldr	r2, [r2, #4]
 8001ba2:	1c6b      	adds	r3, r5, #1
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001ba4:	b909      	cbnz	r1, 8001baa <HAL_UART_Receive+0xb2>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001ba6:	702a      	strb	r2, [r5, #0]
 8001ba8:	e7ec      	b.n	8001b84 <HAL_UART_Receive+0x8c>
 8001baa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001bae:	e7fa      	b.n	8001ba6 <HAL_UART_Receive+0xae>
      return  HAL_ERROR;
 8001bb0:	2001      	movs	r0, #1
 8001bb2:	e7dc      	b.n	8001b6e <HAL_UART_Receive+0x76>
    return HAL_BUSY;
 8001bb4:	2002      	movs	r0, #2
 8001bb6:	e7da      	b.n	8001b6e <HAL_UART_Receive+0x76>

08001bb8 <HAL_UART_TxCpltCallback>:
 8001bb8:	4770      	bx	lr

08001bba <HAL_UART_RxCpltCallback>:
 8001bba:	4770      	bx	lr

08001bbc <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001bbc:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001bc0:	2b22      	cmp	r3, #34	; 0x22
{
 8001bc2:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001bc4:	d133      	bne.n	8001c2e <UART_Receive_IT+0x72>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001bc6:	6881      	ldr	r1, [r0, #8]
 8001bc8:	6904      	ldr	r4, [r0, #16]
 8001bca:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001bcc:	6802      	ldr	r2, [r0, #0]
 8001bce:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8001bd2:	d123      	bne.n	8001c1c <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001bd4:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001bd6:	b9ec      	cbnz	r4, 8001c14 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001bd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001bdc:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8001be0:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8001be2:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8001be4:	3c01      	subs	r4, #1
 8001be6:	b2a4      	uxth	r4, r4
 8001be8:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8001bea:	b98c      	cbnz	r4, 8001c10 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001bec:	6803      	ldr	r3, [r0, #0]
 8001bee:	68da      	ldr	r2, [r3, #12]
 8001bf0:	f022 0220 	bic.w	r2, r2, #32
 8001bf4:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001bf6:	68da      	ldr	r2, [r3, #12]
 8001bf8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bfc:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001bfe:	695a      	ldr	r2, [r3, #20]
 8001c00:	f022 0201 	bic.w	r2, r2, #1
 8001c04:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001c06:	2320      	movs	r3, #32
 8001c08:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8001c0c:	f7ff ffd5 	bl	8001bba <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 8001c10:	2000      	movs	r0, #0
 8001c12:	e00d      	b.n	8001c30 <UART_Receive_IT+0x74>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001c14:	b2d2      	uxtb	r2, r2
 8001c16:	f823 2b01 	strh.w	r2, [r3], #1
 8001c1a:	e7e1      	b.n	8001be0 <UART_Receive_IT+0x24>
 8001c1c:	1c59      	adds	r1, r3, #1
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001c1e:	6852      	ldr	r2, [r2, #4]
 8001c20:	6281      	str	r1, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001c22:	b90c      	cbnz	r4, 8001c28 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001c24:	701a      	strb	r2, [r3, #0]
 8001c26:	e7dc      	b.n	8001be2 <UART_Receive_IT+0x26>
 8001c28:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c2c:	e7fa      	b.n	8001c24 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8001c2e:	2002      	movs	r0, #2
}
 8001c30:	bd10      	pop	{r4, pc}

08001c32 <HAL_UART_ErrorCallback>:
 8001c32:	4770      	bx	lr

08001c34 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001c34:	6803      	ldr	r3, [r0, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001c38:	68d9      	ldr	r1, [r3, #12]
{
 8001c3a:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8001c3c:	0716      	lsls	r6, r2, #28
{
 8001c3e:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001c40:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8001c42:	d107      	bne.n	8001c54 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001c44:	0696      	lsls	r6, r2, #26
 8001c46:	d558      	bpl.n	8001cfa <HAL_UART_IRQHandler+0xc6>
 8001c48:	068d      	lsls	r5, r1, #26
 8001c4a:	d556      	bpl.n	8001cfa <HAL_UART_IRQHandler+0xc6>
}
 8001c4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8001c50:	f7ff bfb4 	b.w	8001bbc <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001c54:	f015 0501 	ands.w	r5, r5, #1
 8001c58:	d102      	bne.n	8001c60 <HAL_UART_IRQHandler+0x2c>
 8001c5a:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001c5e:	d04c      	beq.n	8001cfa <HAL_UART_IRQHandler+0xc6>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001c60:	07d3      	lsls	r3, r2, #31
 8001c62:	d505      	bpl.n	8001c70 <HAL_UART_IRQHandler+0x3c>
 8001c64:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001c66:	bf42      	ittt	mi
 8001c68:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8001c6a:	f043 0301 	orrmi.w	r3, r3, #1
 8001c6e:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c70:	0750      	lsls	r0, r2, #29
 8001c72:	d504      	bpl.n	8001c7e <HAL_UART_IRQHandler+0x4a>
 8001c74:	b11d      	cbz	r5, 8001c7e <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001c76:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c78:	f043 0302 	orr.w	r3, r3, #2
 8001c7c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c7e:	0793      	lsls	r3, r2, #30
 8001c80:	d504      	bpl.n	8001c8c <HAL_UART_IRQHandler+0x58>
 8001c82:	b11d      	cbz	r5, 8001c8c <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001c84:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c86:	f043 0304 	orr.w	r3, r3, #4
 8001c8a:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c8c:	0716      	lsls	r6, r2, #28
 8001c8e:	d504      	bpl.n	8001c9a <HAL_UART_IRQHandler+0x66>
 8001c90:	b11d      	cbz	r5, 8001c9a <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001c92:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c94:	f043 0308 	orr.w	r3, r3, #8
 8001c98:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001c9a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c9c:	b343      	cbz	r3, 8001cf0 <HAL_UART_IRQHandler+0xbc>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001c9e:	0695      	lsls	r5, r2, #26
 8001ca0:	d504      	bpl.n	8001cac <HAL_UART_IRQHandler+0x78>
 8001ca2:	0688      	lsls	r0, r1, #26
 8001ca4:	d502      	bpl.n	8001cac <HAL_UART_IRQHandler+0x78>
        UART_Receive_IT(huart);
 8001ca6:	4620      	mov	r0, r4
 8001ca8:	f7ff ff88 	bl	8001bbc <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001cac:	6823      	ldr	r3, [r4, #0]
 8001cae:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001cb0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001cb2:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 8001cb4:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001cb6:	d402      	bmi.n	8001cbe <HAL_UART_IRQHandler+0x8a>
 8001cb8:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8001cbc:	d019      	beq.n	8001cf2 <HAL_UART_IRQHandler+0xbe>
        UART_EndRxTransfer(huart);
 8001cbe:	f7ff fd43 	bl	8001748 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001cc2:	6823      	ldr	r3, [r4, #0]
 8001cc4:	695a      	ldr	r2, [r3, #20]
 8001cc6:	0652      	lsls	r2, r2, #25
 8001cc8:	d50f      	bpl.n	8001cea <HAL_UART_IRQHandler+0xb6>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001cca:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8001ccc:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001cce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cd2:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8001cd4:	b148      	cbz	r0, 8001cea <HAL_UART_IRQHandler+0xb6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001cd6:	4b26      	ldr	r3, [pc, #152]	; (8001d70 <HAL_UART_IRQHandler+0x13c>)
 8001cd8:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001cda:	f7fe fc87 	bl	80005ec <HAL_DMA_Abort_IT>
 8001cde:	b138      	cbz	r0, 8001cf0 <HAL_UART_IRQHandler+0xbc>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001ce0:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8001ce2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001ce6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001ce8:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8001cea:	4620      	mov	r0, r4
 8001cec:	f7ff ffa1 	bl	8001c32 <HAL_UART_ErrorCallback>
}
 8001cf0:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8001cf2:	f7ff ff9e 	bl	8001c32 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cf6:	63e5      	str	r5, [r4, #60]	; 0x3c
 8001cf8:	e7fa      	b.n	8001cf0 <HAL_UART_IRQHandler+0xbc>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001cfa:	0616      	lsls	r6, r2, #24
 8001cfc:	d528      	bpl.n	8001d50 <HAL_UART_IRQHandler+0x11c>
 8001cfe:	060d      	lsls	r5, r1, #24
 8001d00:	d526      	bpl.n	8001d50 <HAL_UART_IRQHandler+0x11c>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001d02:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001d06:	2a21      	cmp	r2, #33	; 0x21
 8001d08:	d1f2      	bne.n	8001cf0 <HAL_UART_IRQHandler+0xbc>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001d0a:	68a1      	ldr	r1, [r4, #8]
 8001d0c:	6a22      	ldr	r2, [r4, #32]
 8001d0e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8001d12:	d118      	bne.n	8001d46 <HAL_UART_IRQHandler+0x112>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001d14:	8811      	ldrh	r1, [r2, #0]
 8001d16:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001d1a:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001d1c:	6921      	ldr	r1, [r4, #16]
 8001d1e:	b981      	cbnz	r1, 8001d42 <HAL_UART_IRQHandler+0x10e>
        huart->pTxBuffPtr += 2U;
 8001d20:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8001d22:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8001d24:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001d26:	3a01      	subs	r2, #1
 8001d28:	b292      	uxth	r2, r2
 8001d2a:	84e2      	strh	r2, [r4, #38]	; 0x26
 8001d2c:	2a00      	cmp	r2, #0
 8001d2e:	d1df      	bne.n	8001cf0 <HAL_UART_IRQHandler+0xbc>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001d30:	68da      	ldr	r2, [r3, #12]
 8001d32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d36:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001d38:	68da      	ldr	r2, [r3, #12]
 8001d3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d3e:	60da      	str	r2, [r3, #12]
 8001d40:	e7d6      	b.n	8001cf0 <HAL_UART_IRQHandler+0xbc>
        huart->pTxBuffPtr += 1U;
 8001d42:	3201      	adds	r2, #1
 8001d44:	e7ed      	b.n	8001d22 <HAL_UART_IRQHandler+0xee>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001d46:	1c51      	adds	r1, r2, #1
 8001d48:	6221      	str	r1, [r4, #32]
 8001d4a:	7812      	ldrb	r2, [r2, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	e7e9      	b.n	8001d24 <HAL_UART_IRQHandler+0xf0>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001d50:	0650      	lsls	r0, r2, #25
 8001d52:	d5cd      	bpl.n	8001cf0 <HAL_UART_IRQHandler+0xbc>
 8001d54:	064a      	lsls	r2, r1, #25
 8001d56:	d5cb      	bpl.n	8001cf0 <HAL_UART_IRQHandler+0xbc>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001d58:	68da      	ldr	r2, [r3, #12]
 8001d5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d5e:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001d60:	2320      	movs	r3, #32
 8001d62:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001d66:	4620      	mov	r0, r4
 8001d68:	f7ff ff26 	bl	8001bb8 <HAL_UART_TxCpltCallback>
 8001d6c:	e7c0      	b.n	8001cf0 <HAL_UART_IRQHandler+0xbc>
 8001d6e:	bf00      	nop
 8001d70:	08001d75 	.word	0x08001d75

08001d74 <UART_DMAAbortOnError>:
{
 8001d74:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d76:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001d7c:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8001d7e:	f7ff ff58 	bl	8001c32 <HAL_UART_ErrorCallback>
}
 8001d82:	bd08      	pop	{r3, pc}

08001d84 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001d84:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8001d86:	f000 fa3b 	bl	8002200 <vTaskStartScheduler>
  
  return osOK;
}
 8001d8a:	2000      	movs	r0, #0
 8001d8c:	bd08      	pop	{r3, pc}

08001d8e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001d8e:	b570      	push	{r4, r5, r6, lr}
 8001d90:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001d92:	6946      	ldr	r6, [r0, #20]
 8001d94:	692a      	ldr	r2, [r5, #16]
 8001d96:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
{
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	b086      	sub	sp, #24
 8001d9e:	e9d0 1000 	ldrd	r1, r0, [r0]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001da2:	b176      	cbz	r6, 8001dc2 <osThreadCreate+0x34>
 8001da4:	69ad      	ldr	r5, [r5, #24]
 8001da6:	b165      	cbz	r5, 8001dc2 <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 8001da8:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8001daa:	bf14      	ite	ne
 8001dac:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001dae:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001db0:	e9cd 6501 	strd	r6, r5, [sp, #4]
 8001db4:	9400      	str	r4, [sp, #0]
 8001db6:	f000 f9bf 	bl	8002138 <xTaskCreateStatic>
 8001dba:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001dbc:	9805      	ldr	r0, [sp, #20]
}
 8001dbe:	b006      	add	sp, #24
 8001dc0:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 8001dc2:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8001dc4:	bf14      	ite	ne
 8001dc6:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001dc8:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001dca:	ad05      	add	r5, sp, #20
 8001dcc:	b292      	uxth	r2, r2
 8001dce:	e9cd 4500 	strd	r4, r5, [sp]
 8001dd2:	f000 f9e8 	bl	80021a6 <xTaskCreate>
 8001dd6:	2801      	cmp	r0, #1
 8001dd8:	d0f0      	beq.n	8001dbc <osThreadCreate+0x2e>
      return NULL;
 8001dda:	2000      	movs	r0, #0
 8001ddc:	e7ef      	b.n	8001dbe <osThreadCreate+0x30>

08001dde <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001dde:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001de2:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001de6:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001de8:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001dec:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001dee:	2300      	movs	r3, #0
 8001df0:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001df2:	4770      	bx	lr

08001df4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001df8:	4770      	bx	lr

08001dfa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001dfa:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001dfc:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001dfe:	689a      	ldr	r2, [r3, #8]
 8001e00:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001e06:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001e08:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001e0a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	6003      	str	r3, [r0, #0]
}
 8001e10:	4770      	bx	lr

08001e12 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001e12:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001e14:	1c53      	adds	r3, r2, #1
{
 8001e16:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8001e18:	d10a      	bne.n	8001e30 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001e1a:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001e1c:	685a      	ldr	r2, [r3, #4]
 8001e1e:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001e20:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001e22:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001e24:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001e26:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001e28:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	6003      	str	r3, [r0, #0]
}
 8001e2e:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e30:	f100 0308 	add.w	r3, r0, #8
 8001e34:	685c      	ldr	r4, [r3, #4]
 8001e36:	6825      	ldr	r5, [r4, #0]
 8001e38:	4295      	cmp	r5, r2
 8001e3a:	d8ef      	bhi.n	8001e1c <vListInsert+0xa>
 8001e3c:	4623      	mov	r3, r4
 8001e3e:	e7f9      	b.n	8001e34 <vListInsert+0x22>

08001e40 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001e40:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001e44:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001e46:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001e48:	6882      	ldr	r2, [r0, #8]
 8001e4a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001e4c:	6859      	ldr	r1, [r3, #4]
 8001e4e:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001e50:	bf08      	it	eq
 8001e52:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001e54:	2200      	movs	r2, #0
 8001e56:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	3a01      	subs	r2, #1
 8001e5c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001e5e:	6818      	ldr	r0, [r3, #0]
}
 8001e60:	4770      	bx	lr
	...

08001e64 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e68:	4606      	mov	r6, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001e6a:	f000 fbd3 	bl	8002614 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001e6e:	4b2e      	ldr	r3, [pc, #184]	; (8001f28 <prvAddNewTaskToReadyList+0xc4>)
		if( pxCurrentTCB == NULL )
 8001e70:	4c2e      	ldr	r4, [pc, #184]	; (8001f2c <prvAddNewTaskToReadyList+0xc8>)
		uxCurrentNumberOfTasks++;
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	4f2e      	ldr	r7, [pc, #184]	; (8001f30 <prvAddNewTaskToReadyList+0xcc>)
 8001e76:	3201      	adds	r2, #1
 8001e78:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8001e7a:	6825      	ldr	r5, [r4, #0]
 8001e7c:	2d00      	cmp	r5, #0
 8001e7e:	d148      	bne.n	8001f12 <prvAddNewTaskToReadyList+0xae>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001e80:	6026      	str	r6, [r4, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d11f      	bne.n	8001ec8 <prvAddNewTaskToReadyList+0x64>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001e88:	f04f 0814 	mov.w	r8, #20
 8001e8c:	fb08 7005 	mla	r0, r8, r5, r7
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001e90:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001e92:	f7ff ffa4 	bl	8001dde <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001e96:	2d07      	cmp	r5, #7
 8001e98:	d1f8      	bne.n	8001e8c <prvAddNewTaskToReadyList+0x28>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001e9a:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8001f5c <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 8001e9e:	4d25      	ldr	r5, [pc, #148]	; (8001f34 <prvAddNewTaskToReadyList+0xd0>)
	vListInitialise( &xDelayedTaskList1 );
 8001ea0:	4640      	mov	r0, r8
 8001ea2:	f7ff ff9c 	bl	8001dde <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001ea6:	4628      	mov	r0, r5
 8001ea8:	f7ff ff99 	bl	8001dde <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001eac:	4822      	ldr	r0, [pc, #136]	; (8001f38 <prvAddNewTaskToReadyList+0xd4>)
 8001eae:	f7ff ff96 	bl	8001dde <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001eb2:	4822      	ldr	r0, [pc, #136]	; (8001f3c <prvAddNewTaskToReadyList+0xd8>)
 8001eb4:	f7ff ff93 	bl	8001dde <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001eb8:	4821      	ldr	r0, [pc, #132]	; (8001f40 <prvAddNewTaskToReadyList+0xdc>)
 8001eba:	f7ff ff90 	bl	8001dde <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001ebe:	4b21      	ldr	r3, [pc, #132]	; (8001f44 <prvAddNewTaskToReadyList+0xe0>)
 8001ec0:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001ec4:	4b20      	ldr	r3, [pc, #128]	; (8001f48 <prvAddNewTaskToReadyList+0xe4>)
 8001ec6:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8001ec8:	4a20      	ldr	r2, [pc, #128]	; (8001f4c <prvAddNewTaskToReadyList+0xe8>)
		prvAddTaskToReadyList( pxNewTCB );
 8001eca:	4921      	ldr	r1, [pc, #132]	; (8001f50 <prvAddNewTaskToReadyList+0xec>)
		uxTaskNumber++;
 8001ecc:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001ece:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001ed4:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	4093      	lsls	r3, r2
 8001eda:	4303      	orrs	r3, r0
 8001edc:	2014      	movs	r0, #20
 8001ede:	600b      	str	r3, [r1, #0]
 8001ee0:	fb00 7002 	mla	r0, r0, r2, r7
 8001ee4:	1d31      	adds	r1, r6, #4
 8001ee6:	f7ff ff88 	bl	8001dfa <vListInsertEnd>
	taskEXIT_CRITICAL();
 8001eea:	f000 fbb5 	bl	8002658 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8001eee:	4b19      	ldr	r3, [pc, #100]	; (8001f54 <prvAddNewTaskToReadyList+0xf0>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	b163      	cbz	r3, 8001f0e <prvAddNewTaskToReadyList+0xaa>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001ef4:	6823      	ldr	r3, [r4, #0]
 8001ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ef8:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d207      	bcs.n	8001f0e <prvAddNewTaskToReadyList+0xaa>
			taskYIELD_IF_USING_PREEMPTION();
 8001efe:	4b16      	ldr	r3, [pc, #88]	; (8001f58 <prvAddNewTaskToReadyList+0xf4>)
 8001f00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	f3bf 8f4f 	dsb	sy
 8001f0a:	f3bf 8f6f 	isb	sy
}
 8001f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8001f12:	4b10      	ldr	r3, [pc, #64]	; (8001f54 <prvAddNewTaskToReadyList+0xf0>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1d6      	bne.n	8001ec8 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001f1a:	6823      	ldr	r3, [r4, #0]
 8001f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f1e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8001f20:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8001f22:	bf98      	it	ls
 8001f24:	6026      	strls	r6, [r4, #0]
 8001f26:	e7cf      	b.n	8001ec8 <prvAddNewTaskToReadyList+0x64>
 8001f28:	200000c8 	.word	0x200000c8
 8001f2c:	20000030 	.word	0x20000030
 8001f30:	2000003c 	.word	0x2000003c
 8001f34:	200000f4 	.word	0x200000f4
 8001f38:	20000110 	.word	0x20000110
 8001f3c:	2000013c 	.word	0x2000013c
 8001f40:	20000128 	.word	0x20000128
 8001f44:	20000034 	.word	0x20000034
 8001f48:	20000038 	.word	0x20000038
 8001f4c:	200000d8 	.word	0x200000d8
 8001f50:	200000dc 	.word	0x200000dc
 8001f54:	20000124 	.word	0x20000124
 8001f58:	e000ed04 	.word	0xe000ed04
 8001f5c:	200000e0 	.word	0x200000e0

08001f60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001f60:	b510      	push	{r4, lr}
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8001f62:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
	{
 8001f66:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8001f68:	b93b      	cbnz	r3, 8001f7a <prvDeleteTCB+0x1a>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8001f6a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8001f6c:	f000 fd20 	bl	80029b0 <vPortFree>
				vPortFree( pxTCB );
 8001f70:	4620      	mov	r0, r4
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001f72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8001f76:	f000 bd1b 	b.w	80029b0 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d0f9      	beq.n	8001f72 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d008      	beq.n	8001f94 <prvDeleteTCB+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f86:	f383 8811 	msr	BASEPRI, r3
 8001f8a:	f3bf 8f6f 	isb	sy
 8001f8e:	f3bf 8f4f 	dsb	sy
 8001f92:	e7fe      	b.n	8001f92 <prvDeleteTCB+0x32>
	}
 8001f94:	bd10      	pop	{r4, pc}
	...

08001f98 <prvIdleTask>:
{
 8001f98:	b580      	push	{r7, lr}
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001f9a:	4e14      	ldr	r6, [pc, #80]	; (8001fec <prvIdleTask+0x54>)
				taskYIELD();
 8001f9c:	4f14      	ldr	r7, [pc, #80]	; (8001ff0 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001f9e:	4c15      	ldr	r4, [pc, #84]	; (8001ff4 <prvIdleTask+0x5c>)
				--uxCurrentNumberOfTasks;
 8001fa0:	4d15      	ldr	r5, [pc, #84]	; (8001ff8 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001fa2:	6823      	ldr	r3, [r4, #0]
 8001fa4:	b96b      	cbnz	r3, 8001fc2 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001fa6:	4b15      	ldr	r3, [pc, #84]	; (8001ffc <prvIdleTask+0x64>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d906      	bls.n	8001fbc <prvIdleTask+0x24>
				taskYIELD();
 8001fae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001fb2:	603b      	str	r3, [r7, #0]
 8001fb4:	f3bf 8f4f 	dsb	sy
 8001fb8:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 8001fbc:	f000 fd30 	bl	8002a20 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8001fc0:	e7ed      	b.n	8001f9e <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 8001fc2:	f000 fb27 	bl	8002614 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001fc6:	68f3      	ldr	r3, [r6, #12]
 8001fc8:	f8d3 800c 	ldr.w	r8, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001fcc:	f108 0004 	add.w	r0, r8, #4
 8001fd0:	f7ff ff36 	bl	8001e40 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001fd4:	682b      	ldr	r3, [r5, #0]
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001fda:	6823      	ldr	r3, [r4, #0]
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8001fe0:	f000 fb3a 	bl	8002658 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8001fe4:	4640      	mov	r0, r8
 8001fe6:	f7ff ffbb 	bl	8001f60 <prvDeleteTCB>
 8001fea:	e7da      	b.n	8001fa2 <prvIdleTask+0xa>
 8001fec:	2000013c 	.word	0x2000013c
 8001ff0:	e000ed04 	.word	0xe000ed04
 8001ff4:	200000cc 	.word	0x200000cc
 8001ff8:	200000c8 	.word	0x200000c8
 8001ffc:	2000003c 	.word	0x2000003c

08002000 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002000:	4a06      	ldr	r2, [pc, #24]	; (800201c <prvResetNextTaskUnblockTime+0x1c>)
 8002002:	6813      	ldr	r3, [r2, #0]
 8002004:	6819      	ldr	r1, [r3, #0]
 8002006:	4b06      	ldr	r3, [pc, #24]	; (8002020 <prvResetNextTaskUnblockTime+0x20>)
 8002008:	b919      	cbnz	r1, 8002012 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800200a:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800200e:	601a      	str	r2, [r3, #0]
	}
}
 8002010:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002012:	6812      	ldr	r2, [r2, #0]
 8002014:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002016:	68d2      	ldr	r2, [r2, #12]
 8002018:	6852      	ldr	r2, [r2, #4]
 800201a:	e7f8      	b.n	800200e <prvResetNextTaskUnblockTime+0xe>
 800201c:	20000034 	.word	0x20000034
 8002020:	20000108 	.word	0x20000108

08002024 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8002024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002028:	e9dd 7409 	ldrd	r7, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800202c:	0096      	lsls	r6, r2, #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800202e:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002030:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8002032:	4680      	mov	r8, r0
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002034:	21a5      	movs	r1, #165	; 0xa5
 8002036:	6b20      	ldr	r0, [r4, #48]	; 0x30
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8002038:	4699      	mov	r9, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800203a:	f001 fe23 	bl	8003c84 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800203e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002040:	3e04      	subs	r6, #4
 8002042:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002044:	f026 0607 	bic.w	r6, r6, #7
 8002048:	1e6b      	subs	r3, r5, #1
 800204a:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800204e:	350f      	adds	r5, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002050:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8002054:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8002058:	7819      	ldrb	r1, [r3, #0]
 800205a:	b109      	cbz	r1, 8002060 <prvInitialiseNewTask.isra.2+0x3c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800205c:	42ab      	cmp	r3, r5
 800205e:	d1f7      	bne.n	8002050 <prvInitialiseNewTask.isra.2+0x2c>
 8002060:	9d08      	ldr	r5, [sp, #32]
 8002062:	2d06      	cmp	r5, #6
 8002064:	bf28      	it	cs
 8002066:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002068:	f04f 0a00 	mov.w	sl, #0
	pxNewTCB->uxPriority = uxPriority;
 800206c:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
 800206e:	e9c4 5a11 	strd	r5, sl, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002072:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002074:	f884 a043 	strb.w	sl, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002078:	f7ff febc 	bl	8001df4 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800207c:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002080:	f104 0018 	add.w	r0, r4, #24
 8002084:	f7ff feb6 	bl	8001df4 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8002088:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800208c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800208e:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002090:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002092:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002096:	464a      	mov	r2, r9
 8002098:	4641      	mov	r1, r8
 800209a:	4630      	mov	r0, r6
 800209c:	f000 fa92 	bl	80025c4 <pxPortInitialiseStack>
 80020a0:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80020a2:	b107      	cbz	r7, 80020a6 <prvInitialiseNewTask.isra.2+0x82>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80020a4:	603c      	str	r4, [r7, #0]
}
 80020a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080020ac <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80020ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80020ae:	4b1b      	ldr	r3, [pc, #108]	; (800211c <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80020b0:	4e1b      	ldr	r6, [pc, #108]	; (8002120 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 80020b2:	681c      	ldr	r4, [r3, #0]
{
 80020b4:	4605      	mov	r5, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80020b6:	6830      	ldr	r0, [r6, #0]
 80020b8:	3004      	adds	r0, #4
{
 80020ba:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80020bc:	f7ff fec0 	bl	8001e40 <uxListRemove>
 80020c0:	4633      	mov	r3, r6
 80020c2:	b940      	cbnz	r0, 80020d6 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80020c4:	6831      	ldr	r1, [r6, #0]
 80020c6:	4e17      	ldr	r6, [pc, #92]	; (8002124 <prvAddCurrentTaskToDelayedList+0x78>)
 80020c8:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80020ca:	6832      	ldr	r2, [r6, #0]
 80020cc:	2001      	movs	r0, #1
 80020ce:	4088      	lsls	r0, r1
 80020d0:	ea22 0200 	bic.w	r2, r2, r0
 80020d4:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80020d6:	1c6a      	adds	r2, r5, #1
 80020d8:	d107      	bne.n	80020ea <prvAddCurrentTaskToDelayedList+0x3e>
 80020da:	b137      	cbz	r7, 80020ea <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80020dc:	6819      	ldr	r1, [r3, #0]
 80020de:	4812      	ldr	r0, [pc, #72]	; (8002128 <prvAddCurrentTaskToDelayedList+0x7c>)
 80020e0:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80020e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80020e6:	f7ff be88 	b.w	8001dfa <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	1964      	adds	r4, r4, r5
 80020ee:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 80020f0:	d307      	bcc.n	8002102 <prvAddCurrentTaskToDelayedList+0x56>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80020f2:	4a0e      	ldr	r2, [pc, #56]	; (800212c <prvAddCurrentTaskToDelayedList+0x80>)
 80020f4:	6810      	ldr	r0, [r2, #0]
 80020f6:	6819      	ldr	r1, [r3, #0]
}
 80020f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80020fc:	3104      	adds	r1, #4
 80020fe:	f7ff be88 	b.w	8001e12 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002102:	4a0b      	ldr	r2, [pc, #44]	; (8002130 <prvAddCurrentTaskToDelayedList+0x84>)
 8002104:	6810      	ldr	r0, [r2, #0]
 8002106:	6819      	ldr	r1, [r3, #0]
 8002108:	3104      	adds	r1, #4
 800210a:	f7ff fe82 	bl	8001e12 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800210e:	4b09      	ldr	r3, [pc, #36]	; (8002134 <prvAddCurrentTaskToDelayedList+0x88>)
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8002114:	bf88      	it	hi
 8002116:	601c      	strhi	r4, [r3, #0]
}
 8002118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800211a:	bf00      	nop
 800211c:	20000150 	.word	0x20000150
 8002120:	20000030 	.word	0x20000030
 8002124:	200000dc 	.word	0x200000dc
 8002128:	20000128 	.word	0x20000128
 800212c:	20000038 	.word	0x20000038
 8002130:	20000034 	.word	0x20000034
 8002134:	20000108 	.word	0x20000108

08002138 <xTaskCreateStatic>:
	{
 8002138:	b570      	push	{r4, r5, r6, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8002140:	b945      	cbnz	r5, 8002154 <xTaskCreateStatic+0x1c>
 8002142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002146:	f383 8811 	msr	BASEPRI, r3
 800214a:	f3bf 8f6f 	isb	sy
 800214e:	f3bf 8f4f 	dsb	sy
 8002152:	e7fe      	b.n	8002152 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8002154:	b944      	cbnz	r4, 8002168 <xTaskCreateStatic+0x30>
 8002156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800215a:	f383 8811 	msr	BASEPRI, r3
 800215e:	f3bf 8f6f 	isb	sy
 8002162:	f3bf 8f4f 	dsb	sy
 8002166:	e7fe      	b.n	8002166 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8002168:	2654      	movs	r6, #84	; 0x54
 800216a:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800216c:	9e04      	ldr	r6, [sp, #16]
 800216e:	2e54      	cmp	r6, #84	; 0x54
 8002170:	d008      	beq.n	8002184 <xTaskCreateStatic+0x4c>
 8002172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002176:	f383 8811 	msr	BASEPRI, r3
 800217a:	f3bf 8f6f 	isb	sy
 800217e:	f3bf 8f4f 	dsb	sy
 8002182:	e7fe      	b.n	8002182 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002184:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002186:	2502      	movs	r5, #2
 8002188:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800218c:	ad05      	add	r5, sp, #20
 800218e:	9501      	str	r5, [sp, #4]
 8002190:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8002192:	9402      	str	r4, [sp, #8]
 8002194:	9500      	str	r5, [sp, #0]
 8002196:	f7ff ff45 	bl	8002024 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 800219a:	4620      	mov	r0, r4
 800219c:	f7ff fe62 	bl	8001e64 <prvAddNewTaskToReadyList>
	}
 80021a0:	9805      	ldr	r0, [sp, #20]
 80021a2:	b006      	add	sp, #24
 80021a4:	bd70      	pop	{r4, r5, r6, pc}

080021a6 <xTaskCreate>:
	{
 80021a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80021aa:	4607      	mov	r7, r0
 80021ac:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80021ae:	0090      	lsls	r0, r2, #2
	{
 80021b0:	4688      	mov	r8, r1
 80021b2:	4616      	mov	r6, r2
 80021b4:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80021b6:	f000 fb6f 	bl	8002898 <pvPortMalloc>
			if( pxStack != NULL )
 80021ba:	4605      	mov	r5, r0
 80021bc:	b1e8      	cbz	r0, 80021fa <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80021be:	2054      	movs	r0, #84	; 0x54
 80021c0:	f000 fb6a 	bl	8002898 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80021c4:	4604      	mov	r4, r0
 80021c6:	b1a8      	cbz	r0, 80021f4 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80021c8:	2300      	movs	r3, #0
 80021ca:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80021ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 80021d0:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80021d2:	9301      	str	r3, [sp, #4]
 80021d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80021d6:	9002      	str	r0, [sp, #8]
 80021d8:	9300      	str	r3, [sp, #0]
 80021da:	4632      	mov	r2, r6
 80021dc:	464b      	mov	r3, r9
 80021de:	4641      	mov	r1, r8
 80021e0:	4638      	mov	r0, r7
 80021e2:	f7ff ff1f 	bl	8002024 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 80021e6:	4620      	mov	r0, r4
 80021e8:	f7ff fe3c 	bl	8001e64 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80021ec:	2001      	movs	r0, #1
	}
 80021ee:	b005      	add	sp, #20
 80021f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 80021f4:	4628      	mov	r0, r5
 80021f6:	f000 fbdb 	bl	80029b0 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80021fa:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 80021fe:	e7f6      	b.n	80021ee <xTaskCreate+0x48>

08002200 <vTaskStartScheduler>:
{
 8002200:	b510      	push	{r4, lr}
 8002202:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002204:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002206:	aa07      	add	r2, sp, #28
 8002208:	a906      	add	r1, sp, #24
 800220a:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800220c:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002210:	f000 fc08 	bl	8002a24 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002214:	9b05      	ldr	r3, [sp, #20]
 8002216:	9302      	str	r3, [sp, #8]
 8002218:	9b06      	ldr	r3, [sp, #24]
 800221a:	9a07      	ldr	r2, [sp, #28]
 800221c:	490e      	ldr	r1, [pc, #56]	; (8002258 <vTaskStartScheduler+0x58>)
 800221e:	480f      	ldr	r0, [pc, #60]	; (800225c <vTaskStartScheduler+0x5c>)
 8002220:	e9cd 4300 	strd	r4, r3, [sp]
 8002224:	4623      	mov	r3, r4
 8002226:	f7ff ff87 	bl	8002138 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800222a:	b190      	cbz	r0, 8002252 <vTaskStartScheduler+0x52>
 800222c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002230:	f383 8811 	msr	BASEPRI, r3
 8002234:	f3bf 8f6f 	isb	sy
 8002238:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800223c:	4b08      	ldr	r3, [pc, #32]	; (8002260 <vTaskStartScheduler+0x60>)
 800223e:	f04f 32ff 	mov.w	r2, #4294967295
 8002242:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002244:	4b07      	ldr	r3, [pc, #28]	; (8002264 <vTaskStartScheduler+0x64>)
 8002246:	2201      	movs	r2, #1
 8002248:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800224a:	4b07      	ldr	r3, [pc, #28]	; (8002268 <vTaskStartScheduler+0x68>)
 800224c:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800224e:	f000 fa79 	bl	8002744 <xPortStartScheduler>
}
 8002252:	b008      	add	sp, #32
 8002254:	bd10      	pop	{r4, pc}
 8002256:	bf00      	nop
 8002258:	08003cc8 	.word	0x08003cc8
 800225c:	08001f99 	.word	0x08001f99
 8002260:	20000108 	.word	0x20000108
 8002264:	20000124 	.word	0x20000124
 8002268:	20000150 	.word	0x20000150

0800226c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800226c:	4a02      	ldr	r2, [pc, #8]	; (8002278 <vTaskSuspendAll+0xc>)
 800226e:	6813      	ldr	r3, [r2, #0]
 8002270:	3301      	adds	r3, #1
 8002272:	6013      	str	r3, [r2, #0]
}
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	200000d4 	.word	0x200000d4

0800227c <xTaskIncrementTick>:
{
 800227c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002280:	4b3c      	ldr	r3, [pc, #240]	; (8002374 <xTaskIncrementTick+0xf8>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d16e      	bne.n	8002366 <xTaskIncrementTick+0xea>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002288:	4b3b      	ldr	r3, [pc, #236]	; (8002378 <xTaskIncrementTick+0xfc>)
 800228a:	681c      	ldr	r4, [r3, #0]
 800228c:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800228e:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002290:	b9bc      	cbnz	r4, 80022c2 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8002292:	4b3a      	ldr	r3, [pc, #232]	; (800237c <xTaskIncrementTick+0x100>)
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	6812      	ldr	r2, [r2, #0]
 8002298:	b142      	cbz	r2, 80022ac <xTaskIncrementTick+0x30>
 800229a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800229e:	f383 8811 	msr	BASEPRI, r3
 80022a2:	f3bf 8f6f 	isb	sy
 80022a6:	f3bf 8f4f 	dsb	sy
 80022aa:	e7fe      	b.n	80022aa <xTaskIncrementTick+0x2e>
 80022ac:	4a34      	ldr	r2, [pc, #208]	; (8002380 <xTaskIncrementTick+0x104>)
 80022ae:	6819      	ldr	r1, [r3, #0]
 80022b0:	6810      	ldr	r0, [r2, #0]
 80022b2:	6018      	str	r0, [r3, #0]
 80022b4:	6011      	str	r1, [r2, #0]
 80022b6:	4a33      	ldr	r2, [pc, #204]	; (8002384 <xTaskIncrementTick+0x108>)
 80022b8:	6813      	ldr	r3, [r2, #0]
 80022ba:	3301      	adds	r3, #1
 80022bc:	6013      	str	r3, [r2, #0]
 80022be:	f7ff fe9f 	bl	8002000 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80022c2:	4d31      	ldr	r5, [pc, #196]	; (8002388 <xTaskIncrementTick+0x10c>)
 80022c4:	4f31      	ldr	r7, [pc, #196]	; (800238c <xTaskIncrementTick+0x110>)
 80022c6:	682b      	ldr	r3, [r5, #0]
 80022c8:	42a3      	cmp	r3, r4
BaseType_t xSwitchRequired = pdFALSE;
 80022ca:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 80022ce:	d911      	bls.n	80022f4 <xTaskIncrementTick+0x78>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	4b2f      	ldr	r3, [pc, #188]	; (8002390 <xTaskIncrementTick+0x114>)
 80022d4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80022d6:	2214      	movs	r2, #20
 80022d8:	434a      	muls	r2, r1
 80022da:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 80022dc:	2a02      	cmp	r2, #2
 80022de:	bf28      	it	cs
 80022e0:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 80022e4:	4a2b      	ldr	r2, [pc, #172]	; (8002394 <xTaskIncrementTick+0x118>)
 80022e6:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 80022e8:	2a00      	cmp	r2, #0
}
 80022ea:	bf0c      	ite	eq
 80022ec:	4658      	moveq	r0, fp
 80022ee:	2001      	movne	r0, #1
 80022f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80022f4:	f8df a084 	ldr.w	sl, [pc, #132]	; 800237c <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 80022f8:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 800239c <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80022fc:	f8da 2000 	ldr.w	r2, [sl]
 8002300:	6812      	ldr	r2, [r2, #0]
 8002302:	b91a      	cbnz	r2, 800230c <xTaskIncrementTick+0x90>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002304:	f04f 32ff 	mov.w	r2, #4294967295
 8002308:	602a      	str	r2, [r5, #0]
					break;
 800230a:	e7e1      	b.n	80022d0 <xTaskIncrementTick+0x54>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800230c:	f8da 2000 	ldr.w	r2, [sl]
 8002310:	68d2      	ldr	r2, [r2, #12]
 8002312:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002314:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8002316:	428c      	cmp	r4, r1
 8002318:	d201      	bcs.n	800231e <xTaskIncrementTick+0xa2>
						xNextTaskUnblockTime = xItemValue;
 800231a:	6029      	str	r1, [r5, #0]
						break;
 800231c:	e7d8      	b.n	80022d0 <xTaskIncrementTick+0x54>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800231e:	f106 0804 	add.w	r8, r6, #4
 8002322:	4640      	mov	r0, r8
 8002324:	f7ff fd8c 	bl	8001e40 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002328:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 800232a:	b119      	cbz	r1, 8002334 <xTaskIncrementTick+0xb8>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800232c:	f106 0018 	add.w	r0, r6, #24
 8002330:	f7ff fd86 	bl	8001e40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002334:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8002336:	f8d9 3000 	ldr.w	r3, [r9]
 800233a:	2201      	movs	r2, #1
 800233c:	fa02 f100 	lsl.w	r1, r2, r0
 8002340:	4319      	orrs	r1, r3
 8002342:	4b13      	ldr	r3, [pc, #76]	; (8002390 <xTaskIncrementTick+0x114>)
 8002344:	f8c9 1000 	str.w	r1, [r9]
 8002348:	f04f 0c14 	mov.w	ip, #20
 800234c:	4641      	mov	r1, r8
 800234e:	fb0c 3000 	mla	r0, ip, r0, r3
 8002352:	f7ff fd52 	bl	8001dfa <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002356:	6838      	ldr	r0, [r7, #0]
 8002358:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 800235a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800235c:	4291      	cmp	r1, r2
 800235e:	bf28      	it	cs
 8002360:	f04f 0b01 	movcs.w	fp, #1
 8002364:	e7ca      	b.n	80022fc <xTaskIncrementTick+0x80>
		++uxPendedTicks;
 8002366:	4a0c      	ldr	r2, [pc, #48]	; (8002398 <xTaskIncrementTick+0x11c>)
 8002368:	6813      	ldr	r3, [r2, #0]
 800236a:	3301      	adds	r3, #1
 800236c:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800236e:	f04f 0b00 	mov.w	fp, #0
 8002372:	e7b7      	b.n	80022e4 <xTaskIncrementTick+0x68>
 8002374:	200000d4 	.word	0x200000d4
 8002378:	20000150 	.word	0x20000150
 800237c:	20000034 	.word	0x20000034
 8002380:	20000038 	.word	0x20000038
 8002384:	2000010c 	.word	0x2000010c
 8002388:	20000108 	.word	0x20000108
 800238c:	20000030 	.word	0x20000030
 8002390:	2000003c 	.word	0x2000003c
 8002394:	20000154 	.word	0x20000154
 8002398:	200000d0 	.word	0x200000d0
 800239c:	200000dc 	.word	0x200000dc

080023a0 <xTaskResumeAll>:
{
 80023a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 80023a4:	4c30      	ldr	r4, [pc, #192]	; (8002468 <xTaskResumeAll+0xc8>)
 80023a6:	6823      	ldr	r3, [r4, #0]
 80023a8:	b943      	cbnz	r3, 80023bc <xTaskResumeAll+0x1c>
 80023aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ae:	f383 8811 	msr	BASEPRI, r3
 80023b2:	f3bf 8f6f 	isb	sy
 80023b6:	f3bf 8f4f 	dsb	sy
 80023ba:	e7fe      	b.n	80023ba <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 80023bc:	f000 f92a 	bl	8002614 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80023c0:	6823      	ldr	r3, [r4, #0]
 80023c2:	3b01      	subs	r3, #1
 80023c4:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80023c6:	6824      	ldr	r4, [r4, #0]
 80023c8:	b12c      	cbz	r4, 80023d6 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80023ca:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80023cc:	f000 f944 	bl	8002658 <vPortExitCritical>
}
 80023d0:	4620      	mov	r0, r4
 80023d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80023d6:	4b25      	ldr	r3, [pc, #148]	; (800246c <xTaskResumeAll+0xcc>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0f5      	beq.n	80023ca <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80023de:	4d24      	ldr	r5, [pc, #144]	; (8002470 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 80023e0:	4e24      	ldr	r6, [pc, #144]	; (8002474 <xTaskResumeAll+0xd4>)
 80023e2:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8002488 <xTaskResumeAll+0xe8>
 80023e6:	e01f      	b.n	8002428 <xTaskResumeAll+0x88>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80023e8:	68eb      	ldr	r3, [r5, #12]
 80023ea:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80023ec:	f104 0904 	add.w	r9, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80023f0:	f104 0018 	add.w	r0, r4, #24
 80023f4:	f7ff fd24 	bl	8001e40 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80023f8:	4648      	mov	r0, r9
 80023fa:	f7ff fd21 	bl	8001e40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80023fe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002400:	6831      	ldr	r1, [r6, #0]
 8002402:	2701      	movs	r7, #1
 8002404:	fa07 f302 	lsl.w	r3, r7, r2
 8002408:	2014      	movs	r0, #20
 800240a:	430b      	orrs	r3, r1
 800240c:	fb00 8002 	mla	r0, r0, r2, r8
 8002410:	4649      	mov	r1, r9
 8002412:	6033      	str	r3, [r6, #0]
 8002414:	f7ff fcf1 	bl	8001dfa <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002418:	4b17      	ldr	r3, [pc, #92]	; (8002478 <xTaskResumeAll+0xd8>)
 800241a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002420:	429a      	cmp	r2, r3
 8002422:	d301      	bcc.n	8002428 <xTaskResumeAll+0x88>
						xYieldPending = pdTRUE;
 8002424:	4b15      	ldr	r3, [pc, #84]	; (800247c <xTaskResumeAll+0xdc>)
 8002426:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002428:	682b      	ldr	r3, [r5, #0]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1dc      	bne.n	80023e8 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 800242e:	b10c      	cbz	r4, 8002434 <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
 8002430:	f7ff fde6 	bl	8002000 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002434:	4d12      	ldr	r5, [pc, #72]	; (8002480 <xTaskResumeAll+0xe0>)
 8002436:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002438:	b144      	cbz	r4, 800244c <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 800243a:	4e10      	ldr	r6, [pc, #64]	; (800247c <xTaskResumeAll+0xdc>)
 800243c:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800243e:	f7ff ff1d 	bl	800227c <xTaskIncrementTick>
 8002442:	b100      	cbz	r0, 8002446 <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 8002444:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002446:	3c01      	subs	r4, #1
 8002448:	d1f9      	bne.n	800243e <xTaskResumeAll+0x9e>
						uxPendedTicks = 0;
 800244a:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800244c:	4b0b      	ldr	r3, [pc, #44]	; (800247c <xTaskResumeAll+0xdc>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0ba      	beq.n	80023ca <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8002454:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <xTaskResumeAll+0xe4>)
 8002456:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	f3bf 8f4f 	dsb	sy
 8002460:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8002464:	2401      	movs	r4, #1
 8002466:	e7b1      	b.n	80023cc <xTaskResumeAll+0x2c>
 8002468:	200000d4 	.word	0x200000d4
 800246c:	200000c8 	.word	0x200000c8
 8002470:	20000110 	.word	0x20000110
 8002474:	200000dc 	.word	0x200000dc
 8002478:	20000030 	.word	0x20000030
 800247c:	20000154 	.word	0x20000154
 8002480:	200000d0 	.word	0x200000d0
 8002484:	e000ed04 	.word	0xe000ed04
 8002488:	2000003c 	.word	0x2000003c

0800248c <vTaskDelay>:
	{
 800248c:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800248e:	b940      	cbnz	r0, 80024a2 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8002490:	4b0e      	ldr	r3, [pc, #56]	; (80024cc <vTaskDelay+0x40>)
 8002492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	f3bf 8f4f 	dsb	sy
 800249c:	f3bf 8f6f 	isb	sy
	}
 80024a0:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80024a2:	4b0b      	ldr	r3, [pc, #44]	; (80024d0 <vTaskDelay+0x44>)
 80024a4:	6819      	ldr	r1, [r3, #0]
 80024a6:	b141      	cbz	r1, 80024ba <vTaskDelay+0x2e>
 80024a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ac:	f383 8811 	msr	BASEPRI, r3
 80024b0:	f3bf 8f6f 	isb	sy
 80024b4:	f3bf 8f4f 	dsb	sy
 80024b8:	e7fe      	b.n	80024b8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80024ba:	f7ff fed7 	bl	800226c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80024be:	f7ff fdf5 	bl	80020ac <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80024c2:	f7ff ff6d 	bl	80023a0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80024c6:	2800      	cmp	r0, #0
 80024c8:	d0e2      	beq.n	8002490 <vTaskDelay+0x4>
 80024ca:	e7e9      	b.n	80024a0 <vTaskDelay+0x14>
 80024cc:	e000ed04 	.word	0xe000ed04
 80024d0:	200000d4 	.word	0x200000d4

080024d4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80024d4:	4b17      	ldr	r3, [pc, #92]	; (8002534 <vTaskSwitchContext+0x60>)
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	4b17      	ldr	r3, [pc, #92]	; (8002538 <vTaskSwitchContext+0x64>)
{
 80024da:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80024dc:	b112      	cbz	r2, 80024e4 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80024de:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80024e0:	601a      	str	r2, [r3, #0]
}
 80024e2:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 80024e4:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80024e6:	4b15      	ldr	r3, [pc, #84]	; (800253c <vTaskSwitchContext+0x68>)
 80024e8:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80024ea:	fab3 f383 	clz	r3, r3
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	f1c3 031f 	rsb	r3, r3, #31
 80024f4:	2214      	movs	r2, #20
 80024f6:	4912      	ldr	r1, [pc, #72]	; (8002540 <vTaskSwitchContext+0x6c>)
 80024f8:	435a      	muls	r2, r3
 80024fa:	1888      	adds	r0, r1, r2
 80024fc:	588c      	ldr	r4, [r1, r2]
 80024fe:	b944      	cbnz	r4, 8002512 <vTaskSwitchContext+0x3e>
	__asm volatile
 8002500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002504:	f383 8811 	msr	BASEPRI, r3
 8002508:	f3bf 8f6f 	isb	sy
 800250c:	f3bf 8f4f 	dsb	sy
 8002510:	e7fe      	b.n	8002510 <vTaskSwitchContext+0x3c>
 8002512:	6844      	ldr	r4, [r0, #4]
 8002514:	3208      	adds	r2, #8
 8002516:	6864      	ldr	r4, [r4, #4]
 8002518:	6044      	str	r4, [r0, #4]
 800251a:	440a      	add	r2, r1
 800251c:	4294      	cmp	r4, r2
 800251e:	bf04      	itt	eq
 8002520:	6862      	ldreq	r2, [r4, #4]
 8002522:	6042      	streq	r2, [r0, #4]
 8002524:	2214      	movs	r2, #20
 8002526:	fb02 1303 	mla	r3, r2, r3, r1
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	68da      	ldr	r2, [r3, #12]
 800252e:	4b05      	ldr	r3, [pc, #20]	; (8002544 <vTaskSwitchContext+0x70>)
 8002530:	e7d6      	b.n	80024e0 <vTaskSwitchContext+0xc>
 8002532:	bf00      	nop
 8002534:	200000d4 	.word	0x200000d4
 8002538:	20000154 	.word	0x20000154
 800253c:	200000dc 	.word	0x200000dc
 8002540:	2000003c 	.word	0x2000003c
 8002544:	20000030 	.word	0x20000030

08002548 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002548:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800254a:	2300      	movs	r3, #0
 800254c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800254e:	4b0d      	ldr	r3, [pc, #52]	; (8002584 <prvTaskExitError+0x3c>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	3301      	adds	r3, #1
 8002554:	d008      	beq.n	8002568 <prvTaskExitError+0x20>
 8002556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800255a:	f383 8811 	msr	BASEPRI, r3
 800255e:	f3bf 8f6f 	isb	sy
 8002562:	f3bf 8f4f 	dsb	sy
 8002566:	e7fe      	b.n	8002566 <prvTaskExitError+0x1e>
 8002568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800256c:	f383 8811 	msr	BASEPRI, r3
 8002570:	f3bf 8f6f 	isb	sy
 8002574:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002578:	9b01      	ldr	r3, [sp, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0fc      	beq.n	8002578 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800257e:	b002      	add	sp, #8
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	20000000 	.word	0x20000000

08002588 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002588:	4808      	ldr	r0, [pc, #32]	; (80025ac <prvPortStartFirstTask+0x24>)
 800258a:	6800      	ldr	r0, [r0, #0]
 800258c:	6800      	ldr	r0, [r0, #0]
 800258e:	f380 8808 	msr	MSP, r0
 8002592:	f04f 0000 	mov.w	r0, #0
 8002596:	f380 8814 	msr	CONTROL, r0
 800259a:	b662      	cpsie	i
 800259c:	b661      	cpsie	f
 800259e:	f3bf 8f4f 	dsb	sy
 80025a2:	f3bf 8f6f 	isb	sy
 80025a6:	df00      	svc	0
 80025a8:	bf00      	nop
 80025aa:	0000      	.short	0x0000
 80025ac:	e000ed08 	.word	0xe000ed08

080025b0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80025b0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80025c0 <vPortEnableVFP+0x10>
 80025b4:	6801      	ldr	r1, [r0, #0]
 80025b6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80025ba:	6001      	str	r1, [r0, #0]
 80025bc:	4770      	bx	lr
 80025be:	0000      	.short	0x0000
 80025c0:	e000ed88 	.word	0xe000ed88

080025c4 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80025c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025c8:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80025cc:	4b07      	ldr	r3, [pc, #28]	; (80025ec <pxPortInitialiseStack+0x28>)
 80025ce:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80025d2:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80025d6:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80025da:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80025de:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80025e2:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80025e6:	3844      	subs	r0, #68	; 0x44
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	08002549 	.word	0x08002549

080025f0 <SVC_Handler>:
	__asm volatile (
 80025f0:	4b07      	ldr	r3, [pc, #28]	; (8002610 <pxCurrentTCBConst2>)
 80025f2:	6819      	ldr	r1, [r3, #0]
 80025f4:	6808      	ldr	r0, [r1, #0]
 80025f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025fa:	f380 8809 	msr	PSP, r0
 80025fe:	f3bf 8f6f 	isb	sy
 8002602:	f04f 0000 	mov.w	r0, #0
 8002606:	f380 8811 	msr	BASEPRI, r0
 800260a:	4770      	bx	lr
 800260c:	f3af 8000 	nop.w

08002610 <pxCurrentTCBConst2>:
 8002610:	20000030 	.word	0x20000030

08002614 <vPortEnterCritical>:
 8002614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002618:	f383 8811 	msr	BASEPRI, r3
 800261c:	f3bf 8f6f 	isb	sy
 8002620:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8002624:	4a0a      	ldr	r2, [pc, #40]	; (8002650 <vPortEnterCritical+0x3c>)
 8002626:	6813      	ldr	r3, [r2, #0]
 8002628:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800262a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800262c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800262e:	d10d      	bne.n	800264c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002630:	4b08      	ldr	r3, [pc, #32]	; (8002654 <vPortEnterCritical+0x40>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002638:	d008      	beq.n	800264c <vPortEnterCritical+0x38>
 800263a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800263e:	f383 8811 	msr	BASEPRI, r3
 8002642:	f3bf 8f6f 	isb	sy
 8002646:	f3bf 8f4f 	dsb	sy
 800264a:	e7fe      	b.n	800264a <vPortEnterCritical+0x36>
}
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	20000000 	.word	0x20000000
 8002654:	e000ed04 	.word	0xe000ed04

08002658 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8002658:	4a08      	ldr	r2, [pc, #32]	; (800267c <vPortExitCritical+0x24>)
 800265a:	6813      	ldr	r3, [r2, #0]
 800265c:	b943      	cbnz	r3, 8002670 <vPortExitCritical+0x18>
 800265e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002662:	f383 8811 	msr	BASEPRI, r3
 8002666:	f3bf 8f6f 	isb	sy
 800266a:	f3bf 8f4f 	dsb	sy
 800266e:	e7fe      	b.n	800266e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8002670:	3b01      	subs	r3, #1
 8002672:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002674:	b90b      	cbnz	r3, 800267a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002676:	f383 8811 	msr	BASEPRI, r3
}
 800267a:	4770      	bx	lr
 800267c:	20000000 	.word	0x20000000

08002680 <PendSV_Handler>:
	__asm volatile
 8002680:	f3ef 8009 	mrs	r0, PSP
 8002684:	f3bf 8f6f 	isb	sy
 8002688:	4b15      	ldr	r3, [pc, #84]	; (80026e0 <pxCurrentTCBConst>)
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	f01e 0f10 	tst.w	lr, #16
 8002690:	bf08      	it	eq
 8002692:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002696:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800269a:	6010      	str	r0, [r2, #0]
 800269c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80026a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80026a4:	f380 8811 	msr	BASEPRI, r0
 80026a8:	f3bf 8f4f 	dsb	sy
 80026ac:	f3bf 8f6f 	isb	sy
 80026b0:	f7ff ff10 	bl	80024d4 <vTaskSwitchContext>
 80026b4:	f04f 0000 	mov.w	r0, #0
 80026b8:	f380 8811 	msr	BASEPRI, r0
 80026bc:	bc09      	pop	{r0, r3}
 80026be:	6819      	ldr	r1, [r3, #0]
 80026c0:	6808      	ldr	r0, [r1, #0]
 80026c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026c6:	f01e 0f10 	tst.w	lr, #16
 80026ca:	bf08      	it	eq
 80026cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80026d0:	f380 8809 	msr	PSP, r0
 80026d4:	f3bf 8f6f 	isb	sy
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	f3af 8000 	nop.w

080026e0 <pxCurrentTCBConst>:
 80026e0:	20000030 	.word	0x20000030

080026e4 <SysTick_Handler>:
{
 80026e4:	b508      	push	{r3, lr}
	__asm volatile
 80026e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ea:	f383 8811 	msr	BASEPRI, r3
 80026ee:	f3bf 8f6f 	isb	sy
 80026f2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80026f6:	f7ff fdc1 	bl	800227c <xTaskIncrementTick>
 80026fa:	b118      	cbz	r0, 8002704 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80026fc:	4b03      	ldr	r3, [pc, #12]	; (800270c <SysTick_Handler+0x28>)
 80026fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002702:	601a      	str	r2, [r3, #0]
	__asm volatile
 8002704:	2300      	movs	r3, #0
 8002706:	f383 8811 	msr	BASEPRI, r3
}
 800270a:	bd08      	pop	{r3, pc}
 800270c:	e000ed04 	.word	0xe000ed04

08002710 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002710:	4a08      	ldr	r2, [pc, #32]	; (8002734 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002712:	4909      	ldr	r1, [pc, #36]	; (8002738 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002714:	2300      	movs	r3, #0
 8002716:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002718:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800271a:	4b08      	ldr	r3, [pc, #32]	; (800273c <vPortSetupTimerInterrupt+0x2c>)
 800271c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	fbb3 f3f1 	udiv	r3, r3, r1
 8002726:	4906      	ldr	r1, [pc, #24]	; (8002740 <vPortSetupTimerInterrupt+0x30>)
 8002728:	3b01      	subs	r3, #1
 800272a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800272c:	2307      	movs	r3, #7
 800272e:	6013      	str	r3, [r2, #0]
}
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	e000e010 	.word	0xe000e010
 8002738:	e000e018 	.word	0xe000e018
 800273c:	20000010 	.word	0x20000010
 8002740:	e000e014 	.word	0xe000e014

08002744 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002744:	4b39      	ldr	r3, [pc, #228]	; (800282c <xPortStartScheduler+0xe8>)
 8002746:	4a3a      	ldr	r2, [pc, #232]	; (8002830 <xPortStartScheduler+0xec>)
{
 8002748:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800274a:	6819      	ldr	r1, [r3, #0]
 800274c:	4291      	cmp	r1, r2
 800274e:	d108      	bne.n	8002762 <xPortStartScheduler+0x1e>
	__asm volatile
 8002750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002754:	f383 8811 	msr	BASEPRI, r3
 8002758:	f3bf 8f6f 	isb	sy
 800275c:	f3bf 8f4f 	dsb	sy
 8002760:	e7fe      	b.n	8002760 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	4b33      	ldr	r3, [pc, #204]	; (8002834 <xPortStartScheduler+0xf0>)
 8002766:	429a      	cmp	r2, r3
 8002768:	d108      	bne.n	800277c <xPortStartScheduler+0x38>
 800276a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800276e:	f383 8811 	msr	BASEPRI, r3
 8002772:	f3bf 8f6f 	isb	sy
 8002776:	f3bf 8f4f 	dsb	sy
 800277a:	e7fe      	b.n	800277a <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800277c:	4b2e      	ldr	r3, [pc, #184]	; (8002838 <xPortStartScheduler+0xf4>)
 800277e:	781a      	ldrb	r2, [r3, #0]
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002784:	22ff      	movs	r2, #255	; 0xff
 8002786:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002788:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800278a:	4a2c      	ldr	r2, [pc, #176]	; (800283c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800278c:	b2db      	uxtb	r3, r3
 800278e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002792:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002796:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800279a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800279c:	4b28      	ldr	r3, [pc, #160]	; (8002840 <xPortStartScheduler+0xfc>)
 800279e:	2207      	movs	r2, #7
 80027a0:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80027a2:	2100      	movs	r1, #0
 80027a4:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80027a8:	0600      	lsls	r0, r0, #24
 80027aa:	f102 34ff 	add.w	r4, r2, #4294967295
 80027ae:	d40d      	bmi.n	80027cc <xPortStartScheduler+0x88>
 80027b0:	b101      	cbz	r1, 80027b4 <xPortStartScheduler+0x70>
 80027b2:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	2a03      	cmp	r2, #3
 80027b8:	d011      	beq.n	80027de <xPortStartScheduler+0x9a>
 80027ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027be:	f383 8811 	msr	BASEPRI, r3
 80027c2:	f3bf 8f6f 	isb	sy
 80027c6:	f3bf 8f4f 	dsb	sy
 80027ca:	e7fe      	b.n	80027ca <xPortStartScheduler+0x86>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80027cc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80027d0:	0052      	lsls	r2, r2, #1
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	f88d 2003 	strb.w	r2, [sp, #3]
 80027d8:	2101      	movs	r1, #1
 80027da:	4622      	mov	r2, r4
 80027dc:	e7e2      	b.n	80027a4 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80027de:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80027e0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80027e4:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80027e6:	9b01      	ldr	r3, [sp, #4]
 80027e8:	4a13      	ldr	r2, [pc, #76]	; (8002838 <xPortStartScheduler+0xf4>)
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80027ee:	4b15      	ldr	r3, [pc, #84]	; (8002844 <xPortStartScheduler+0x100>)
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80027f6:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80027fe:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8002800:	f7ff ff86 	bl	8002710 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8002804:	4b10      	ldr	r3, [pc, #64]	; (8002848 <xPortStartScheduler+0x104>)
 8002806:	2400      	movs	r4, #0
 8002808:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 800280a:	f7ff fed1 	bl	80025b0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800280e:	4a0f      	ldr	r2, [pc, #60]	; (800284c <xPortStartScheduler+0x108>)
 8002810:	6813      	ldr	r3, [r2, #0]
 8002812:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002816:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8002818:	f7ff feb6 	bl	8002588 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800281c:	f7ff fe5a 	bl	80024d4 <vTaskSwitchContext>
	prvTaskExitError();
 8002820:	f7ff fe92 	bl	8002548 <prvTaskExitError>
}
 8002824:	4620      	mov	r0, r4
 8002826:	b002      	add	sp, #8
 8002828:	bd10      	pop	{r4, pc}
 800282a:	bf00      	nop
 800282c:	e000ed00 	.word	0xe000ed00
 8002830:	410fc271 	.word	0x410fc271
 8002834:	410fc270 	.word	0x410fc270
 8002838:	e000e400 	.word	0xe000e400
 800283c:	20000158 	.word	0x20000158
 8002840:	2000015c 	.word	0x2000015c
 8002844:	e000ed20 	.word	0xe000ed20
 8002848:	20000000 	.word	0x20000000
 800284c:	e000ef34 	.word	0xe000ef34

08002850 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002850:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002852:	4b0f      	ldr	r3, [pc, #60]	; (8002890 <prvInsertBlockIntoFreeList+0x40>)
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	4282      	cmp	r2, r0
 8002858:	d318      	bcc.n	800288c <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800285a:	685c      	ldr	r4, [r3, #4]
 800285c:	1919      	adds	r1, r3, r4
 800285e:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002860:	bf01      	itttt	eq
 8002862:	6841      	ldreq	r1, [r0, #4]
 8002864:	4618      	moveq	r0, r3
 8002866:	1909      	addeq	r1, r1, r4
 8002868:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800286a:	6844      	ldr	r4, [r0, #4]
 800286c:	1901      	adds	r1, r0, r4
 800286e:	428a      	cmp	r2, r1
 8002870:	d107      	bne.n	8002882 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002872:	4908      	ldr	r1, [pc, #32]	; (8002894 <prvInsertBlockIntoFreeList+0x44>)
 8002874:	6809      	ldr	r1, [r1, #0]
 8002876:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002878:	bf1f      	itttt	ne
 800287a:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800287c:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800287e:	1909      	addne	r1, r1, r4
 8002880:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002882:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002884:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002886:	bf18      	it	ne
 8002888:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800288a:	bd10      	pop	{r4, pc}
 800288c:	4613      	mov	r3, r2
 800288e:	e7e1      	b.n	8002854 <prvInsertBlockIntoFreeList+0x4>
 8002890:	20003d70 	.word	0x20003d70
 8002894:	20000160 	.word	0x20000160

08002898 <pvPortMalloc>:
{
 8002898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800289c:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800289e:	f7ff fce5 	bl	800226c <vTaskSuspendAll>
		if( pxEnd == NULL )
 80028a2:	493d      	ldr	r1, [pc, #244]	; (8002998 <pvPortMalloc+0x100>)
 80028a4:	4d3d      	ldr	r5, [pc, #244]	; (800299c <pvPortMalloc+0x104>)
 80028a6:	680b      	ldr	r3, [r1, #0]
 80028a8:	b9fb      	cbnz	r3, 80028ea <pvPortMalloc+0x52>
	uxAddress = ( size_t ) ucHeap;
 80028aa:	4a3d      	ldr	r2, [pc, #244]	; (80029a0 <pvPortMalloc+0x108>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80028ac:	0756      	lsls	r6, r2, #29
 80028ae:	f502 5370 	add.w	r3, r2, #15360	; 0x3c00
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80028b2:	bf1d      	ittte	ne
 80028b4:	3207      	addne	r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80028b6:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80028ba:	1a9b      	subne	r3, r3, r2
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80028bc:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80028c0:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80028c2:	4e38      	ldr	r6, [pc, #224]	; (80029a4 <pvPortMalloc+0x10c>)
	uxAddress -= xHeapStructSize;
 80028c4:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80028c6:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 80028ca:	2000      	movs	r0, #0
 80028cc:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80028ce:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 80028d0:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80028d4:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 80028d6:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80028d8:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80028dc:	4b32      	ldr	r3, [pc, #200]	; (80029a8 <pvPortMalloc+0x110>)
 80028de:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80028e0:	4b32      	ldr	r3, [pc, #200]	; (80029ac <pvPortMalloc+0x114>)
 80028e2:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80028e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80028e8:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80028ea:	682f      	ldr	r7, [r5, #0]
 80028ec:	4227      	tst	r7, r4
 80028ee:	d14e      	bne.n	800298e <pvPortMalloc+0xf6>
			if( xWantedSize > 0 )
 80028f0:	2c00      	cmp	r4, #0
 80028f2:	d03f      	beq.n	8002974 <pvPortMalloc+0xdc>
				xWantedSize += xHeapStructSize;
 80028f4:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80028f8:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80028fa:	bf1c      	itt	ne
 80028fc:	f023 0307 	bicne.w	r3, r3, #7
 8002900:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002902:	2b00      	cmp	r3, #0
 8002904:	d043      	beq.n	800298e <pvPortMalloc+0xf6>
 8002906:	4a29      	ldr	r2, [pc, #164]	; (80029ac <pvPortMalloc+0x114>)
 8002908:	6816      	ldr	r6, [r2, #0]
 800290a:	429e      	cmp	r6, r3
 800290c:	4690      	mov	r8, r2
 800290e:	d33e      	bcc.n	800298e <pvPortMalloc+0xf6>
				pxBlock = xStart.pxNextFreeBlock;
 8002910:	4a24      	ldr	r2, [pc, #144]	; (80029a4 <pvPortMalloc+0x10c>)
 8002912:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002914:	6868      	ldr	r0, [r5, #4]
 8002916:	4298      	cmp	r0, r3
 8002918:	d201      	bcs.n	800291e <pvPortMalloc+0x86>
 800291a:	682c      	ldr	r4, [r5, #0]
 800291c:	b9a4      	cbnz	r4, 8002948 <pvPortMalloc+0xb0>
				if( pxBlock != pxEnd )
 800291e:	6809      	ldr	r1, [r1, #0]
 8002920:	42a9      	cmp	r1, r5
 8002922:	d034      	beq.n	800298e <pvPortMalloc+0xf6>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002924:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002926:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002928:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800292a:	1ac2      	subs	r2, r0, r3
 800292c:	2a10      	cmp	r2, #16
 800292e:	d912      	bls.n	8002956 <pvPortMalloc+0xbe>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002930:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002932:	0741      	lsls	r1, r0, #29
 8002934:	d00b      	beq.n	800294e <pvPortMalloc+0xb6>
 8002936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800293a:	f383 8811 	msr	BASEPRI, r3
 800293e:	f3bf 8f6f 	isb	sy
 8002942:	f3bf 8f4f 	dsb	sy
 8002946:	e7fe      	b.n	8002946 <pvPortMalloc+0xae>
 8002948:	462a      	mov	r2, r5
 800294a:	4625      	mov	r5, r4
 800294c:	e7e2      	b.n	8002914 <pvPortMalloc+0x7c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800294e:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002950:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002952:	f7ff ff7d 	bl	8002850 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002956:	4914      	ldr	r1, [pc, #80]	; (80029a8 <pvPortMalloc+0x110>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002958:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800295a:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800295c:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800295e:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002960:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 8002962:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002966:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800296a:	bf38      	it	cc
 800296c:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800296e:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002970:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002972:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8002974:	f7ff fd14 	bl	80023a0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002978:	0763      	lsls	r3, r4, #29
 800297a:	d00a      	beq.n	8002992 <pvPortMalloc+0xfa>
 800297c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002980:	f383 8811 	msr	BASEPRI, r3
 8002984:	f3bf 8f6f 	isb	sy
 8002988:	f3bf 8f4f 	dsb	sy
 800298c:	e7fe      	b.n	800298c <pvPortMalloc+0xf4>
void *pvReturn = NULL;
 800298e:	2400      	movs	r4, #0
 8002990:	e7f0      	b.n	8002974 <pvPortMalloc+0xdc>
}
 8002992:	4620      	mov	r0, r4
 8002994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002998:	20000160 	.word	0x20000160
 800299c:	20003d64 	.word	0x20003d64
 80029a0:	20000164 	.word	0x20000164
 80029a4:	20003d70 	.word	0x20003d70
 80029a8:	20003d6c 	.word	0x20003d6c
 80029ac:	20003d68 	.word	0x20003d68

080029b0 <vPortFree>:
{
 80029b0:	b510      	push	{r4, lr}
	if( pv != NULL )
 80029b2:	4604      	mov	r4, r0
 80029b4:	b370      	cbz	r0, 8002a14 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80029b6:	4a18      	ldr	r2, [pc, #96]	; (8002a18 <vPortFree+0x68>)
 80029b8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80029bc:	6812      	ldr	r2, [r2, #0]
 80029be:	4213      	tst	r3, r2
 80029c0:	d108      	bne.n	80029d4 <vPortFree+0x24>
 80029c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c6:	f383 8811 	msr	BASEPRI, r3
 80029ca:	f3bf 8f6f 	isb	sy
 80029ce:	f3bf 8f4f 	dsb	sy
 80029d2:	e7fe      	b.n	80029d2 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80029d4:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80029d8:	b141      	cbz	r1, 80029ec <vPortFree+0x3c>
 80029da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029de:	f383 8811 	msr	BASEPRI, r3
 80029e2:	f3bf 8f6f 	isb	sy
 80029e6:	f3bf 8f4f 	dsb	sy
 80029ea:	e7fe      	b.n	80029ea <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80029ec:	ea23 0302 	bic.w	r3, r3, r2
 80029f0:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80029f4:	f7ff fc3a 	bl	800226c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80029f8:	4a08      	ldr	r2, [pc, #32]	; (8002a1c <vPortFree+0x6c>)
 80029fa:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80029fe:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002a00:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002a04:	440b      	add	r3, r1
 8002a06:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002a08:	f7ff ff22 	bl	8002850 <prvInsertBlockIntoFreeList>
}
 8002a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8002a10:	f7ff bcc6 	b.w	80023a0 <xTaskResumeAll>
}
 8002a14:	bd10      	pop	{r4, pc}
 8002a16:	bf00      	nop
 8002a18:	20003d64 	.word	0x20003d64
 8002a1c:	20003d68 	.word	0x20003d68

08002a20 <vApplicationIdleHook>:
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8002a20:	4770      	bx	lr
	...

08002a24 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002a24:	4b03      	ldr	r3, [pc, #12]	; (8002a34 <vApplicationGetIdleTaskMemory+0x10>)
 8002a26:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002a28:	4b03      	ldr	r3, [pc, #12]	; (8002a38 <vApplicationGetIdleTaskMemory+0x14>)
 8002a2a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002a2c:	2380      	movs	r3, #128	; 0x80
 8002a2e:	6013      	str	r3, [r2, #0]
  /* place for user code */
}                   
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	20003f78 	.word	0x20003f78
 8002a38:	20003d78 	.word	0x20003d78

08002a3c <Delay>:
/**
 * @brief  Delays for amount of micro seconds
 * @param  micros: Number of microseconds for delay
 * @retval None
 */
__STATIC_INLINE void Delay(__IO uint32_t micros) {
 8002a3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
#if !defined(STM32F0xx)
	uint32_t start = DWT->CYCCNT;
 8002a3e:	4c09      	ldr	r4, [pc, #36]	; (8002a64 <Delay+0x28>)
__STATIC_INLINE void Delay(__IO uint32_t micros) {
 8002a40:	9001      	str	r0, [sp, #4]
	uint32_t start = DWT->CYCCNT;
 8002a42:	6865      	ldr	r5, [r4, #4]
	
	/* Go to number of cycles for system */
	micros *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8002a44:	f7fd ff9e 	bl	8000984 <HAL_RCC_GetHCLKFreq>
 8002a48:	9b01      	ldr	r3, [sp, #4]
 8002a4a:	4a07      	ldr	r2, [pc, #28]	; (8002a68 <Delay+0x2c>)
 8002a4c:	fbb0 f0f2 	udiv	r0, r0, r2
 8002a50:	4343      	muls	r3, r0
 8002a52:	9301      	str	r3, [sp, #4]
	
	/* Delay till end */
	while ((DWT->CYCCNT - start) < micros);
 8002a54:	6863      	ldr	r3, [r4, #4]
 8002a56:	9a01      	ldr	r2, [sp, #4]
 8002a58:	1b5b      	subs	r3, r3, r5
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d3fa      	bcc.n	8002a54 <Delay+0x18>
	micros *= (SystemCoreClock / 1000000) / 5;
	
	/* Wait till done */
	while (micros--);
#endif
}
 8002a5e:	b003      	add	sp, #12
 8002a60:	bd30      	pop	{r4, r5, pc}
 8002a62:	bf00      	nop
 8002a64:	e0001000 	.word	0xe0001000
 8002a68:	000f4240 	.word	0x000f4240

08002a6c <set_gpio_output>:
uint8_t presence = 0;
GPIO_InitTypeDef GPIO_InitStruct;

void set_gpio_output(void) {
	/*Configure GPIO pin output: PA2 */
	GPIO_InitStruct.Pin = DHT11_Pin;
 8002a6c:	4905      	ldr	r1, [pc, #20]	; (8002a84 <set_gpio_output+0x18>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8002a6e:	4806      	ldr	r0, [pc, #24]	; (8002a88 <set_gpio_output+0x1c>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a70:	2301      	movs	r3, #1
 8002a72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a76:	e9c1 2300 	strd	r2, r3, [r1]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	60cb      	str	r3, [r1, #12]
	HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8002a7e:	f7fd bdc7 	b.w	8000610 <HAL_GPIO_Init>
 8002a82:	bf00      	nop
 8002a84:	200040f8 	.word	0x200040f8
 8002a88:	40020000 	.word	0x40020000

08002a8c <set_gpio_input>:
}

void set_gpio_input(void) {
	/*Configure GPIO pin input: PA2 */
	GPIO_InitStruct.Pin = DHT11_Pin;
 8002a8c:	4904      	ldr	r1, [pc, #16]	; (8002aa0 <set_gpio_input+0x14>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8002a8e:	4805      	ldr	r0, [pc, #20]	; (8002aa4 <set_gpio_input+0x18>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a90:	2300      	movs	r3, #0
 8002a92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a96:	e9c1 2300 	strd	r2, r3, [r1]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9a:	608b      	str	r3, [r1, #8]
	HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8002a9c:	f7fd bdb8 	b.w	8000610 <HAL_GPIO_Init>
 8002aa0:	200040f8 	.word	0x200040f8
 8002aa4:	40020000 	.word	0x40020000

08002aa8 <DHT11_start>:
}

void DHT11_start(void) {
 8002aa8:	b510      	push	{r4, lr}
	set_gpio_output();
	HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, 0);
 8002aaa:	4c0d      	ldr	r4, [pc, #52]	; (8002ae0 <DHT11_start+0x38>)
	set_gpio_output();
 8002aac:	f7ff ffde 	bl	8002a6c <set_gpio_output>
	HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, 0);
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002ab6:	4620      	mov	r0, r4
 8002ab8:	f7fd fe8a 	bl	80007d0 <HAL_GPIO_WritePin>
	Delay(18000);
 8002abc:	f244 6050 	movw	r0, #18000	; 0x4650
 8002ac0:	f7ff ffbc 	bl	8002a3c <Delay>
	HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, 1);
 8002ac4:	4620      	mov	r0, r4
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002acc:	f7fd fe80 	bl	80007d0 <HAL_GPIO_WritePin>
	Delay(20);
 8002ad0:	2014      	movs	r0, #20
 8002ad2:	f7ff ffb3 	bl	8002a3c <Delay>
	set_gpio_input();
}
 8002ad6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	set_gpio_input();
 8002ada:	f7ff bfd7 	b.w	8002a8c <set_gpio_input>
 8002ade:	bf00      	nop
 8002ae0:	40020000 	.word	0x40020000

08002ae4 <check_response>:

uint8_t check_response(void) {
 8002ae4:	b538      	push	{r3, r4, r5, lr}
	uint8_t response = 0;
	Delay(40);
 8002ae6:	2028      	movs	r0, #40	; 0x28
 8002ae8:	f7ff ffa8 	bl	8002a3c <Delay>
	if (!(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin))) {
 8002aec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002af0:	480d      	ldr	r0, [pc, #52]	; (8002b28 <check_response+0x44>)
 8002af2:	f7fd fe67 	bl	80007c4 <HAL_GPIO_ReadPin>
 8002af6:	b9a8      	cbnz	r0, 8002b24 <check_response+0x40>
		Delay(80);
 8002af8:	2050      	movs	r0, #80	; 0x50
 8002afa:	f7ff ff9f 	bl	8002a3c <Delay>
		if ((HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin)))
 8002afe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b02:	4809      	ldr	r0, [pc, #36]	; (8002b28 <check_response+0x44>)
 8002b04:	f7fd fe5e 	bl	80007c4 <HAL_GPIO_ReadPin>
			response = 1;
		else
			response = -1;
 8002b08:	2800      	cmp	r0, #0
 8002b0a:	bf14      	ite	ne
 8002b0c:	2401      	movne	r4, #1
 8002b0e:	24ff      	moveq	r4, #255	; 0xff
	}
	while ((HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin)));
 8002b10:	4d05      	ldr	r5, [pc, #20]	; (8002b28 <check_response+0x44>)
 8002b12:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b16:	4628      	mov	r0, r5
 8002b18:	f7fd fe54 	bl	80007c4 <HAL_GPIO_ReadPin>
 8002b1c:	2800      	cmp	r0, #0
 8002b1e:	d1f8      	bne.n	8002b12 <check_response+0x2e>
	return response;
}
 8002b20:	4620      	mov	r0, r4
 8002b22:	bd38      	pop	{r3, r4, r5, pc}
	uint8_t response = 0;
 8002b24:	2400      	movs	r4, #0
 8002b26:	e7f3      	b.n	8002b10 <check_response+0x2c>
 8002b28:	40020000 	.word	0x40020000

08002b2c <read_data>:

uint8_t read_data(void) {
 8002b2c:	b570      	push	{r4, r5, r6, lr}
	uint8_t i, j;
	for (j = 0; j < 8; j++) {
		while (!(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin)));
 8002b2e:	4e14      	ldr	r6, [pc, #80]	; (8002b80 <read_data+0x54>)
uint8_t read_data(void) {
 8002b30:	2400      	movs	r4, #0
 8002b32:	2507      	movs	r5, #7
		while (!(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin)));
 8002b34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b38:	4811      	ldr	r0, [pc, #68]	; (8002b80 <read_data+0x54>)
 8002b3a:	f7fd fe43 	bl	80007c4 <HAL_GPIO_ReadPin>
 8002b3e:	2800      	cmp	r0, #0
 8002b40:	d0f8      	beq.n	8002b34 <read_data+0x8>
		Delay(40);
 8002b42:	2028      	movs	r0, #40	; 0x28
 8002b44:	f7ff ff7a 	bl	8002a3c <Delay>
		if ((HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin)) == 0) {
 8002b48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b4c:	4630      	mov	r0, r6
 8002b4e:	f7fd fe39 	bl	80007c4 <HAL_GPIO_ReadPin>
 8002b52:	2301      	movs	r3, #1
 8002b54:	40ab      	lsls	r3, r5
 8002b56:	b25b      	sxtb	r3, r3
 8002b58:	b264      	sxtb	r4, r4
 8002b5a:	b970      	cbnz	r0, 8002b7a <read_data+0x4e>
			i &= ~(1 << (7 - j));
 8002b5c:	ea24 0403 	bic.w	r4, r4, r3
		} else
			i |= (1 << (7 - j));
 8002b60:	b2e4      	uxtb	r4, r4
		while ((HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin)));
 8002b62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b66:	4630      	mov	r0, r6
 8002b68:	f7fd fe2c 	bl	80007c4 <HAL_GPIO_ReadPin>
 8002b6c:	2800      	cmp	r0, #0
 8002b6e:	d1f8      	bne.n	8002b62 <read_data+0x36>
	for (j = 0; j < 8; j++) {
 8002b70:	f115 35ff 	adds.w	r5, r5, #4294967295
 8002b74:	d2de      	bcs.n	8002b34 <read_data+0x8>
	}
	return i;
}
 8002b76:	4620      	mov	r0, r4
 8002b78:	bd70      	pop	{r4, r5, r6, pc}
			i |= (1 << (7 - j));
 8002b7a:	431c      	orrs	r4, r3
 8002b7c:	e7f0      	b.n	8002b60 <read_data+0x34>
 8002b7e:	bf00      	nop
 8002b80:	40020000 	.word	0x40020000

08002b84 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 8002b84:	e92d 4887 	stmdb	sp!, {r0, r1, r2, r7, fp, lr}
		sum = read_data();

		humidity_int_units = (Rh_byte1) % 10;
		humidity_int_decimals = (Rh_byte1) / 10;

		if (HAL_GPIO_ReadPin(BlueB_GPIO_Port, BlueB_Pin)) {
 8002b88:	4c67      	ldr	r4, [pc, #412]	; (8002d28 <StartDefaultTask+0x1a4>)
					}
				}
			}
		} else if (HAL_GPIO_ReadPin(BlueB_GPIO_Port, BlueB_Pin)
				== GPIO_PIN_RESET) {
			display_temp = !display_temp;
 8002b8a:	4d68      	ldr	r5, [pc, #416]	; (8002d2c <StartDefaultTask+0x1a8>)
 8002b8c:	4f68      	ldr	r7, [pc, #416]	; (8002d30 <StartDefaultTask+0x1ac>)
		Rh_byte1 = read_data();
 8002b8e:	4e69      	ldr	r6, [pc, #420]	; (8002d34 <StartDefaultTask+0x1b0>)
		humidity_int_units = (Rh_byte1) % 10;
 8002b90:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 8002d7c <StartDefaultTask+0x1f8>
		humidity_int_decimals = (Rh_byte1) / 10;
 8002b94:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 8002d80 <StartDefaultTask+0x1fc>
		DHT11_start();
 8002b98:	f7ff ff86 	bl	8002aa8 <DHT11_start>
		presence = check_response();
 8002b9c:	f7ff ffa2 	bl	8002ae4 <check_response>
 8002ba0:	4b65      	ldr	r3, [pc, #404]	; (8002d38 <StartDefaultTask+0x1b4>)
 8002ba2:	7018      	strb	r0, [r3, #0]
		Rh_byte1 = read_data();
 8002ba4:	f7ff ffc2 	bl	8002b2c <read_data>
 8002ba8:	7030      	strb	r0, [r6, #0]
		Rh_byte2 = read_data();
 8002baa:	f7ff ffbf 	bl	8002b2c <read_data>
 8002bae:	4b63      	ldr	r3, [pc, #396]	; (8002d3c <StartDefaultTask+0x1b8>)
 8002bb0:	7018      	strb	r0, [r3, #0]
		Temp_byte1 = read_data();
 8002bb2:	f7ff ffbb 	bl	8002b2c <read_data>
 8002bb6:	4b62      	ldr	r3, [pc, #392]	; (8002d40 <StartDefaultTask+0x1bc>)
 8002bb8:	7018      	strb	r0, [r3, #0]
		Temp_byte2 = read_data();
 8002bba:	f7ff ffb7 	bl	8002b2c <read_data>
 8002bbe:	4b61      	ldr	r3, [pc, #388]	; (8002d44 <StartDefaultTask+0x1c0>)
 8002bc0:	7018      	strb	r0, [r3, #0]
		sum = read_data();
 8002bc2:	f7ff ffb3 	bl	8002b2c <read_data>
 8002bc6:	4b60      	ldr	r3, [pc, #384]	; (8002d48 <StartDefaultTask+0x1c4>)
 8002bc8:	8018      	strh	r0, [r3, #0]
		humidity_int_units = (Rh_byte1) % 10;
 8002bca:	7833      	ldrb	r3, [r6, #0]
 8002bcc:	f04f 0a0a 	mov.w	sl, #10
		if (HAL_GPIO_ReadPin(BlueB_GPIO_Port, BlueB_Pin)) {
 8002bd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
		humidity_int_units = (Rh_byte1) % 10;
 8002bd4:	fbb3 f2fa 	udiv	r2, r3, sl
		if (HAL_GPIO_ReadPin(BlueB_GPIO_Port, BlueB_Pin)) {
 8002bd8:	4620      	mov	r0, r4
		humidity_int_units = (Rh_byte1) % 10;
 8002bda:	fb0a 3312 	mls	r3, sl, r2, r3
 8002bde:	f888 3000 	strb.w	r3, [r8]
		humidity_int_decimals = (Rh_byte1) / 10;
 8002be2:	f889 2000 	strb.w	r2, [r9]
		if (HAL_GPIO_ReadPin(BlueB_GPIO_Port, BlueB_Pin)) {
 8002be6:	f7fd fded 	bl	80007c4 <HAL_GPIO_ReadPin>
 8002bea:	2800      	cmp	r0, #0
 8002bec:	f000 8089 	beq.w	8002d02 <StartDefaultTask+0x17e>
			if (TM_DS18B20_Is(DS_ROM)) {
 8002bf0:	4856      	ldr	r0, [pc, #344]	; (8002d4c <StartDefaultTask+0x1c8>)
 8002bf2:	f000 fcf4 	bl	80035de <TM_DS18B20_Is>
 8002bf6:	2800      	cmp	r0, #0
 8002bf8:	d03f      	beq.n	8002c7a <StartDefaultTask+0xf6>
				if (TM_DS18B20_AllDone(&OW)) {
 8002bfa:	4855      	ldr	r0, [pc, #340]	; (8002d50 <StartDefaultTask+0x1cc>)
 8002bfc:	f000 fd97 	bl	800372e <TM_DS18B20_AllDone>
 8002c00:	2800      	cmp	r0, #0
 8002c02:	d03a      	beq.n	8002c7a <StartDefaultTask+0xf6>
					if (TM_DS18B20_Read(&OW, DS_ROM, &temp)) {
 8002c04:	f8df b17c 	ldr.w	fp, [pc, #380]	; 8002d84 <StartDefaultTask+0x200>
 8002c08:	4950      	ldr	r1, [pc, #320]	; (8002d4c <StartDefaultTask+0x1c8>)
 8002c0a:	4851      	ldr	r0, [pc, #324]	; (8002d50 <StartDefaultTask+0x1cc>)
 8002c0c:	465a      	mov	r2, fp
 8002c0e:	f000 fbfd 	bl	800340c <TM_DS18B20_Read>
 8002c12:	b390      	cbz	r0, 8002c7a <StartDefaultTask+0xf6>
						TM_DS18B20_StartAll(&OW);
 8002c14:	484e      	ldr	r0, [pc, #312]	; (8002d50 <StartDefaultTask+0x1cc>)
 8002c16:	f000 fbeb 	bl	80033f0 <TM_DS18B20_StartAll>
						temp_int_units = ((int8_t) temp) % 10;
 8002c1a:	eddb 7a00 	vldr	s15, [fp]
							for (j = 0; j < 23; j++) {
 8002c1e:	494d      	ldr	r1, [pc, #308]	; (8002d54 <StartDefaultTask+0x1d0>)
						temp_int_units = ((int8_t) temp) % 10;
 8002c20:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8002c24:	ed8d 7a01 	vstr	s14, [sp, #4]
 8002c28:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 8002c2c:	fb93 f2fa 	sdiv	r2, r3, sl
 8002c30:	fb0a 3a12 	mls	sl, sl, r2, r3
 8002c34:	4b48      	ldr	r3, [pc, #288]	; (8002d58 <StartDefaultTask+0x1d4>)
 8002c36:	f883 a000 	strb.w	sl, [r3]
						temp_int_decimals = ((int8_t) temp) / 10;
 8002c3a:	4b48      	ldr	r3, [pc, #288]	; (8002d5c <StartDefaultTask+0x1d8>)
 8002c3c:	701a      	strb	r2, [r3, #0]
 8002c3e:	4b48      	ldr	r3, [pc, #288]	; (8002d60 <StartDefaultTask+0x1dc>)
							for (j = 0; j < 23; j++) {
 8002c40:	2200      	movs	r2, #0
 8002c42:	600a      	str	r2, [r1, #0]
 8002c44:	f103 0c17 	add.w	ip, r3, #23
 8002c48:	4618      	mov	r0, r3
 8002c4a:	4563      	cmp	r3, ip
 8002c4c:	d14d      	bne.n	8002cea <StartDefaultTask+0x166>
 8002c4e:	b10a      	cbz	r2, 8002c54 <StartDefaultTask+0xd0>
 8002c50:	2317      	movs	r3, #23
 8002c52:	600b      	str	r3, [r1, #0]
							temperatureTab[23] = (uint8_t) temp;
 8002c54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
							for (k = 0; k < 23; k++) {
 8002c58:	4942      	ldr	r1, [pc, #264]	; (8002d64 <StartDefaultTask+0x1e0>)
							temperatureTab[23] = (uint8_t) temp;
 8002c5a:	ee17 3a90 	vmov	r3, s15
 8002c5e:	75c3      	strb	r3, [r0, #23]
 8002c60:	4b41      	ldr	r3, [pc, #260]	; (8002d68 <StartDefaultTask+0x1e4>)
							for (k = 0; k < 23; k++) {
 8002c62:	2200      	movs	r2, #0
 8002c64:	600a      	str	r2, [r1, #0]
 8002c66:	f103 0c17 	add.w	ip, r3, #23
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	4563      	cmp	r3, ip
 8002c6e:	d142      	bne.n	8002cf6 <StartDefaultTask+0x172>
 8002c70:	b10a      	cbz	r2, 8002c76 <StartDefaultTask+0xf2>
 8002c72:	2317      	movs	r3, #23
 8002c74:	600b      	str	r3, [r1, #0]
							humidityTab[23] = (uint8_t) Rh_byte1;
 8002c76:	7833      	ldrb	r3, [r6, #0]
 8002c78:	75c3      	strb	r3, [r0, #23]
		}
		if (display_temp) {
 8002c7a:	782a      	ldrb	r2, [r5, #0]
 8002c7c:	4b3b      	ldr	r3, [pc, #236]	; (8002d6c <StartDefaultTask+0x1e8>)
 8002c7e:	2a00      	cmp	r2, #0
 8002c80:	d04b      	beq.n	8002d1a <StartDefaultTask+0x196>
			GPIOB->ODR = numbers[temp_int_decimals];
 8002c82:	4a36      	ldr	r2, [pc, #216]	; (8002d5c <StartDefaultTask+0x1d8>)
 8002c84:	7812      	ldrb	r2, [r2, #0]
 8002c86:	5c9a      	ldrb	r2, [r3, r2]
 8002c88:	617a      	str	r2, [r7, #20]
			GPIOC->ODR = numbers[temp_int_units];
 8002c8a:	4a33      	ldr	r2, [pc, #204]	; (8002d58 <StartDefaultTask+0x1d4>)
 8002c8c:	7812      	ldrb	r2, [r2, #0]
		} else {
			GPIOB->ODR = numbers[humidity_int_decimals];
			GPIOC->ODR = numbers[humidity_int_units];
 8002c8e:	5c9b      	ldrb	r3, [r3, r2]
		}
		LD2_TOGGLE();
 8002c90:	4e37      	ldr	r6, [pc, #220]	; (8002d70 <StartDefaultTask+0x1ec>)
			GPIOC->ODR = numbers[humidity_int_units];
 8002c92:	6163      	str	r3, [r4, #20]
		LD2_TOGGLE();
 8002c94:	6973      	ldr	r3, [r6, #20]
 8002c96:	f083 0320 	eor.w	r3, r3, #32
 8002c9a:	6173      	str	r3, [r6, #20]
		vTaskDelay(200);
 8002c9c:	20c8      	movs	r0, #200	; 0xc8
 8002c9e:	f7ff fbf5 	bl	800248c <vTaskDelay>
		LD2_TOGGLE();
 8002ca2:	6973      	ldr	r3, [r6, #20]
		HAL_UART_Receive(&huart1, (uint8_t*) &buffer, 1, 1000);
 8002ca4:	4833      	ldr	r0, [pc, #204]	; (8002d74 <StartDefaultTask+0x1f0>)
		LD2_TOGGLE();
 8002ca6:	f083 0320 	eor.w	r3, r3, #32
 8002caa:	6173      	str	r3, [r6, #20]
		HAL_UART_Receive(&huart1, (uint8_t*) &buffer, 1, 1000);
 8002cac:	4e32      	ldr	r6, [pc, #200]	; (8002d78 <StartDefaultTask+0x1f4>)
 8002cae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	4631      	mov	r1, r6
 8002cb6:	f7fe ff1f 	bl	8001af8 <HAL_UART_Receive>
		if (*buffer == '1') {
 8002cba:	7833      	ldrb	r3, [r6, #0]
 8002cbc:	2b31      	cmp	r3, #49	; 0x31
 8002cbe:	d10f      	bne.n	8002ce0 <StartDefaultTask+0x15c>
			HAL_UART_Transmit(&huart1, temperatureTab, 24, 2500);
 8002cc0:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8002cc4:	2218      	movs	r2, #24
 8002cc6:	4926      	ldr	r1, [pc, #152]	; (8002d60 <StartDefaultTask+0x1dc>)
 8002cc8:	482a      	ldr	r0, [pc, #168]	; (8002d74 <StartDefaultTask+0x1f0>)
 8002cca:	f7fe febb 	bl	8001a44 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, humidityTab, 24, 2500);
 8002cce:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8002cd2:	2218      	movs	r2, #24
 8002cd4:	4924      	ldr	r1, [pc, #144]	; (8002d68 <StartDefaultTask+0x1e4>)
 8002cd6:	4827      	ldr	r0, [pc, #156]	; (8002d74 <StartDefaultTask+0x1f0>)
 8002cd8:	f7fe feb4 	bl	8001a44 <HAL_UART_Transmit>
			*buffer = '0';
 8002cdc:	2330      	movs	r3, #48	; 0x30
 8002cde:	7033      	strb	r3, [r6, #0]
		}
		vTaskDelay(2800);
 8002ce0:	f44f 602f 	mov.w	r0, #2800	; 0xaf0
 8002ce4:	f7ff fbd2 	bl	800248c <vTaskDelay>
		DHT11_start();
 8002ce8:	e751      	b.n	8002b8e <StartDefaultTask+0xa>
								temperatureTab[j] = temperatureTab[j + 1];
 8002cea:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8002cee:	f803 2c01 	strb.w	r2, [r3, #-1]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	e7a9      	b.n	8002c4a <StartDefaultTask+0xc6>
								humidityTab[k] = humidityTab[k + 1];
 8002cf6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8002cfa:	f803 2c01 	strb.w	r2, [r3, #-1]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	e7b4      	b.n	8002c6c <StartDefaultTask+0xe8>
		} else if (HAL_GPIO_ReadPin(BlueB_GPIO_Port, BlueB_Pin)
 8002d02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d06:	4620      	mov	r0, r4
 8002d08:	f7fd fd5c 	bl	80007c4 <HAL_GPIO_ReadPin>
 8002d0c:	2800      	cmp	r0, #0
 8002d0e:	d1b4      	bne.n	8002c7a <StartDefaultTask+0xf6>
			display_temp = !display_temp;
 8002d10:	782b      	ldrb	r3, [r5, #0]
 8002d12:	f083 0301 	eor.w	r3, r3, #1
 8002d16:	702b      	strb	r3, [r5, #0]
 8002d18:	e7af      	b.n	8002c7a <StartDefaultTask+0xf6>
			GPIOB->ODR = numbers[humidity_int_decimals];
 8002d1a:	f899 2000 	ldrb.w	r2, [r9]
 8002d1e:	5c9a      	ldrb	r2, [r3, r2]
 8002d20:	617a      	str	r2, [r7, #20]
			GPIOC->ODR = numbers[humidity_int_units];
 8002d22:	f898 2000 	ldrb.w	r2, [r8]
 8002d26:	e7b2      	b.n	8002c8e <StartDefaultTask+0x10a>
 8002d28:	40020800 	.word	0x40020800
 8002d2c:	20000004 	.word	0x20000004
 8002d30:	40020400 	.word	0x40020400
 8002d34:	2000403c 	.word	0x2000403c
 8002d38:	20003fd4 	.word	0x20003fd4
 8002d3c:	200040f4 	.word	0x200040f4
 8002d40:	200040d0 	.word	0x200040d0
 8002d44:	20004190 	.word	0x20004190
 8002d48:	2000403a 	.word	0x2000403a
 8002d4c:	20004018 	.word	0x20004018
 8002d50:	20004074 	.word	0x20004074
 8002d54:	20003fcc 	.word	0x20003fcc
 8002d58:	2000414c 	.word	0x2000414c
 8002d5c:	20004072 	.word	0x20004072
 8002d60:	20004020 	.word	0x20004020
 8002d64:	20003fd0 	.word	0x20003fd0
 8002d68:	20004058 	.word	0x20004058
 8002d6c:	20000005 	.word	0x20000005
 8002d70:	40020000 	.word	0x40020000
 8002d74:	20004090 	.word	0x20004090
 8002d78:	200040d1 	.word	0x200040d1
 8002d7c:	20004038 	.word	0x20004038
 8002d80:	2000408c 	.word	0x2000408c
 8002d84:	20004054 	.word	0x20004054

08002d88 <SystemClock_Config>:
void SystemClock_Config(void) {
 8002d88:	b530      	push	{r4, r5, lr}
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002d8a:	2400      	movs	r4, #0
void SystemClock_Config(void) {
 8002d8c:	b0ad      	sub	sp, #180	; 0xb4
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002d8e:	4621      	mov	r1, r4
 8002d90:	2214      	movs	r2, #20
 8002d92:	a803      	add	r0, sp, #12
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002d94:	9409      	str	r4, [sp, #36]	; 0x24
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002d96:	f000 ff75 	bl	8003c84 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8002d9a:	4621      	mov	r1, r4
 8002d9c:	225c      	movs	r2, #92	; 0x5c
 8002d9e:	a815      	add	r0, sp, #84	; 0x54
 8002da0:	f000 ff70 	bl	8003c84 <memset>
	__HAL_RCC_PWR_CLK_ENABLE();
 8002da4:	4b22      	ldr	r3, [pc, #136]	; (8002e30 <SystemClock_Config+0xa8>)
 8002da6:	9401      	str	r4, [sp, #4]
 8002da8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002daa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002dae:	641a      	str	r2, [r3, #64]	; 0x40
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db6:	9301      	str	r3, [sp, #4]
 8002db8:	9b01      	ldr	r3, [sp, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002dba:	4b1e      	ldr	r3, [pc, #120]	; (8002e34 <SystemClock_Config+0xac>)
 8002dbc:	9402      	str	r4, [sp, #8]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002dc4:	601a      	str	r2, [r3, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
	RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8002dc8:	940a      	str	r4, [sp, #40]	; 0x28
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002dca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002dce:	9302      	str	r3, [sp, #8]
 8002dd0:	9b02      	ldr	r3, [sp, #8]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8002dd2:	230a      	movs	r3, #10
 8002dd4:	9308      	str	r3, [sp, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002dd6:	2210      	movs	r2, #16
 8002dd8:	2301      	movs	r3, #1
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002dda:	2502      	movs	r5, #2
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ddc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002de0:	930d      	str	r3, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLN = 180;
 8002de2:	2208      	movs	r2, #8
 8002de4:	23b4      	movs	r3, #180	; 0xb4
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002de6:	a808      	add	r0, sp, #32
	RCC_OscInitStruct.PLL.PLLN = 180;
 8002de8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002dec:	e9cd 540e 	strd	r5, r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8002df0:	e9cd 5512 	strd	r5, r5, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8002df4:	9514      	str	r5, [sp, #80]	; 0x50
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002df6:	f7fe f859 	bl	8000eac <HAL_RCC_OscConfig>
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8002dfa:	f7fd fcef 	bl	80007dc <HAL_PWREx_EnableOverDrive>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002dfe:	230f      	movs	r3, #15
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e00:	e9cd 3503 	strd	r3, r5, [sp, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002e04:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8002e08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e0c:	e9cd 1306 	strd	r1, r3, [sp, #24]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8002e10:	a803      	add	r0, sp, #12
 8002e12:	2105      	movs	r1, #5
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e14:	9405      	str	r4, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8002e16:	f7fd fd1d 	bl	8000854 <HAL_RCC_ClockConfig>
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002e1a:	2320      	movs	r3, #32
 8002e1c:	9315      	str	r3, [sp, #84]	; 0x54
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8002e1e:	a815      	add	r0, sp, #84	; 0x54
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002e20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e24:	9325      	str	r3, [sp, #148]	; 0x94
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8002e26:	f7fd fdf1 	bl	8000a0c <HAL_RCCEx_PeriphCLKConfig>
}
 8002e2a:	b02d      	add	sp, #180	; 0xb4
 8002e2c:	bd30      	pop	{r4, r5, pc}
 8002e2e:	bf00      	nop
 8002e30:	40023800 	.word	0x40023800
 8002e34:	40007000 	.word	0x40007000

08002e38 <main>:
int main(void) {
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b08c      	sub	sp, #48	; 0x30
	TM_RCC_InitSystem();
 8002e3c:	f000 fe84 	bl	8003b48 <TM_RCC_InitSystem>
	GPIOC->ODR = 0xff;
 8002e40:	4c7e      	ldr	r4, [pc, #504]	; (800303c <main+0x204>)
	GPIOB->ODR = 0xff;
 8002e42:	4a7f      	ldr	r2, [pc, #508]	; (8003040 <main+0x208>)
	GPIOC->ODR = 0xff;
 8002e44:	23ff      	movs	r3, #255	; 0xff
 8002e46:	6163      	str	r3, [r4, #20]
	GPIOB->ODR = 0xff;
 8002e48:	6153      	str	r3, [r2, #20]
	HAL_Init();
 8002e4a:	f7fd fb61 	bl	8000510 <HAL_Init>
	TM_OneWire_Init(&OW, GPIOC, GPIO_PIN_9);
 8002e4e:	487d      	ldr	r0, [pc, #500]	; (8003044 <main+0x20c>)
 8002e50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e54:	4621      	mov	r1, r4
 8002e56:	f000 fd39 	bl	80038cc <TM_OneWire_Init>
	if (TM_OneWire_First(&OW)) {
 8002e5a:	487a      	ldr	r0, [pc, #488]	; (8003044 <main+0x20c>)
 8002e5c:	f000 fe34 	bl	8003ac8 <TM_OneWire_First>
 8002e60:	b118      	cbz	r0, 8002e6a <main+0x32>
		TM_OneWire_GetFullROM(&OW, DS_ROM);
 8002e62:	4979      	ldr	r1, [pc, #484]	; (8003048 <main+0x210>)
 8002e64:	4877      	ldr	r0, [pc, #476]	; (8003044 <main+0x20c>)
 8002e66:	f000 fe47 	bl	8003af8 <TM_OneWire_GetFullROM>
	if (TM_DS18B20_Is(DS_ROM)) {
 8002e6a:	4877      	ldr	r0, [pc, #476]	; (8003048 <main+0x210>)
 8002e6c:	f000 fbb7 	bl	80035de <TM_DS18B20_Is>
 8002e70:	b190      	cbz	r0, 8002e98 <main+0x60>
		TM_DS18B20_SetResolution(&OW, DS_ROM, TM_DS18B20_Resolution_9bits);
 8002e72:	2209      	movs	r2, #9
 8002e74:	4974      	ldr	r1, [pc, #464]	; (8003048 <main+0x210>)
 8002e76:	4873      	ldr	r0, [pc, #460]	; (8003044 <main+0x20c>)
 8002e78:	f000 fb4a 	bl	8003510 <TM_DS18B20_SetResolution>
		TM_DS18B20_SetAlarmHighTemperature(&OW, DS_ROM, 30);
 8002e7c:	221e      	movs	r2, #30
 8002e7e:	4972      	ldr	r1, [pc, #456]	; (8003048 <main+0x210>)
 8002e80:	4870      	ldr	r0, [pc, #448]	; (8003044 <main+0x20c>)
 8002e82:	f000 fc03 	bl	800368c <TM_DS18B20_SetAlarmHighTemperature>
		TM_DS18B20_SetAlarmLowTemperature(&OW, DS_ROM, 10);
 8002e86:	4970      	ldr	r1, [pc, #448]	; (8003048 <main+0x210>)
 8002e88:	486e      	ldr	r0, [pc, #440]	; (8003044 <main+0x20c>)
 8002e8a:	220a      	movs	r2, #10
 8002e8c:	f000 fbad 	bl	80035ea <TM_DS18B20_SetAlarmLowTemperature>
		TM_DS18B20_Start(&OW, DS_ROM);
 8002e90:	496d      	ldr	r1, [pc, #436]	; (8003048 <main+0x210>)
 8002e92:	486c      	ldr	r0, [pc, #432]	; (8003044 <main+0x20c>)
 8002e94:	f000 fa98 	bl	80033c8 <TM_DS18B20_Start>
	SystemClock_Config();
 8002e98:	f7ff ff76 	bl	8002d88 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002e9c:	2214      	movs	r2, #20
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	eb0d 0002 	add.w	r0, sp, r2
 8002ea4:	f000 feee 	bl	8003c84 <memset>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002ea8:	2400      	movs	r4, #0
 8002eaa:	4b68      	ldr	r3, [pc, #416]	; (800304c <main+0x214>)
 8002eac:	9401      	str	r4, [sp, #4]
 8002eae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	HAL_GPIO_WritePin(GPIOC,
 8002eb0:	4862      	ldr	r0, [pc, #392]	; (800303c <main+0x204>)
	htim7.Instance = TIM7;
 8002eb2:	4e67      	ldr	r6, [pc, #412]	; (8003050 <main+0x218>)
	huart1.Init.BaudRate = 9600;
 8002eb4:	4d67      	ldr	r5, [pc, #412]	; (8003054 <main+0x21c>)
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002eb6:	f042 0204 	orr.w	r2, r2, #4
 8002eba:	631a      	str	r2, [r3, #48]	; 0x30
 8002ebc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ebe:	f002 0204 	and.w	r2, r2, #4
 8002ec2:	9201      	str	r2, [sp, #4]
 8002ec4:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002ec6:	9402      	str	r4, [sp, #8]
 8002ec8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ece:	631a      	str	r2, [r3, #48]	; 0x30
 8002ed0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ed2:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002ed6:	9202      	str	r2, [sp, #8]
 8002ed8:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002eda:	9403      	str	r4, [sp, #12]
 8002edc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ede:	f042 0201 	orr.w	r2, r2, #1
 8002ee2:	631a      	str	r2, [r3, #48]	; 0x30
 8002ee4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ee6:	f002 0201 	and.w	r2, r2, #1
 8002eea:	9203      	str	r2, [sp, #12]
 8002eec:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002eee:	9404      	str	r4, [sp, #16]
 8002ef0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ef2:	f042 0202 	orr.w	r2, r2, #2
 8002ef6:	631a      	str	r2, [r3, #48]	; 0x30
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	9304      	str	r3, [sp, #16]
	HAL_GPIO_WritePin(GPIOC,
 8002f00:	4622      	mov	r2, r4
 8002f02:	f240 21ff 	movw	r1, #767	; 0x2ff
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002f06:	9b04      	ldr	r3, [sp, #16]
	HAL_GPIO_WritePin(GPIOC,
 8002f08:	f7fd fc62 	bl	80007d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002f0c:	4622      	mov	r2, r4
 8002f0e:	2120      	movs	r1, #32
 8002f10:	4851      	ldr	r0, [pc, #324]	; (8003058 <main+0x220>)
 8002f12:	f7fd fc5d 	bl	80007d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,
 8002f16:	4622      	mov	r2, r4
 8002f18:	217f      	movs	r1, #127	; 0x7f
 8002f1a:	4849      	ldr	r0, [pc, #292]	; (8003040 <main+0x208>)
 8002f1c:	f7fd fc58 	bl	80007d0 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002f20:	4b4e      	ldr	r3, [pc, #312]	; (800305c <main+0x224>)
	HAL_GPIO_Init(BlueB_GPIO_Port, &GPIO_InitStruct);
 8002f22:	4846      	ldr	r0, [pc, #280]	; (800303c <main+0x204>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f24:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002f26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	HAL_GPIO_Init(BlueB_GPIO_Port, &GPIO_InitStruct);
 8002f2a:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002f2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f30:	2701      	movs	r7, #1
	HAL_GPIO_Init(BlueB_GPIO_Port, &GPIO_InitStruct);
 8002f32:	f7fd fb6d 	bl	8000610 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f36:	f240 23ff 	movw	r3, #767	; 0x2ff
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f3a:	a905      	add	r1, sp, #20
 8002f3c:	483f      	ldr	r0, [pc, #252]	; (800303c <main+0x204>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f3e:	e9cd 3705 	strd	r3, r7, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f42:	e9cd 4407 	strd	r4, r4, [sp, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f46:	f7fd fb63 	bl	8000610 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LD2_Pin;
 8002f4a:	2320      	movs	r3, #32
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002f4c:	a905      	add	r1, sp, #20
 8002f4e:	4842      	ldr	r0, [pc, #264]	; (8003058 <main+0x220>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f50:	e9cd 3705 	strd	r3, r7, [sp, #20]
	GPIO_InitStruct.Pin = A1_Pin | B1_Pin | C1_Pin | D1_Pin | E1_Pin | F1_Pin
 8002f54:	f04f 087f 	mov.w	r8, #127	; 0x7f
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f58:	e9cd 4407 	strd	r4, r4, [sp, #28]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002f5c:	f7fd fb58 	bl	8000610 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f60:	a905      	add	r1, sp, #20
 8002f62:	4837      	ldr	r0, [pc, #220]	; (8003040 <main+0x208>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f64:	e9cd 8705 	strd	r8, r7, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f68:	e9cd 4407 	strd	r4, r4, [sp, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f6c:	f7fd fb50 	bl	8000610 <HAL_GPIO_Init>
	htim7.Init.Prescaler = 179;
 8002f70:	493b      	ldr	r1, [pc, #236]	; (8003060 <main+0x228>)
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f72:	60b4      	str	r4, [r6, #8]
	htim7.Init.Prescaler = 179;
 8002f74:	23b3      	movs	r3, #179	; 0xb3
 8002f76:	e9c6 1300 	strd	r1, r3, [r6]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 8002f7a:	4630      	mov	r0, r6
	htim7.Init.Period = 89;
 8002f7c:	2359      	movs	r3, #89	; 0x59
 8002f7e:	60f3      	str	r3, [r6, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f80:	61b4      	str	r4, [r6, #24]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002f82:	e9cd 4405 	strd	r4, r4, [sp, #20]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 8002f86:	f7fe fba5 	bl	80016d4 <HAL_TIM_Base_Init>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig)
 8002f8a:	a905      	add	r1, sp, #20
 8002f8c:	4630      	mov	r0, r6
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f8e:	e9cd 4405 	strd	r4, r4, [sp, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig)
 8002f92:	f7fe fbb9 	bl	8001708 <HAL_TIMEx_MasterConfigSynchronization>
	huart1.Instance = USART1;
 8002f96:	4833      	ldr	r0, [pc, #204]	; (8003064 <main+0x22c>)
	huart1.Init.BaudRate = 9600;
 8002f98:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002f9c:	e9c0 5300 	strd	r5, r3, [r0]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002fa0:	230c      	movs	r3, #12
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fa2:	e9c0 3405 	strd	r3, r4, [r0, #20]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002fa6:	e9c0 4402 	strd	r4, r4, [r0, #8]
	huart1.Init.Parity = UART_PARITY_NONE;
 8002faa:	6104      	str	r4, [r0, #16]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fac:	61c4      	str	r4, [r0, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8002fae:	f7fe fd1b 	bl	80019e8 <HAL_UART_Init>
	RTC_TimeTypeDef sTime = { 0 };
 8002fb2:	2214      	movs	r2, #20
 8002fb4:	4621      	mov	r1, r4
 8002fb6:	eb0d 0002 	add.w	r0, sp, r2
 8002fba:	f000 fe63 	bl	8003c84 <memset>
	hrtc.Instance = RTC;
 8002fbe:	4d2a      	ldr	r5, [pc, #168]	; (8003068 <main+0x230>)
 8002fc0:	4b2a      	ldr	r3, [pc, #168]	; (800306c <main+0x234>)
	hrtc.Init.AsynchPrediv = 127;
 8002fc2:	f8c5 8008 	str.w	r8, [r5, #8]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002fc6:	e9c5 3400 	strd	r3, r4, [r5]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8002fca:	4628      	mov	r0, r5
	hrtc.Init.SynchPrediv = 255;
 8002fcc:	23ff      	movs	r3, #255	; 0xff
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002fce:	e9c5 3403 	strd	r3, r4, [r5, #12]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002fd2:	e9c5 4405 	strd	r4, r4, [r5, #20]
	RTC_DateTypeDef sDate = { 0 };
 8002fd6:	9400      	str	r4, [sp, #0]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8002fd8:	f7fe f934 	bl	8001244 <HAL_RTC_Init>
	sTime.Hours = 0x12;
 8002fdc:	2312      	movs	r3, #18
 8002fde:	f8ad 3014 	strh.w	r3, [sp, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 8002fe2:	463a      	mov	r2, r7
	sTime.Minutes = 0x00;
 8002fe4:	2322      	movs	r3, #34	; 0x22
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 8002fe6:	a905      	add	r1, sp, #20
 8002fe8:	4628      	mov	r0, r5
	sTime.Minutes = 0x00;
 8002fea:	f88d 3016 	strb.w	r3, [sp, #22]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002fee:	e9cd 4408 	strd	r4, r4, [sp, #32]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 8002ff2:	f7fe f980 	bl	80012f6 <HAL_RTC_SetTime>
	sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 8002ff6:	a90c      	add	r1, sp, #48	; 0x30
 8002ff8:	4b1d      	ldr	r3, [pc, #116]	; (8003070 <main+0x238>)
 8002ffa:	f841 3d30 	str.w	r3, [r1, #-48]!
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 8002ffe:	463a      	mov	r2, r7
 8003000:	4628      	mov	r0, r5
 8003002:	f7fe f9e9 	bl	80013d8 <HAL_RTC_SetDate>
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8003006:	f243 22f2 	movw	r2, #13042	; 0x32f2
 800300a:	4639      	mov	r1, r7
 800300c:	4628      	mov	r0, r5
 800300e:	f7fe fa40 	bl	8001492 <HAL_RTCEx_BKUPWrite>
	HAL_TIM_Base_Start_IT(&htim7);
 8003012:	4630      	mov	r0, r6
	osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 2048);
 8003014:	4e17      	ldr	r6, [pc, #92]	; (8003074 <main+0x23c>)
	HAL_TIM_Base_Start_IT(&htim7);
 8003016:	f7fe fa41 	bl	800149c <HAL_TIM_Base_Start_IT>
	osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 2048);
 800301a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800301c:	ad05      	add	r5, sp, #20
 800301e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003020:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8003024:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003028:	4621      	mov	r1, r4
 800302a:	a805      	add	r0, sp, #20
 800302c:	f7fe feaf 	bl	8001d8e <osThreadCreate>
 8003030:	4b11      	ldr	r3, [pc, #68]	; (8003078 <main+0x240>)
 8003032:	6018      	str	r0, [r3, #0]
	osKernelStart();
 8003034:	f7fe fea6 	bl	8001d84 <osKernelStart>
 8003038:	e7fe      	b.n	8003038 <main+0x200>
 800303a:	bf00      	nop
 800303c:	40020800 	.word	0x40020800
 8003040:	40020400 	.word	0x40020400
 8003044:	20004074 	.word	0x20004074
 8003048:	20004018 	.word	0x20004018
 800304c:	40023800 	.word	0x40023800
 8003050:	20004150 	.word	0x20004150
 8003054:	40011000 	.word	0x40011000
 8003058:	40020000 	.word	0x40020000
 800305c:	10210000 	.word	0x10210000
 8003060:	40001400 	.word	0x40001400
 8003064:	20004090 	.word	0x20004090
 8003068:	200040d4 	.word	0x200040d4
 800306c:	40002800 	.word	0x40002800
 8003070:	20031204 	.word	0x20031204
 8003074:	08003cac 	.word	0x08003cac
 8003078:	20004014 	.word	0x20004014

0800307c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM7) {
 800307c:	6802      	ldr	r2, [r0, #0]
 800307e:	4b03      	ldr	r3, [pc, #12]	; (800308c <HAL_TIM_PeriodElapsedCallback+0x10>)
 8003080:	429a      	cmp	r2, r3
 8003082:	d101      	bne.n	8003088 <HAL_TIM_PeriodElapsedCallback+0xc>
		HAL_IncTick();
 8003084:	f000 b962 	b.w	800334c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	40001400 	.word	0x40001400

08003090 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003090:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003092:	4b0e      	ldr	r3, [pc, #56]	; (80030cc <HAL_MspInit+0x3c>)
 8003094:	2200      	movs	r2, #0
 8003096:	9200      	str	r2, [sp, #0]
 8003098:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800309a:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800309e:	6459      	str	r1, [r3, #68]	; 0x44
 80030a0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80030a2:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 80030a6:	9100      	str	r1, [sp, #0]
 80030a8:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030aa:	9201      	str	r2, [sp, #4]
 80030ac:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80030ae:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80030b2:	6419      	str	r1, [r3, #64]	; 0x40
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ba:	9301      	str	r3, [sp, #4]
 80030bc:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80030be:	210f      	movs	r1, #15
 80030c0:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030c4:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80030c6:	f7fd ba4f 	b.w	8000568 <HAL_NVIC_SetPriority>
 80030ca:	bf00      	nop
 80030cc:	40023800 	.word	0x40023800

080030d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030d0:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM7)
 80030d2:	4b0f      	ldr	r3, [pc, #60]	; (8003110 <HAL_TIM_Base_MspInit+0x40>)
 80030d4:	6802      	ldr	r2, [r0, #0]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d116      	bne.n	8003108 <HAL_TIM_Base_MspInit+0x38>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80030da:	2200      	movs	r2, #0
 80030dc:	f503 3309 	add.w	r3, r3, #140288	; 0x22400
 80030e0:	9201      	str	r2, [sp, #4]
 80030e2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80030e4:	f041 0120 	orr.w	r1, r1, #32
 80030e8:	6419      	str	r1, [r3, #64]	; 0x40
 80030ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ec:	f003 0320 	and.w	r3, r3, #32
 80030f0:	9301      	str	r3, [sp, #4]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80030f2:	4611      	mov	r1, r2
 80030f4:	2037      	movs	r0, #55	; 0x37
    __HAL_RCC_TIM7_CLK_ENABLE();
 80030f6:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80030f8:	f7fd fa36 	bl	8000568 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80030fc:	2037      	movs	r0, #55	; 0x37
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80030fe:	b003      	add	sp, #12
 8003100:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003104:	f7fd ba64 	b.w	80005d0 <HAL_NVIC_EnableIRQ>
}
 8003108:	b003      	add	sp, #12
 800310a:	f85d fb04 	ldr.w	pc, [sp], #4
 800310e:	bf00      	nop
 8003110:	40001400 	.word	0x40001400

08003114 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003114:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003116:	2214      	movs	r2, #20
{
 8003118:	b08a      	sub	sp, #40	; 0x28
 800311a:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800311c:	2100      	movs	r1, #0
 800311e:	eb0d 0002 	add.w	r0, sp, r2
 8003122:	f000 fdaf 	bl	8003c84 <memset>
  if(huart->Instance==USART1)
 8003126:	6823      	ldr	r3, [r4, #0]
 8003128:	4a30      	ldr	r2, [pc, #192]	; (80031ec <HAL_UART_MspInit+0xd8>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d12f      	bne.n	800318e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800312e:	4b30      	ldr	r3, [pc, #192]	; (80031f0 <HAL_UART_MspInit+0xdc>)
 8003130:	2400      	movs	r4, #0
 8003132:	9401      	str	r4, [sp, #4]
 8003134:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003136:	f042 0210 	orr.w	r2, r2, #16
 800313a:	645a      	str	r2, [r3, #68]	; 0x44
 800313c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800313e:	f002 0210 	and.w	r2, r2, #16
 8003142:	9201      	str	r2, [sp, #4]
 8003144:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003146:	9402      	str	r4, [sp, #8]
 8003148:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800314a:	f042 0201 	orr.w	r2, r2, #1
 800314e:	631a      	str	r2, [r3, #48]	; 0x30
 8003150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	9302      	str	r3, [sp, #8]
 8003158:	9b02      	ldr	r3, [sp, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800315a:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 800315e:	2302      	movs	r3, #2
 8003160:	e9cd 0305 	strd	r0, r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003164:	f04f 0c01 	mov.w	ip, #1
 8003168:	2303      	movs	r3, #3
 800316a:	e9cd c307 	strd	ip, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800316e:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003170:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003172:	4820      	ldr	r0, [pc, #128]	; (80031f4 <HAL_UART_MspInit+0xe0>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003174:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003176:	f7fd fa4b 	bl	8000610 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800317a:	2025      	movs	r0, #37	; 0x25
 800317c:	4622      	mov	r2, r4
 800317e:	2105      	movs	r1, #5
 8003180:	f7fd f9f2 	bl	8000568 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003184:	2025      	movs	r0, #37	; 0x25
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003186:	f7fd fa23 	bl	80005d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800318a:	b00a      	add	sp, #40	; 0x28
 800318c:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART2)
 800318e:	4a1a      	ldr	r2, [pc, #104]	; (80031f8 <HAL_UART_MspInit+0xe4>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d1fa      	bne.n	800318a <HAL_UART_MspInit+0x76>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003194:	4b16      	ldr	r3, [pc, #88]	; (80031f0 <HAL_UART_MspInit+0xdc>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003196:	4817      	ldr	r0, [pc, #92]	; (80031f4 <HAL_UART_MspInit+0xe0>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8003198:	2400      	movs	r4, #0
 800319a:	9403      	str	r4, [sp, #12]
 800319c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800319e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80031a2:	641a      	str	r2, [r3, #64]	; 0x40
 80031a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031a6:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80031aa:	9203      	str	r2, [sp, #12]
 80031ac:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031ae:	9404      	str	r4, [sp, #16]
 80031b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031b2:	f042 0201 	orr.w	r2, r2, #1
 80031b6:	631a      	str	r2, [r3, #48]	; 0x30
 80031b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c0:	220c      	movs	r2, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031c2:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c4:	2302      	movs	r3, #2
 80031c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031ca:	2101      	movs	r1, #1
 80031cc:	2303      	movs	r3, #3
 80031ce:	e9cd 1307 	strd	r1, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80031d2:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031d4:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80031d6:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031d8:	f7fd fa1a 	bl	8000610 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80031dc:	2026      	movs	r0, #38	; 0x26
 80031de:	4622      	mov	r2, r4
 80031e0:	2105      	movs	r1, #5
 80031e2:	f7fd f9c1 	bl	8000568 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80031e6:	2026      	movs	r0, #38	; 0x26
 80031e8:	e7cd      	b.n	8003186 <HAL_UART_MspInit+0x72>
 80031ea:	bf00      	nop
 80031ec:	40011000 	.word	0x40011000
 80031f0:	40023800 	.word	0x40023800
 80031f4:	40020000 	.word	0x40020000
 80031f8:	40004400 	.word	0x40004400

080031fc <HAL_RTC_MspInit>:
}


void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 80031fc:	6802      	ldr	r2, [r0, #0]
 80031fe:	4b03      	ldr	r3, [pc, #12]	; (800320c <HAL_RTC_MspInit+0x10>)
 8003200:	429a      	cmp	r2, r3
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003202:	bf02      	ittt	eq
 8003204:	4b02      	ldreq	r3, [pc, #8]	; (8003210 <HAL_RTC_MspInit+0x14>)
 8003206:	2201      	moveq	r2, #1
 8003208:	601a      	streq	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800320a:	4770      	bx	lr
 800320c:	40002800 	.word	0x40002800
 8003210:	42470e3c 	.word	0x42470e3c

08003214 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003214:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003216:	4601      	mov	r1, r0
{
 8003218:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800321a:	2200      	movs	r2, #0
 800321c:	2036      	movs	r0, #54	; 0x36
 800321e:	f7fd f9a3 	bl	8000568 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003222:	2036      	movs	r0, #54	; 0x36
 8003224:	f7fd f9d4 	bl	80005d0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003228:	2500      	movs	r5, #0
 800322a:	4b15      	ldr	r3, [pc, #84]	; (8003280 <HAL_InitTick+0x6c>)
 800322c:	9502      	str	r5, [sp, #8]
 800322e:	6c1a      	ldr	r2, [r3, #64]	; 0x40

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003230:	4c14      	ldr	r4, [pc, #80]	; (8003284 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003232:	f042 0210 	orr.w	r2, r2, #16
 8003236:	641a      	str	r2, [r3, #64]	; 0x40
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	f003 0310 	and.w	r3, r3, #16
 800323e:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003240:	a901      	add	r1, sp, #4
 8003242:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003244:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003246:	f7fd fbc3 	bl	80009d0 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800324a:	f7fd fba1 	bl	8000990 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 800324e:	4b0e      	ldr	r3, [pc, #56]	; (8003288 <HAL_InitTick+0x74>)
 8003250:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8003252:	f240 33e7 	movw	r3, #999	; 0x3e7
 8003256:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003258:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800325a:	4b0c      	ldr	r3, [pc, #48]	; (800328c <HAL_InitTick+0x78>)
 800325c:	fbb0 f0f3 	udiv	r0, r0, r3
 8003260:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 8003262:	6060      	str	r0, [r4, #4]
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003264:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8003266:	6125      	str	r5, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003268:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800326a:	f7fe fa33 	bl	80016d4 <HAL_TIM_Base_Init>
 800326e:	b920      	cbnz	r0, 800327a <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003270:	4620      	mov	r0, r4
 8003272:	f7fe f913 	bl	800149c <HAL_TIM_Base_Start_IT>
  }

  /* Return function status */
  return HAL_ERROR;
}
 8003276:	b009      	add	sp, #36	; 0x24
 8003278:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 800327a:	2001      	movs	r0, #1
 800327c:	e7fb      	b.n	8003276 <HAL_InitTick+0x62>
 800327e:	bf00      	nop
 8003280:	40023800 	.word	0x40023800
 8003284:	20004194 	.word	0x20004194
 8003288:	40001000 	.word	0x40001000
 800328c:	000f4240 	.word	0x000f4240

08003290 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003290:	4801      	ldr	r0, [pc, #4]	; (8003298 <USART1_IRQHandler+0x8>)
 8003292:	f7fe bccf 	b.w	8001c34 <HAL_UART_IRQHandler>
 8003296:	bf00      	nop
 8003298:	20004090 	.word	0x20004090

0800329c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800329c:	4770      	bx	lr

0800329e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800329e:	e7fe      	b.n	800329e <HardFault_Handler>

080032a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032a0:	e7fe      	b.n	80032a0 <MemManage_Handler>

080032a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032a2:	e7fe      	b.n	80032a2 <BusFault_Handler>

080032a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032a4:	e7fe      	b.n	80032a4 <UsageFault_Handler>

080032a6 <DebugMon_Handler>:
 80032a6:	4770      	bx	lr

080032a8 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80032a8:	4801      	ldr	r0, [pc, #4]	; (80032b0 <TIM6_DAC_IRQHandler+0x8>)
 80032aa:	f7fe b90b 	b.w	80014c4 <HAL_TIM_IRQHandler>
 80032ae:	bf00      	nop
 80032b0:	20004194 	.word	0x20004194

080032b4 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80032b4:	4801      	ldr	r0, [pc, #4]	; (80032bc <TIM7_IRQHandler+0x8>)
 80032b6:	f7fe b905 	b.w	80014c4 <HAL_TIM_IRQHandler>
 80032ba:	bf00      	nop
 80032bc:	20004150 	.word	0x20004150

080032c0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032c0:	490f      	ldr	r1, [pc, #60]	; (8003300 <SystemInit+0x40>)
 80032c2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80032c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80032ce:	4b0d      	ldr	r3, [pc, #52]	; (8003304 <SystemInit+0x44>)
 80032d0:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80032d2:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80032d4:	f042 0201 	orr.w	r2, r2, #1
 80032d8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80032da:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80032e2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80032e6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80032e8:	4a07      	ldr	r2, [pc, #28]	; (8003308 <SystemInit+0x48>)
 80032ea:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80032f2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80032f4:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80032f6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80032fa:	608b      	str	r3, [r1, #8]
#endif
}
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	e000ed00 	.word	0xe000ed00
 8003304:	40023800 	.word	0x40023800
 8003308:	24003010 	.word	0x24003010

0800330c <TM_DELAY_Init>:
uint32_t TM_DELAY_Init(void) {
#if !defined(STM32F0xx)
	uint32_t c;
	
    /* Enable TRC */
    CoreDebug->DEMCR &= ~0x01000000;
 800330c:	4b0c      	ldr	r3, [pc, #48]	; (8003340 <TM_DELAY_Init+0x34>)
 800330e:	68da      	ldr	r2, [r3, #12]
 8003310:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003314:	60da      	str	r2, [r3, #12]
    CoreDebug->DEMCR |=  0x01000000;
 8003316:	68da      	ldr	r2, [r3, #12]
 8003318:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800331c:	60da      	str	r2, [r3, #12]
	
    /* Enable counter */
    DWT->CTRL &= ~0x00000001;
 800331e:	4b09      	ldr	r3, [pc, #36]	; (8003344 <TM_DELAY_Init+0x38>)
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	f022 0201 	bic.w	r2, r2, #1
 8003326:	601a      	str	r2, [r3, #0]
    DWT->CTRL |=  0x00000001;
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	f042 0201 	orr.w	r2, r2, #1
 800332e:	601a      	str	r2, [r3, #0]
	
    /* Reset counter */
    DWT->CYCCNT = 0;
 8003330:	2200      	movs	r2, #0
 8003332:	605a      	str	r2, [r3, #4]
	
	/* Check if DWT has started */
	c = DWT->CYCCNT;
 8003334:	685a      	ldr	r2, [r3, #4]
	
	/* 2 dummys */
	__ASM volatile ("NOP");
 8003336:	bf00      	nop
	__ASM volatile ("NOP");
 8003338:	bf00      	nop
	
	/* Return difference, if result is zero, DWT has not started */
	return (DWT->CYCCNT - c);
 800333a:	6858      	ldr	r0, [r3, #4]
#else
	/* Return OK */
	return 1;
#endif
}
 800333c:	1a80      	subs	r0, r0, r2
 800333e:	4770      	bx	lr
 8003340:	e000edf0 	.word	0xe000edf0
 8003344:	e0001000 	.word	0xe0001000

08003348 <TM_DELAY_1msHandler>:
/* 1ms function called when systick makes interrupt */
__weak void TM_DELAY_1msHandler(void) {
	/* NOTE: This function Should not be modified, when the callback is needed,
           the TM_DELAY_1msHandler could be implemented in the user file
	*/
}
 8003348:	4770      	bx	lr
	...

0800334c <HAL_IncTick>:
/* Called from Systick handler */
void HAL_IncTick(void) {
	uint8_t i;
	
	/* Increase system time */
	TM_Time++;
 800334c:	4a18      	ldr	r2, [pc, #96]	; (80033b0 <HAL_IncTick+0x64>)
void HAL_IncTick(void) {
 800334e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	TM_Time++;
 8003350:	6813      	ldr	r3, [r2, #0]
 8003352:	3301      	adds	r3, #1
 8003354:	6013      	str	r3, [r2, #0]
	
	/* Decrease other system time */
	if (TM_Time2) {
 8003356:	4b17      	ldr	r3, [pc, #92]	; (80033b4 <HAL_IncTick+0x68>)
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	b112      	cbz	r2, 8003362 <HAL_IncTick+0x16>
		TM_Time2--;
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	3a01      	subs	r2, #1
 8003360:	601a      	str	r2, [r3, #0]
	}
	
	/* Check for timers */
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
 8003362:	4e15      	ldr	r6, [pc, #84]	; (80033b8 <HAL_IncTick+0x6c>)
void HAL_IncTick(void) {
 8003364:	2500      	movs	r5, #0
 8003366:	4637      	mov	r7, r6
	for (i = 0; i < CustomTimers.Count; i++) {
 8003368:	7833      	ldrb	r3, [r6, #0]
 800336a:	b2ec      	uxtb	r4, r5
 800336c:	42a3      	cmp	r3, r4
 800336e:	d802      	bhi.n	8003376 <HAL_IncTick+0x2a>
			}
		}
	}
	
	/* Call 1ms interrupt handler function */
	TM_DELAY_1msHandler();
 8003370:	f7ff ffea 	bl	8003348 <TM_DELAY_1msHandler>
}
 8003374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			CustomTimers.Timers[i] &&             /*!< Pointer exists */
 8003376:	00a4      	lsls	r4, r4, #2
 8003378:	1933      	adds	r3, r6, r4
 800337a:	6858      	ldr	r0, [r3, #4]
		if (
 800337c:	b1b0      	cbz	r0, 80033ac <HAL_IncTick+0x60>
			CustomTimers.Timers[i] &&             /*!< Pointer exists */
 800337e:	7803      	ldrb	r3, [r0, #0]
 8003380:	079b      	lsls	r3, r3, #30
 8003382:	d513      	bpl.n	80033ac <HAL_IncTick+0x60>
			if (CustomTimers.Timers[i]->CNT) {
 8003384:	6883      	ldr	r3, [r0, #8]
 8003386:	b10b      	cbz	r3, 800338c <HAL_IncTick+0x40>
				CustomTimers.Timers[i]->CNT--;
 8003388:	3b01      	subs	r3, #1
 800338a:	6083      	str	r3, [r0, #8]
			if (CustomTimers.Timers[i]->CNT == 0) {
 800338c:	6883      	ldr	r3, [r0, #8]
 800338e:	b96b      	cbnz	r3, 80033ac <HAL_IncTick+0x60>
				CustomTimers.Timers[i]->CNT = CustomTimers.Timers[i]->ARR;
 8003390:	443c      	add	r4, r7
				CustomTimers.Timers[i]->Callback(CustomTimers.Timers[i], CustomTimers.Timers[i]->UserParameters);
 8003392:	e9d0 3103 	ldrd	r3, r1, [r0, #12]
 8003396:	4798      	blx	r3
				CustomTimers.Timers[i]->CNT = CustomTimers.Timers[i]->ARR;
 8003398:	6862      	ldr	r2, [r4, #4]
 800339a:	6853      	ldr	r3, [r2, #4]
 800339c:	6093      	str	r3, [r2, #8]
				if (!CustomTimers.Timers[i]->Flags.F.AREN) {
 800339e:	7813      	ldrb	r3, [r2, #0]
 80033a0:	f013 0101 	ands.w	r1, r3, #1
					CustomTimers.Timers[i]->Flags.F.CNTEN = 0;
 80033a4:	bf04      	itt	eq
 80033a6:	f361 0341 	bfieq	r3, r1, #1, #1
 80033aa:	7013      	strbeq	r3, [r2, #0]
 80033ac:	3501      	adds	r5, #1
 80033ae:	e7db      	b.n	8003368 <HAL_IncTick+0x1c>
 80033b0:	20003ff0 	.word	0x20003ff0
 80033b4:	20003ff4 	.word	0x20003ff4
 80033b8:	20003fd8 	.word	0x20003fd8

080033bc <HAL_GetTick>:
	}
}

uint32_t HAL_GetTick(void) {
	/* Return current time in milliseconds */
	return TM_Time;
 80033bc:	4b01      	ldr	r3, [pc, #4]	; (80033c4 <HAL_GetTick+0x8>)
 80033be:	6818      	ldr	r0, [r3, #0]
}
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	20003ff0 	.word	0x20003ff0

080033c8 <TM_DS18B20_Start>:
 * | OTHER DEALINGS IN THE SOFTWARE.
 * |----------------------------------------------------------------------
 */
#include "tm_stm32_ds18b20.h"

uint8_t TM_DS18B20_Start(TM_OneWire_t* OneWire, uint8_t *ROM) {
 80033c8:	b538      	push	{r3, r4, r5, lr}
	return 1;
}

uint8_t TM_DS18B20_Is(uint8_t *ROM) {
	/* Checks if first byte is equal to DS18B20's family code */
	if (*ROM == DS18B20_FAMILY_CODE) {
 80033ca:	780b      	ldrb	r3, [r1, #0]
 80033cc:	2b28      	cmp	r3, #40	; 0x28
uint8_t TM_DS18B20_Start(TM_OneWire_t* OneWire, uint8_t *ROM) {
 80033ce:	4604      	mov	r4, r0
 80033d0:	460d      	mov	r5, r1
	if (*ROM == DS18B20_FAMILY_CODE) {
 80033d2:	d10b      	bne.n	80033ec <TM_DS18B20_Start+0x24>
	TM_OneWire_Reset(OneWire);
 80033d4:	f000 fa8c 	bl	80038f0 <TM_OneWire_Reset>
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 80033d8:	4629      	mov	r1, r5
 80033da:	4620      	mov	r0, r4
 80033dc:	f000 fb8a 	bl	8003af4 <TM_OneWire_SelectWithPointer>
	TM_OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
 80033e0:	4620      	mov	r0, r4
 80033e2:	2144      	movs	r1, #68	; 0x44
 80033e4:	f000 fae8 	bl	80039b8 <TM_OneWire_WriteByte>
	return 1;
 80033e8:	2001      	movs	r0, #1
}
 80033ea:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
 80033ec:	2000      	movs	r0, #0
 80033ee:	e7fc      	b.n	80033ea <TM_DS18B20_Start+0x22>

080033f0 <TM_DS18B20_StartAll>:
void TM_DS18B20_StartAll(TM_OneWire_t* OneWire) {
 80033f0:	b510      	push	{r4, lr}
 80033f2:	4604      	mov	r4, r0
	TM_OneWire_Reset(OneWire);
 80033f4:	f000 fa7c 	bl	80038f0 <TM_OneWire_Reset>
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_SKIPROM);
 80033f8:	4620      	mov	r0, r4
 80033fa:	21cc      	movs	r1, #204	; 0xcc
 80033fc:	f000 fadc 	bl	80039b8 <TM_OneWire_WriteByte>
	TM_OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
 8003400:	4620      	mov	r0, r4
 8003402:	2144      	movs	r1, #68	; 0x44
}
 8003404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	TM_OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
 8003408:	f000 bad6 	b.w	80039b8 <TM_OneWire_WriteByte>

0800340c <TM_DS18B20_Read>:
uint8_t TM_DS18B20_Read(TM_OneWire_t* OneWire, uint8_t *ROM, float *destination) {
 800340c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (*ROM == DS18B20_FAMILY_CODE) {
 800340e:	780b      	ldrb	r3, [r1, #0]
 8003410:	2b28      	cmp	r3, #40	; 0x28
uint8_t TM_DS18B20_Read(TM_OneWire_t* OneWire, uint8_t *ROM, float *destination) {
 8003412:	b085      	sub	sp, #20
 8003414:	4607      	mov	r7, r0
 8003416:	460c      	mov	r4, r1
 8003418:	4615      	mov	r5, r2
	if (*ROM == DS18B20_FAMILY_CODE) {
 800341a:	d002      	beq.n	8003422 <TM_DS18B20_Read+0x16>
		return 0;
 800341c:	2000      	movs	r0, #0
}
 800341e:	b005      	add	sp, #20
 8003420:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!TM_OneWire_ReadBit(OneWire)) {
 8003422:	f000 faab 	bl	800397c <TM_OneWire_ReadBit>
 8003426:	2800      	cmp	r0, #0
 8003428:	d0f8      	beq.n	800341c <TM_DS18B20_Read+0x10>
	TM_OneWire_Reset(OneWire);
 800342a:	4638      	mov	r0, r7
 800342c:	f000 fa60 	bl	80038f0 <TM_OneWire_Reset>
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8003430:	4621      	mov	r1, r4
 8003432:	4638      	mov	r0, r7
 8003434:	f000 fb5e 	bl	8003af4 <TM_OneWire_SelectWithPointer>
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8003438:	21be      	movs	r1, #190	; 0xbe
 800343a:	4638      	mov	r0, r7
 800343c:	f000 fabc 	bl	80039b8 <TM_OneWire_WriteByte>
 8003440:	2400      	movs	r4, #0
		data[i] = TM_OneWire_ReadByte(OneWire);
 8003442:	ae01      	add	r6, sp, #4
 8003444:	4638      	mov	r0, r7
 8003446:	f000 fac7 	bl	80039d8 <TM_OneWire_ReadByte>
 800344a:	5530      	strb	r0, [r6, r4]
 800344c:	3401      	adds	r4, #1
	for (i = 0; i < 9; i++) {
 800344e:	2c09      	cmp	r4, #9
 8003450:	d1f8      	bne.n	8003444 <TM_DS18B20_Read+0x38>
	crc = TM_OneWire_CRC8(data, 8);
 8003452:	2108      	movs	r1, #8
 8003454:	4630      	mov	r0, r6
 8003456:	f000 fb5a 	bl	8003b0e <TM_OneWire_CRC8>
	if (crc != data[8]) {
 800345a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800345e:	4283      	cmp	r3, r0
 8003460:	d1dc      	bne.n	800341c <TM_DS18B20_Read+0x10>
	temperature = data[0] | (data[1] << 8);
 8003462:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003466:	f89d 6004 	ldrb.w	r6, [sp, #4]
 800346a:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
 800346e:	b236      	sxth	r6, r6
	TM_OneWire_Reset(OneWire);
 8003470:	4638      	mov	r0, r7
 8003472:	f000 fa3d 	bl	80038f0 <TM_OneWire_Reset>
	temperature = data[0] | (data[1] << 8);
 8003476:	b2b4      	uxth	r4, r6
	if (temperature & 0x8000) {
 8003478:	2e00      	cmp	r6, #0
		temperature = ~temperature + 1;
 800347a:	bfbc      	itt	lt
 800347c:	4264      	neglt	r4, r4
 800347e:	b2a4      	uxthlt	r4, r4
	digit |= ((temperature >> 8) & 0x7) << 4;
 8003480:	ea4f 1314 	mov.w	r3, r4, lsr #4
 8003484:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003488:	f344 1307 	sbfx	r3, r4, #4, #8
 800348c:	ea43 0302 	orr.w	r3, r3, r2
	resolution = ((data[4] & 0x60) >> 5) + 9;
 8003490:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8003494:	f3c2 1241 	ubfx	r2, r2, #5, #2
	switch (resolution) {
 8003498:	f102 0209 	add.w	r2, r2, #9
		minus = 1;
 800349c:	bfb4      	ite	lt
 800349e:	2101      	movlt	r1, #1
	int8_t digit, minus = 0;
 80034a0:	2100      	movge	r1, #0
	switch (resolution) {
 80034a2:	2a0b      	cmp	r2, #11
 80034a4:	d023      	beq.n	80034ee <TM_DS18B20_Read+0xe2>
 80034a6:	2a0c      	cmp	r2, #12
 80034a8:	d028      	beq.n	80034fc <TM_DS18B20_Read+0xf0>
 80034aa:	2a0a      	cmp	r2, #10
			decimal = (temperature >> 3) & 0x01;
 80034ac:	bf1b      	ittet	ne
 80034ae:	f3c4 02c0 	ubfxne	r2, r4, #3, #1
 80034b2:	ee07 2a90 	vmovne	s15, r2
			decimal = (temperature >> 2) & 0x03;
 80034b6:	f3c4 0281 	ubfxeq	r2, r4, #2, #2
			decimal = (temperature >> 3) & 0x01;
 80034ba:	eef8 7ae7 	vcvtne.f32.s32	s15, s15
			decimal = (temperature >> 2) & 0x03;
 80034be:	bf0d      	iteet	eq
 80034c0:	ee07 2a90 	vmoveq	s15, r2
			decimal *= (float)DS18B20_DECIMAL_STEPS_9BIT;
 80034c4:	eeb6 7a00 	vmovne.f32	s14, #96	; 0x3f000000  0.5
 80034c8:	ee67 7a87 	vmulne.f32	s15, s15, s14
			decimal *= (float)DS18B20_DECIMAL_STEPS_10BIT;
 80034cc:	eefa 7acf 	vcvteq.f32.s32	s15, s15, #2
	decimal = digit + decimal;
 80034d0:	ee07 3a10 	vmov	s14, r3
 80034d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80034d8:	ee77 7a27 	vadd.f32	s15, s14, s15
	if (minus) {
 80034dc:	b119      	cbz	r1, 80034e6 <TM_DS18B20_Read+0xda>
		decimal = 0 - decimal;
 80034de:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800350c <TM_DS18B20_Read+0x100>
 80034e2:	ee77 7a67 	vsub.f32	s15, s14, s15
	*destination = decimal;
 80034e6:	edc5 7a00 	vstr	s15, [r5]
	return 1;
 80034ea:	2001      	movs	r0, #1
 80034ec:	e797      	b.n	800341e <TM_DS18B20_Read+0x12>
			decimal = (temperature >> 1) & 0x07;
 80034ee:	f3c4 0242 	ubfx	r2, r4, #1, #3
 80034f2:	ee07 2a90 	vmov	s15, r2
			decimal *= (float)DS18B20_DECIMAL_STEPS_11BIT;
 80034f6:	eefa 7aee 	vcvt.f32.s32	s15, s15, #3
		} break;
 80034fa:	e7e9      	b.n	80034d0 <TM_DS18B20_Read+0xc4>
			decimal = temperature & 0x0F;
 80034fc:	f004 020f 	and.w	r2, r4, #15
 8003500:	ee07 2a90 	vmov	s15, r2
			decimal *= (float)DS18B20_DECIMAL_STEPS_12BIT;
 8003504:	eefa 7ace 	vcvt.f32.s32	s15, s15, #4
		} break;
 8003508:	e7e2      	b.n	80034d0 <TM_DS18B20_Read+0xc4>
 800350a:	bf00      	nop
 800350c:	00000000 	.word	0x00000000

08003510 <TM_DS18B20_SetResolution>:
uint8_t TM_DS18B20_SetResolution(TM_OneWire_t* OneWire, uint8_t *ROM, TM_DS18B20_Resolution_t resolution) {
 8003510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (*ROM == DS18B20_FAMILY_CODE) {
 8003514:	780b      	ldrb	r3, [r1, #0]
 8003516:	2b28      	cmp	r3, #40	; 0x28
uint8_t TM_DS18B20_SetResolution(TM_OneWire_t* OneWire, uint8_t *ROM, TM_DS18B20_Resolution_t resolution) {
 8003518:	4604      	mov	r4, r0
 800351a:	460e      	mov	r6, r1
 800351c:	4691      	mov	r9, r2
	if (*ROM == DS18B20_FAMILY_CODE) {
 800351e:	d15c      	bne.n	80035da <TM_DS18B20_SetResolution+0xca>
	TM_OneWire_Reset(OneWire);
 8003520:	f000 f9e6 	bl	80038f0 <TM_OneWire_Reset>
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8003524:	4631      	mov	r1, r6
 8003526:	4620      	mov	r0, r4
 8003528:	f000 fae4 	bl	8003af4 <TM_OneWire_SelectWithPointer>
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 800352c:	21be      	movs	r1, #190	; 0xbe
 800352e:	4620      	mov	r0, r4
 8003530:	f000 fa42 	bl	80039b8 <TM_OneWire_WriteByte>
	TM_OneWire_ReadByte(OneWire);
 8003534:	4620      	mov	r0, r4
 8003536:	f000 fa4f 	bl	80039d8 <TM_OneWire_ReadByte>
	TM_OneWire_ReadByte(OneWire);
 800353a:	4620      	mov	r0, r4
 800353c:	f000 fa4c 	bl	80039d8 <TM_OneWire_ReadByte>
	th = TM_OneWire_ReadByte(OneWire);
 8003540:	4620      	mov	r0, r4
 8003542:	f000 fa49 	bl	80039d8 <TM_OneWire_ReadByte>
 8003546:	4680      	mov	r8, r0
	tl = TM_OneWire_ReadByte(OneWire);
 8003548:	4620      	mov	r0, r4
 800354a:	f000 fa45 	bl	80039d8 <TM_OneWire_ReadByte>
 800354e:	4607      	mov	r7, r0
	conf = TM_OneWire_ReadByte(OneWire);
 8003550:	4620      	mov	r0, r4
 8003552:	f000 fa41 	bl	80039d8 <TM_OneWire_ReadByte>
	if (resolution == TM_DS18B20_Resolution_9bits) {
 8003556:	f1b9 0f09 	cmp.w	r9, #9
	conf = TM_OneWire_ReadByte(OneWire);
 800355a:	4605      	mov	r5, r0
	if (resolution == TM_DS18B20_Resolution_9bits) {
 800355c:	d126      	bne.n	80035ac <TM_DS18B20_SetResolution+0x9c>
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 800355e:	f000 059f 	and.w	r5, r0, #159	; 0x9f
	TM_OneWire_Reset(OneWire);
 8003562:	4620      	mov	r0, r4
 8003564:	f000 f9c4 	bl	80038f0 <TM_OneWire_Reset>
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8003568:	4631      	mov	r1, r6
 800356a:	4620      	mov	r0, r4
 800356c:	f000 fac2 	bl	8003af4 <TM_OneWire_SelectWithPointer>
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8003570:	214e      	movs	r1, #78	; 0x4e
 8003572:	4620      	mov	r0, r4
 8003574:	f000 fa20 	bl	80039b8 <TM_OneWire_WriteByte>
	TM_OneWire_WriteByte(OneWire, th);
 8003578:	4641      	mov	r1, r8
 800357a:	4620      	mov	r0, r4
 800357c:	f000 fa1c 	bl	80039b8 <TM_OneWire_WriteByte>
	TM_OneWire_WriteByte(OneWire, tl);
 8003580:	4639      	mov	r1, r7
 8003582:	4620      	mov	r0, r4
 8003584:	f000 fa18 	bl	80039b8 <TM_OneWire_WriteByte>
	TM_OneWire_WriteByte(OneWire, conf);
 8003588:	4629      	mov	r1, r5
 800358a:	4620      	mov	r0, r4
 800358c:	f000 fa14 	bl	80039b8 <TM_OneWire_WriteByte>
	TM_OneWire_Reset(OneWire);
 8003590:	4620      	mov	r0, r4
 8003592:	f000 f9ad 	bl	80038f0 <TM_OneWire_Reset>
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8003596:	4631      	mov	r1, r6
 8003598:	4620      	mov	r0, r4
 800359a:	f000 faab 	bl	8003af4 <TM_OneWire_SelectWithPointer>
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 800359e:	4620      	mov	r0, r4
 80035a0:	2148      	movs	r1, #72	; 0x48
 80035a2:	f000 fa09 	bl	80039b8 <TM_OneWire_WriteByte>
	return 1;
 80035a6:	2001      	movs	r0, #1
}
 80035a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (resolution == TM_DS18B20_Resolution_10bits) {
 80035ac:	f1b9 0f0a 	cmp.w	r9, #10
 80035b0:	d104      	bne.n	80035bc <TM_DS18B20_SetResolution+0xac>
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 80035b2:	f000 05bf 	and.w	r5, r0, #191	; 0xbf
		conf |= 1 << DS18B20_RESOLUTION_R0;
 80035b6:	f045 0520 	orr.w	r5, r5, #32
 80035ba:	e7d2      	b.n	8003562 <TM_DS18B20_SetResolution+0x52>
	} else if (resolution == TM_DS18B20_Resolution_11bits) {
 80035bc:	f1b9 0f0b 	cmp.w	r9, #11
 80035c0:	d104      	bne.n	80035cc <TM_DS18B20_SetResolution+0xbc>
 80035c2:	f000 05df 	and.w	r5, r0, #223	; 0xdf
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 80035c6:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 80035ca:	e7ca      	b.n	8003562 <TM_DS18B20_SetResolution+0x52>
	} else if (resolution == TM_DS18B20_Resolution_12bits) {
 80035cc:	f1b9 0f0c 	cmp.w	r9, #12
		conf |= 1 << DS18B20_RESOLUTION_R0;
 80035d0:	bf04      	itt	eq
 80035d2:	f040 0560 	orreq.w	r5, r0, #96	; 0x60
 80035d6:	b2ed      	uxtbeq	r5, r5
 80035d8:	e7c3      	b.n	8003562 <TM_DS18B20_SetResolution+0x52>
		return 0;
 80035da:	2000      	movs	r0, #0
 80035dc:	e7e4      	b.n	80035a8 <TM_DS18B20_SetResolution+0x98>

080035de <TM_DS18B20_Is>:
	if (*ROM == DS18B20_FAMILY_CODE) {
 80035de:	7800      	ldrb	r0, [r0, #0]
		return 1;
	}
	return 0;
}
 80035e0:	f1a0 0328 	sub.w	r3, r0, #40	; 0x28
 80035e4:	4258      	negs	r0, r3
 80035e6:	4158      	adcs	r0, r3
 80035e8:	4770      	bx	lr

080035ea <TM_DS18B20_SetAlarmLowTemperature>:

uint8_t TM_DS18B20_SetAlarmLowTemperature(TM_OneWire_t* OneWire, uint8_t *ROM, int8_t temp) {
 80035ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (*ROM == DS18B20_FAMILY_CODE) {
 80035ee:	780b      	ldrb	r3, [r1, #0]
 80035f0:	2b28      	cmp	r3, #40	; 0x28
uint8_t TM_DS18B20_SetAlarmLowTemperature(TM_OneWire_t* OneWire, uint8_t *ROM, int8_t temp) {
 80035f2:	4604      	mov	r4, r0
 80035f4:	460e      	mov	r6, r1
	if (*ROM == DS18B20_FAMILY_CODE) {
 80035f6:	d147      	bne.n	8003688 <TM_DS18B20_SetAlarmLowTemperature+0x9e>
 80035f8:	f06f 0536 	mvn.w	r5, #54	; 0x36
 80035fc:	4295      	cmp	r5, r2
 80035fe:	bfb8      	it	lt
 8003600:	4615      	movlt	r5, r2
	} 
	if (temp < -55) {
		temp = -55;
	}
	/* Reset line */
	TM_OneWire_Reset(OneWire);
 8003602:	f000 f975 	bl	80038f0 <TM_OneWire_Reset>
	/* Select ROM number */
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8003606:	4631      	mov	r1, r6
 8003608:	4620      	mov	r0, r4
 800360a:	f000 fa73 	bl	8003af4 <TM_OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 800360e:	21be      	movs	r1, #190	; 0xbe
 8003610:	4620      	mov	r0, r4
 8003612:	f000 f9d1 	bl	80039b8 <TM_OneWire_WriteByte>
	
	/* Ignore first 2 bytes */
	TM_OneWire_ReadByte(OneWire);
 8003616:	4620      	mov	r0, r4
 8003618:	f000 f9de 	bl	80039d8 <TM_OneWire_ReadByte>
	TM_OneWire_ReadByte(OneWire);
 800361c:	4620      	mov	r0, r4
 800361e:	f000 f9db 	bl	80039d8 <TM_OneWire_ReadByte>
	
	th = TM_OneWire_ReadByte(OneWire);
 8003622:	4620      	mov	r0, r4
 8003624:	f000 f9d8 	bl	80039d8 <TM_OneWire_ReadByte>
 8003628:	4680      	mov	r8, r0
	tl = TM_OneWire_ReadByte(OneWire);
 800362a:	4620      	mov	r0, r4
 800362c:	f000 f9d4 	bl	80039d8 <TM_OneWire_ReadByte>
	conf = TM_OneWire_ReadByte(OneWire);
 8003630:	4620      	mov	r0, r4
 8003632:	f000 f9d1 	bl	80039d8 <TM_OneWire_ReadByte>
 8003636:	4607      	mov	r7, r0
	
	tl = (uint8_t)temp; 

	/* Reset line */
	TM_OneWire_Reset(OneWire);
 8003638:	4620      	mov	r0, r4
 800363a:	f000 f959 	bl	80038f0 <TM_OneWire_Reset>
	/* Select ROM number */
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 800363e:	4631      	mov	r1, r6
 8003640:	4620      	mov	r0, r4
 8003642:	f000 fa57 	bl	8003af4 <TM_OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8003646:	214e      	movs	r1, #78	; 0x4e
 8003648:	4620      	mov	r0, r4
 800364a:	f000 f9b5 	bl	80039b8 <TM_OneWire_WriteByte>
	
	/* Write bytes */
	TM_OneWire_WriteByte(OneWire, th);
 800364e:	4641      	mov	r1, r8
 8003650:	4620      	mov	r0, r4
 8003652:	f000 f9b1 	bl	80039b8 <TM_OneWire_WriteByte>
	tl = (uint8_t)temp; 
 8003656:	2d7d      	cmp	r5, #125	; 0x7d
 8003658:	bfa8      	it	ge
 800365a:	257d      	movge	r5, #125	; 0x7d
	TM_OneWire_WriteByte(OneWire, tl);
 800365c:	b2e9      	uxtb	r1, r5
 800365e:	4620      	mov	r0, r4
 8003660:	f000 f9aa 	bl	80039b8 <TM_OneWire_WriteByte>
	TM_OneWire_WriteByte(OneWire, conf);
 8003664:	4639      	mov	r1, r7
 8003666:	4620      	mov	r0, r4
 8003668:	f000 f9a6 	bl	80039b8 <TM_OneWire_WriteByte>
	
	/* Reset line */
	TM_OneWire_Reset(OneWire);
 800366c:	4620      	mov	r0, r4
 800366e:	f000 f93f 	bl	80038f0 <TM_OneWire_Reset>
	/* Select ROM number */
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8003672:	4631      	mov	r1, r6
 8003674:	4620      	mov	r0, r4
 8003676:	f000 fa3d 	bl	8003af4 <TM_OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 800367a:	4620      	mov	r0, r4
 800367c:	2148      	movs	r1, #72	; 0x48
 800367e:	f000 f99b 	bl	80039b8 <TM_OneWire_WriteByte>
	
	return 1;
 8003682:	2001      	movs	r0, #1
}
 8003684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 0;
 8003688:	2000      	movs	r0, #0
 800368a:	e7fb      	b.n	8003684 <TM_DS18B20_SetAlarmLowTemperature+0x9a>

0800368c <TM_DS18B20_SetAlarmHighTemperature>:

uint8_t TM_DS18B20_SetAlarmHighTemperature(TM_OneWire_t* OneWire, uint8_t *ROM, int8_t temp) {
 800368c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (*ROM == DS18B20_FAMILY_CODE) {
 8003690:	780b      	ldrb	r3, [r1, #0]
 8003692:	2b28      	cmp	r3, #40	; 0x28
uint8_t TM_DS18B20_SetAlarmHighTemperature(TM_OneWire_t* OneWire, uint8_t *ROM, int8_t temp) {
 8003694:	4604      	mov	r4, r0
 8003696:	460e      	mov	r6, r1
	if (*ROM == DS18B20_FAMILY_CODE) {
 8003698:	d147      	bne.n	800372a <TM_DS18B20_SetAlarmHighTemperature+0x9e>
 800369a:	f06f 0536 	mvn.w	r5, #54	; 0x36
 800369e:	4295      	cmp	r5, r2
 80036a0:	bfb8      	it	lt
 80036a2:	4615      	movlt	r5, r2
	} 
	if (temp < -55) {
		temp = -55;
	}
	/* Reset line */
	TM_OneWire_Reset(OneWire);
 80036a4:	f000 f924 	bl	80038f0 <TM_OneWire_Reset>
	/* Select ROM number */
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 80036a8:	4631      	mov	r1, r6
 80036aa:	4620      	mov	r0, r4
 80036ac:	f000 fa22 	bl	8003af4 <TM_OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 80036b0:	21be      	movs	r1, #190	; 0xbe
 80036b2:	4620      	mov	r0, r4
 80036b4:	f000 f980 	bl	80039b8 <TM_OneWire_WriteByte>
	
	/* Ignore first 2 bytes */
	TM_OneWire_ReadByte(OneWire);
 80036b8:	4620      	mov	r0, r4
 80036ba:	f000 f98d 	bl	80039d8 <TM_OneWire_ReadByte>
	TM_OneWire_ReadByte(OneWire);
 80036be:	4620      	mov	r0, r4
 80036c0:	f000 f98a 	bl	80039d8 <TM_OneWire_ReadByte>
	
	th = TM_OneWire_ReadByte(OneWire);
 80036c4:	4620      	mov	r0, r4
 80036c6:	f000 f987 	bl	80039d8 <TM_OneWire_ReadByte>
	tl = TM_OneWire_ReadByte(OneWire);
 80036ca:	4620      	mov	r0, r4
 80036cc:	f000 f984 	bl	80039d8 <TM_OneWire_ReadByte>
 80036d0:	4680      	mov	r8, r0
	conf = TM_OneWire_ReadByte(OneWire);
 80036d2:	4620      	mov	r0, r4
 80036d4:	f000 f980 	bl	80039d8 <TM_OneWire_ReadByte>
 80036d8:	4607      	mov	r7, r0
	
	th = (uint8_t)temp; 

	/* Reset line */
	TM_OneWire_Reset(OneWire);
 80036da:	4620      	mov	r0, r4
 80036dc:	f000 f908 	bl	80038f0 <TM_OneWire_Reset>
	/* Select ROM number */
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 80036e0:	4631      	mov	r1, r6
 80036e2:	4620      	mov	r0, r4
 80036e4:	f000 fa06 	bl	8003af4 <TM_OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 80036e8:	214e      	movs	r1, #78	; 0x4e
 80036ea:	4620      	mov	r0, r4
 80036ec:	f000 f964 	bl	80039b8 <TM_OneWire_WriteByte>
	th = (uint8_t)temp; 
 80036f0:	2d7d      	cmp	r5, #125	; 0x7d
 80036f2:	bfa8      	it	ge
 80036f4:	257d      	movge	r5, #125	; 0x7d
	
	/* Write bytes */
	TM_OneWire_WriteByte(OneWire, th);
 80036f6:	b2e9      	uxtb	r1, r5
 80036f8:	4620      	mov	r0, r4
 80036fa:	f000 f95d 	bl	80039b8 <TM_OneWire_WriteByte>
	TM_OneWire_WriteByte(OneWire, tl);
 80036fe:	4641      	mov	r1, r8
 8003700:	4620      	mov	r0, r4
 8003702:	f000 f959 	bl	80039b8 <TM_OneWire_WriteByte>
	TM_OneWire_WriteByte(OneWire, conf);
 8003706:	4639      	mov	r1, r7
 8003708:	4620      	mov	r0, r4
 800370a:	f000 f955 	bl	80039b8 <TM_OneWire_WriteByte>
	
	/* Reset line */
	TM_OneWire_Reset(OneWire);
 800370e:	4620      	mov	r0, r4
 8003710:	f000 f8ee 	bl	80038f0 <TM_OneWire_Reset>
	/* Select ROM number */
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8003714:	4631      	mov	r1, r6
 8003716:	4620      	mov	r0, r4
 8003718:	f000 f9ec 	bl	8003af4 <TM_OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 800371c:	4620      	mov	r0, r4
 800371e:	2148      	movs	r1, #72	; 0x48
 8003720:	f000 f94a 	bl	80039b8 <TM_OneWire_WriteByte>
	
	return 1;
 8003724:	2001      	movs	r0, #1
}
 8003726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 0;
 800372a:	2000      	movs	r0, #0
 800372c:	e7fb      	b.n	8003726 <TM_DS18B20_SetAlarmHighTemperature+0x9a>

0800372e <TM_DS18B20_AllDone>:
	return TM_OneWire_Search(OneWire, DS18B20_CMD_ALARMSEARCH);
}

uint8_t TM_DS18B20_AllDone(TM_OneWire_t* OneWire) {
	/* If read bit is low, then device is not finished yet with calculation temperature */
	return TM_OneWire_ReadBit(OneWire);
 800372e:	f000 b925 	b.w	800397c <TM_OneWire_ReadBit>

08003732 <TM_GPIO_SetPinAsInput>:
			GPIO_UsedPins[ptr] &= ~(1 << i);
		}
	}
}

void TM_GPIO_SetPinAsInput(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8003732:	b530      	push	{r4, r5, lr}
 8003734:	2300      	movs	r3, #0
	/* Go through all pins */
	for (i = 0x00; i < 0x10; i++) {
		/* Pin is set */
		if (GPIO_Pin & (1 << i)) {
			/* Set 00 bits combination for input */
			GPIOx->MODER &= ~(0x03 << (2 * i));
 8003736:	2503      	movs	r5, #3
		if (GPIO_Pin & (1 << i)) {
 8003738:	fa41 f203 	asr.w	r2, r1, r3
 800373c:	07d2      	lsls	r2, r2, #31
 800373e:	d506      	bpl.n	800374e <TM_GPIO_SetPinAsInput+0x1c>
			GPIOx->MODER &= ~(0x03 << (2 * i));
 8003740:	6802      	ldr	r2, [r0, #0]
 8003742:	005c      	lsls	r4, r3, #1
 8003744:	fa05 f404 	lsl.w	r4, r5, r4
 8003748:	ea22 0204 	bic.w	r2, r2, r4
 800374c:	6002      	str	r2, [r0, #0]
 800374e:	3301      	adds	r3, #1
	for (i = 0x00; i < 0x10; i++) {
 8003750:	2b10      	cmp	r3, #16
 8003752:	d1f1      	bne.n	8003738 <TM_GPIO_SetPinAsInput+0x6>
		}
	}
}
 8003754:	bd30      	pop	{r4, r5, pc}

08003756 <TM_GPIO_SetPinAsOutput>:

void TM_GPIO_SetPinAsOutput(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8003756:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003758:	2300      	movs	r3, #0
	/* Go through all pins */
	for (i = 0x00; i < 0x10; i++) {
		/* Pin is set */
		if (GPIO_Pin & (1 << i)) {
			/* Set 01 bits combination for output */
			GPIOx->MODER = (GPIOx->MODER & ~(0x03 << (2 * i))) | (0x01 << (2 * i));
 800375a:	2503      	movs	r5, #3
 800375c:	2601      	movs	r6, #1
		if (GPIO_Pin & (1 << i)) {
 800375e:	fa41 f203 	asr.w	r2, r1, r3
 8003762:	07d2      	lsls	r2, r2, #31
 8003764:	d509      	bpl.n	800377a <TM_GPIO_SetPinAsOutput+0x24>
			GPIOx->MODER = (GPIOx->MODER & ~(0x03 << (2 * i))) | (0x01 << (2 * i));
 8003766:	6802      	ldr	r2, [r0, #0]
 8003768:	005c      	lsls	r4, r3, #1
 800376a:	fa05 f704 	lsl.w	r7, r5, r4
 800376e:	ea22 0207 	bic.w	r2, r2, r7
 8003772:	fa06 f404 	lsl.w	r4, r6, r4
 8003776:	4322      	orrs	r2, r4
 8003778:	6002      	str	r2, [r0, #0]
 800377a:	3301      	adds	r3, #1
	for (i = 0x00; i < 0x10; i++) {
 800377c:	2b10      	cmp	r3, #16
 800377e:	d1ee      	bne.n	800375e <TM_GPIO_SetPinAsOutput+0x8>
		}
	}
}
 8003780:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003784 <TM_GPIO_INT_EnableClock>:
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx) {
	/* Set bit according to the 1 << portsourcenumber */
#if defined(STM32F0xx)
	RCC->AHBENR |= (1 << (TM_GPIO_GetPortSource(GPIOx) + 17));
#else
	RCC->AHB1ENR |= (1 << TM_GPIO_GetPortSource(GPIOx));
 8003784:	4a06      	ldr	r2, [pc, #24]	; (80037a0 <TM_GPIO_INT_EnableClock+0x1c>)
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 8003786:	f100 403f 	add.w	r0, r0, #3204448256	; 0xbf000000
 800378a:	f500 007e 	add.w	r0, r0, #16646144	; 0xfe0000
	RCC->AHB1ENR |= (1 << TM_GPIO_GetPortSource(GPIOx));
 800378e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003790:	f3c0 238f 	ubfx	r3, r0, #10, #16
 8003794:	2001      	movs	r0, #1
 8003796:	4098      	lsls	r0, r3
 8003798:	4308      	orrs	r0, r1
 800379a:	6310      	str	r0, [r2, #48]	; 0x30
#endif
}
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	40023800 	.word	0x40023800

080037a4 <TM_GPIO_INT_Init>:
#else
	RCC->AHB1ENR &= ~(1 << TM_GPIO_GetPortSource(GPIOx));
#endif
}

void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 80037a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037a8:	b085      	sub	sp, #20
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 80037aa:	f100 453f 	add.w	r5, r0, #3204448256	; 0xbf000000
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 80037ae:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
 80037b2:	9402      	str	r4, [sp, #8]
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 80037b4:	f505 057e 	add.w	r5, r5, #16646144	; 0xfe0000
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 80037b8:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
			continue;
		}
		
		/* Pin is used */
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 80037bc:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8003864 <TM_GPIO_INT_Init+0xc0>
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 80037c0:	9403      	str	r4, [sp, #12]
		
		/* Set GPIO MODE register */
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
		
		/* Set only if output or alternate functions */
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 80037c2:	f102 3eff 	add.w	lr, r2, #4294967295
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 80037c6:	9301      	str	r3, [sp, #4]
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 80037c8:	2400      	movs	r4, #0
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 80037ca:	f3c5 2587 	ubfx	r5, r5, #10, #8
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 80037ce:	f04f 0a03 	mov.w	sl, #3
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 80037d2:	fa5f fe8e 	uxtb.w	lr, lr
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 80037d6:	fa41 f604 	asr.w	r6, r1, r4
 80037da:	07f3      	lsls	r3, r6, #31
 80037dc:	d53b      	bpl.n	8003856 <TM_GPIO_INT_Init+0xb2>
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 80037de:	2301      	movs	r3, #1
 80037e0:	f838 6015 	ldrh.w	r6, [r8, r5, lsl #1]
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 80037e4:	f8d0 c00c 	ldr.w	ip, [r0, #12]
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 80037e8:	fa03 f904 	lsl.w	r9, r3, r4
 80037ec:	ea49 0606 	orr.w	r6, r9, r6
 80037f0:	f828 6015 	strh.w	r6, [r8, r5, lsl #1]
 80037f4:	fa04 f603 	lsl.w	r6, r4, r3
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 80037f8:	fa0a f706 	lsl.w	r7, sl, r6
 80037fc:	9b02      	ldr	r3, [sp, #8]
 80037fe:	43ff      	mvns	r7, r7
 8003800:	fa03 fb06 	lsl.w	fp, r3, r6
 8003804:	ea07 0c0c 	and.w	ip, r7, ip
 8003808:	ea4c 0c0b 	orr.w	ip, ip, fp
 800380c:	f8c0 c00c 	str.w	ip, [r0, #12]
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
 8003810:	f8d0 c000 	ldr.w	ip, [r0]
 8003814:	fa02 fb06 	lsl.w	fp, r2, r6
 8003818:	ea0c 0c07 	and.w	ip, ip, r7
 800381c:	ea4c 0c0b 	orr.w	ip, ip, fp
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 8003820:	f1be 0f01 	cmp.w	lr, #1
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
 8003824:	f8c0 c000 	str.w	ip, [r0]
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 8003828:	d815      	bhi.n	8003856 <TM_GPIO_INT_Init+0xb2>
			/* Set GPIO OTYPE register */
			GPIOx->OTYPER = (GPIOx->OTYPER & ~(uint16_t)(0x01 << pinpos)) | ((uint16_t)(GPIO_OType << pinpos));
 800382a:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800382e:	9b01      	ldr	r3, [sp, #4]
 8003830:	ea2c 0909 	bic.w	r9, ip, r9
 8003834:	fa03 fc04 	lsl.w	ip, r3, r4
 8003838:	fa1f fc8c 	uxth.w	ip, ip
 800383c:	ea49 090c 	orr.w	r9, r9, ip
 8003840:	f8c0 9004 	str.w	r9, [r0, #4]
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
 8003844:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8003848:	9b03      	ldr	r3, [sp, #12]
 800384a:	ea07 070c 	and.w	r7, r7, ip
 800384e:	fa03 f606 	lsl.w	r6, r3, r6
 8003852:	4337      	orrs	r7, r6
 8003854:	6087      	str	r7, [r0, #8]
 8003856:	3401      	adds	r4, #1
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8003858:	2c10      	cmp	r4, #16
 800385a:	d1bc      	bne.n	80037d6 <TM_GPIO_INT_Init+0x32>
		}
	}
}
 800385c:	b005      	add	sp, #20
 800385e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003862:	bf00      	nop
 8003864:	20003ff8 	.word	0x20003ff8

08003868 <TM_GPIO_Init>:
void TM_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {	
 8003868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800386c:	4605      	mov	r5, r0
 800386e:	4616      	mov	r6, r2
 8003870:	461f      	mov	r7, r3
 8003872:	f89d 8020 	ldrb.w	r8, [sp, #32]
 8003876:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
	if (GPIO_Pin == 0x00) {
 800387a:	460c      	mov	r4, r1
 800387c:	b159      	cbz	r1, 8003896 <TM_GPIO_Init+0x2e>
	TM_GPIO_INT_EnableClock(GPIOx);
 800387e:	f7ff ff81 	bl	8003784 <TM_GPIO_INT_EnableClock>
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 8003882:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8003886:	463b      	mov	r3, r7
 8003888:	4632      	mov	r2, r6
 800388a:	4621      	mov	r1, r4
 800388c:	4628      	mov	r0, r5
}
 800388e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 8003892:	f7ff bf87 	b.w	80037a4 <TM_GPIO_INT_Init>
}
 8003896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800389c <Delay>:
__STATIC_INLINE void Delay(__IO uint32_t micros) {
 800389c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint32_t start = DWT->CYCCNT;
 800389e:	4c09      	ldr	r4, [pc, #36]	; (80038c4 <Delay+0x28>)
__STATIC_INLINE void Delay(__IO uint32_t micros) {
 80038a0:	9001      	str	r0, [sp, #4]
	uint32_t start = DWT->CYCCNT;
 80038a2:	6865      	ldr	r5, [r4, #4]
	micros *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80038a4:	f7fd f86e 	bl	8000984 <HAL_RCC_GetHCLKFreq>
 80038a8:	9b01      	ldr	r3, [sp, #4]
 80038aa:	4a07      	ldr	r2, [pc, #28]	; (80038c8 <Delay+0x2c>)
 80038ac:	fbb0 f0f2 	udiv	r0, r0, r2
 80038b0:	4343      	muls	r3, r0
 80038b2:	9301      	str	r3, [sp, #4]
	while ((DWT->CYCCNT - start) < micros);
 80038b4:	6863      	ldr	r3, [r4, #4]
 80038b6:	9a01      	ldr	r2, [sp, #4]
 80038b8:	1b5b      	subs	r3, r3, r5
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d3fa      	bcc.n	80038b4 <Delay+0x18>
}
 80038be:	b003      	add	sp, #12
 80038c0:	bd30      	pop	{r4, r5, pc}
 80038c2:	bf00      	nop
 80038c4:	e0001000 	.word	0xe0001000
 80038c8:	000f4240 	.word	0x000f4240

080038cc <TM_OneWire_Init>:
#include "tm_stm32_onewire.h"
#include "tm_stm32_delay.h"
#include "defines.h"
#include "tm_stm32_gpio.h"

void TM_OneWire_Init(TM_OneWire_t* OneWireStruct, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 80038cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80038ce:	460e      	mov	r6, r1
 80038d0:	4615      	mov	r5, r2
 80038d2:	4604      	mov	r4, r0
	/* Initialize delay if it was not already */
	TM_DELAY_Init();
 80038d4:	f7ff fd1a 	bl	800330c <TM_DELAY_Init>

	/* Init GPIO pin */
	TM_GPIO_Init(GPIOx, GPIO_Pin, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium);
 80038d8:	2201      	movs	r2, #1
 80038da:	e9cd 2200 	strd	r2, r2, [sp]
 80038de:	2300      	movs	r3, #0
 80038e0:	4629      	mov	r1, r5
 80038e2:	4630      	mov	r0, r6
 80038e4:	f7ff ffc0 	bl	8003868 <TM_GPIO_Init>
	
	/* Save settings */
	OneWireStruct->GPIOx = GPIOx;
 80038e8:	6026      	str	r6, [r4, #0]
	OneWireStruct->GPIO_Pin = GPIO_Pin;
 80038ea:	80a5      	strh	r5, [r4, #4]
}
 80038ec:	b002      	add	sp, #8
 80038ee:	bd70      	pop	{r4, r5, r6, pc}

080038f0 <TM_OneWire_Reset>:

uint8_t TM_OneWire_Reset(TM_OneWire_t* OneWireStruct) {
	uint8_t i;
	
	/* Line low, and wait 480us */
	ONEWIRE_LOW(OneWireStruct);
 80038f0:	8881      	ldrh	r1, [r0, #4]
uint8_t TM_OneWire_Reset(TM_OneWire_t* OneWireStruct) {
 80038f2:	b510      	push	{r4, lr}
 80038f4:	4604      	mov	r4, r0
	ONEWIRE_LOW(OneWireStruct);
 80038f6:	6800      	ldr	r0, [r0, #0]
 80038f8:	040b      	lsls	r3, r1, #16
 80038fa:	6183      	str	r3, [r0, #24]
	ONEWIRE_OUTPUT(OneWireStruct);
 80038fc:	f7ff ff2b 	bl	8003756 <TM_GPIO_SetPinAsOutput>
	ONEWIRE_DELAY(480);
 8003900:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8003904:	f7ff ffca 	bl	800389c <Delay>
	
	/* Release line and wait for 70us */
	ONEWIRE_INPUT(OneWireStruct);
 8003908:	88a1      	ldrh	r1, [r4, #4]
 800390a:	6820      	ldr	r0, [r4, #0]
 800390c:	f7ff ff11 	bl	8003732 <TM_GPIO_SetPinAsInput>
	ONEWIRE_DELAY(70);
 8003910:	2046      	movs	r0, #70	; 0x46
 8003912:	f7ff ffc3 	bl	800389c <Delay>
	
	/* Check bit value */
	i = TM_GPIO_GetInputPinValue(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin);
 8003916:	6823      	ldr	r3, [r4, #0]
 8003918:	88a2      	ldrh	r2, [r4, #4]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	421a      	tst	r2, r3
 800391e:	bf14      	ite	ne
 8003920:	2401      	movne	r4, #1
 8003922:	2400      	moveq	r4, #0
	
	/* Delay for 410 us */
	ONEWIRE_DELAY(410);
 8003924:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8003928:	f7ff ffb8 	bl	800389c <Delay>
	
	/* Return value of presence pulse, 0 = OK, 1 = ERROR */
	return i;
}
 800392c:	4620      	mov	r0, r4
 800392e:	bd10      	pop	{r4, pc}

08003930 <TM_OneWire_WriteBit>:

void TM_OneWire_WriteBit(TM_OneWire_t* OneWireStruct, uint8_t bit) {
 8003930:	8883      	ldrh	r3, [r0, #4]
 8003932:	b510      	push	{r4, lr}
 8003934:	4604      	mov	r4, r0
 8003936:	6800      	ldr	r0, [r0, #0]
 8003938:	041a      	lsls	r2, r3, #16
	if (bit) {
		/* Set line low */
		ONEWIRE_LOW(OneWireStruct);
 800393a:	6182      	str	r2, [r0, #24]
	if (bit) {
 800393c:	b191      	cbz	r1, 8003964 <TM_OneWire_WriteBit+0x34>
		ONEWIRE_OUTPUT(OneWireStruct);
 800393e:	4619      	mov	r1, r3
 8003940:	f7ff ff09 	bl	8003756 <TM_GPIO_SetPinAsOutput>
		ONEWIRE_DELAY(10);
 8003944:	200a      	movs	r0, #10
 8003946:	f7ff ffa9 	bl	800389c <Delay>
		
		/* Bit high */
		ONEWIRE_INPUT(OneWireStruct);
 800394a:	6820      	ldr	r0, [r4, #0]
 800394c:	88a1      	ldrh	r1, [r4, #4]
 800394e:	f7ff fef0 	bl	8003732 <TM_GPIO_SetPinAsInput>
		
		/* Wait for 55 us and release the line */
		ONEWIRE_DELAY(55);
 8003952:	2037      	movs	r0, #55	; 0x37
		
		/* Bit high */
		ONEWIRE_INPUT(OneWireStruct);
		
		/* Wait for 5 us and release the line */
		ONEWIRE_DELAY(5);
 8003954:	f7ff ffa2 	bl	800389c <Delay>
		ONEWIRE_INPUT(OneWireStruct);
 8003958:	88a1      	ldrh	r1, [r4, #4]
 800395a:	6820      	ldr	r0, [r4, #0]
	}
}
 800395c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ONEWIRE_INPUT(OneWireStruct);
 8003960:	f7ff bee7 	b.w	8003732 <TM_GPIO_SetPinAsInput>
		ONEWIRE_OUTPUT(OneWireStruct);
 8003964:	4619      	mov	r1, r3
 8003966:	f7ff fef6 	bl	8003756 <TM_GPIO_SetPinAsOutput>
		ONEWIRE_DELAY(65);
 800396a:	2041      	movs	r0, #65	; 0x41
 800396c:	f7ff ff96 	bl	800389c <Delay>
		ONEWIRE_INPUT(OneWireStruct);
 8003970:	6820      	ldr	r0, [r4, #0]
 8003972:	88a1      	ldrh	r1, [r4, #4]
 8003974:	f7ff fedd 	bl	8003732 <TM_GPIO_SetPinAsInput>
		ONEWIRE_DELAY(5);
 8003978:	2005      	movs	r0, #5
 800397a:	e7eb      	b.n	8003954 <TM_OneWire_WriteBit+0x24>

0800397c <TM_OneWire_ReadBit>:

uint8_t TM_OneWire_ReadBit(TM_OneWire_t* OneWireStruct) {
	uint8_t bit = 0;
	
	/* Line low */
	ONEWIRE_LOW(OneWireStruct);
 800397c:	8881      	ldrh	r1, [r0, #4]
uint8_t TM_OneWire_ReadBit(TM_OneWire_t* OneWireStruct) {
 800397e:	b510      	push	{r4, lr}
 8003980:	4604      	mov	r4, r0
	ONEWIRE_LOW(OneWireStruct);
 8003982:	6800      	ldr	r0, [r0, #0]
 8003984:	040b      	lsls	r3, r1, #16
 8003986:	6183      	str	r3, [r0, #24]
	ONEWIRE_OUTPUT(OneWireStruct);
 8003988:	f7ff fee5 	bl	8003756 <TM_GPIO_SetPinAsOutput>
	ONEWIRE_DELAY(3);
 800398c:	2003      	movs	r0, #3
 800398e:	f7ff ff85 	bl	800389c <Delay>
	
	/* Release line */
	ONEWIRE_INPUT(OneWireStruct);
 8003992:	88a1      	ldrh	r1, [r4, #4]
 8003994:	6820      	ldr	r0, [r4, #0]
 8003996:	f7ff fecc 	bl	8003732 <TM_GPIO_SetPinAsInput>
	ONEWIRE_DELAY(10);
 800399a:	200a      	movs	r0, #10
 800399c:	f7ff ff7e 	bl	800389c <Delay>
	
	/* Read line value */
	if (TM_GPIO_GetInputPinValue(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) {
 80039a0:	6823      	ldr	r3, [r4, #0]
 80039a2:	88a2      	ldrh	r2, [r4, #4]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	421a      	tst	r2, r3
	uint8_t bit = 0;
 80039a8:	bf14      	ite	ne
 80039aa:	2401      	movne	r4, #1
 80039ac:	2400      	moveq	r4, #0
		/* Bit is HIGH */
		bit = 1;
	}
	
	/* Wait 50us to complete 60us period */
	ONEWIRE_DELAY(50);
 80039ae:	2032      	movs	r0, #50	; 0x32
 80039b0:	f7ff ff74 	bl	800389c <Delay>
	
	/* Return bit value */
	return bit;
}
 80039b4:	4620      	mov	r0, r4
 80039b6:	bd10      	pop	{r4, pc}

080039b8 <TM_OneWire_WriteByte>:

void TM_OneWire_WriteByte(TM_OneWire_t* OneWireStruct, uint8_t byte) {
 80039b8:	b570      	push	{r4, r5, r6, lr}
 80039ba:	4606      	mov	r6, r0
 80039bc:	460d      	mov	r5, r1
	uint8_t i = 8;
	/* Write 8 bits */
	while (i--) {
 80039be:	2409      	movs	r4, #9
 80039c0:	3c01      	subs	r4, #1
 80039c2:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80039c6:	d100      	bne.n	80039ca <TM_OneWire_WriteByte+0x12>
		/* LSB bit is first */
		TM_OneWire_WriteBit(OneWireStruct, byte & 0x01);
		byte >>= 1;
	}
}
 80039c8:	bd70      	pop	{r4, r5, r6, pc}
		TM_OneWire_WriteBit(OneWireStruct, byte & 0x01);
 80039ca:	f005 0101 	and.w	r1, r5, #1
 80039ce:	4630      	mov	r0, r6
 80039d0:	f7ff ffae 	bl	8003930 <TM_OneWire_WriteBit>
		byte >>= 1;
 80039d4:	086d      	lsrs	r5, r5, #1
 80039d6:	e7f3      	b.n	80039c0 <TM_OneWire_WriteByte+0x8>

080039d8 <TM_OneWire_ReadByte>:

uint8_t TM_OneWire_ReadByte(TM_OneWire_t* OneWireStruct) {
 80039d8:	b570      	push	{r4, r5, r6, lr}
 80039da:	4606      	mov	r6, r0
	uint8_t i = 8, byte = 0;
	while (i--) {
 80039dc:	2509      	movs	r5, #9
	uint8_t i = 8, byte = 0;
 80039de:	2400      	movs	r4, #0
 80039e0:	3d01      	subs	r5, #1
	while (i--) {
 80039e2:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 80039e6:	d101      	bne.n	80039ec <TM_OneWire_ReadByte+0x14>
		byte >>= 1;
		byte |= (TM_OneWire_ReadBit(OneWireStruct) << 7);
	}
	
	return byte;
}
 80039e8:	4620      	mov	r0, r4
 80039ea:	bd70      	pop	{r4, r5, r6, pc}
		byte |= (TM_OneWire_ReadBit(OneWireStruct) << 7);
 80039ec:	4630      	mov	r0, r6
 80039ee:	f7ff ffc5 	bl	800397c <TM_OneWire_ReadBit>
		byte >>= 1;
 80039f2:	0864      	lsrs	r4, r4, #1
		byte |= (TM_OneWire_ReadBit(OneWireStruct) << 7);
 80039f4:	ea44 14c0 	orr.w	r4, r4, r0, lsl #7
 80039f8:	b2e4      	uxtb	r4, r4
 80039fa:	e7f1      	b.n	80039e0 <TM_OneWire_ReadByte+0x8>

080039fc <TM_OneWire_Search>:
	OneWireStruct->LastDiscrepancy = 0;
	OneWireStruct->LastDeviceFlag = 0;
	OneWireStruct->LastFamilyDiscrepancy = 0;
}

uint8_t TM_OneWire_Search(TM_OneWire_t* OneWireStruct, uint8_t command) {
 80039fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	rom_byte_number = 0;
	rom_byte_mask = 1;
	search_result = 0;

	/* Check if any devices */
	if (!OneWireStruct->LastDeviceFlag) {
 8003a00:	7a03      	ldrb	r3, [r0, #8]
uint8_t TM_OneWire_Search(TM_OneWire_t* OneWireStruct, uint8_t command) {
 8003a02:	4604      	mov	r4, r0
 8003a04:	460d      	mov	r5, r1
	if (!OneWireStruct->LastDeviceFlag) {
 8003a06:	b91b      	cbnz	r3, 8003a10 <TM_OneWire_Search+0x14>
		/* 1-Wire reset */
		if (TM_OneWire_Reset(OneWireStruct)) {
 8003a08:	f7ff ff72 	bl	80038f0 <TM_OneWire_Reset>
 8003a0c:	4681      	mov	r9, r0
 8003a0e:	b120      	cbz	r0, 8003a1a <TM_OneWire_Search+0x1e>
			/* Reset the search */
			OneWireStruct->LastDiscrepancy = 0;
 8003a10:	2000      	movs	r0, #0
 8003a12:	80e0      	strh	r0, [r4, #6]
			OneWireStruct->LastDeviceFlag = 0;
			OneWireStruct->LastFamilyDiscrepancy = 0;
 8003a14:	7220      	strb	r0, [r4, #8]
		OneWireStruct->LastFamilyDiscrepancy = 0;
		search_result = 0;
	}

	return search_result;
}
 8003a16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		TM_OneWire_WriteByte(OneWireStruct, command);  
 8003a1a:	4629      	mov	r1, r5
 8003a1c:	4620      	mov	r0, r4
 8003a1e:	f7ff ffcb 	bl	80039b8 <TM_OneWire_WriteByte>
	rom_byte_mask = 1;
 8003a22:	2601      	movs	r6, #1
	rom_byte_number = 0;
 8003a24:	464f      	mov	r7, r9
	id_bit_number = 1;
 8003a26:	4635      	mov	r5, r6
			id_bit = TM_OneWire_ReadBit(OneWireStruct);
 8003a28:	4620      	mov	r0, r4
 8003a2a:	f7ff ffa7 	bl	800397c <TM_OneWire_ReadBit>
 8003a2e:	4680      	mov	r8, r0
			cmp_id_bit = TM_OneWire_ReadBit(OneWireStruct);
 8003a30:	4620      	mov	r0, r4
 8003a32:	f7ff ffa3 	bl	800397c <TM_OneWire_ReadBit>
			if ((id_bit == 1) && (cmp_id_bit == 1)) {
 8003a36:	f1b8 0f01 	cmp.w	r8, #1
 8003a3a:	d10f      	bne.n	8003a5c <TM_OneWire_Search+0x60>
 8003a3c:	2801      	cmp	r0, #1
 8003a3e:	d12b      	bne.n	8003a98 <TM_OneWire_Search+0x9c>
		if (!(id_bit_number < 65)) {
 8003a40:	2d40      	cmp	r5, #64	; 0x40
 8003a42:	d9e5      	bls.n	8003a10 <TM_OneWire_Search+0x14>
			OneWireStruct->LastDiscrepancy = last_zero;
 8003a44:	f884 9006 	strb.w	r9, [r4, #6]
			if (OneWireStruct->LastDiscrepancy == 0) {
 8003a48:	f1b9 0f00 	cmp.w	r9, #0
 8003a4c:	d101      	bne.n	8003a52 <TM_OneWire_Search+0x56>
				OneWireStruct->LastDeviceFlag = 1;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	7223      	strb	r3, [r4, #8]
	if (!search_result || !OneWireStruct->ROM_NO[0]) {
 8003a52:	7a63      	ldrb	r3, [r4, #9]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d0db      	beq.n	8003a10 <TM_OneWire_Search+0x14>
			search_result = 1;
 8003a58:	2001      	movs	r0, #1
 8003a5a:	e7dc      	b.n	8003a16 <TM_OneWire_Search+0x1a>
 8003a5c:	19e2      	adds	r2, r4, r7
				if (id_bit != cmp_id_bit) {
 8003a5e:	4580      	cmp	r8, r0
 8003a60:	7a53      	ldrb	r3, [r2, #9]
 8003a62:	d10f      	bne.n	8003a84 <TM_OneWire_Search+0x88>
					if (id_bit_number < OneWireStruct->LastDiscrepancy) {
 8003a64:	79a1      	ldrb	r1, [r4, #6]
 8003a66:	42a9      	cmp	r1, r5
 8003a68:	d910      	bls.n	8003a8c <TM_OneWire_Search+0x90>
						search_direction = ((OneWireStruct->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 8003a6a:	4233      	tst	r3, r6
 8003a6c:	bf14      	ite	ne
 8003a6e:	f04f 0801 	movne.w	r8, #1
 8003a72:	f04f 0800 	moveq.w	r8, #0
					if (search_direction == 0) {
 8003a76:	f1b8 0f00 	cmp.w	r8, #0
 8003a7a:	d10d      	bne.n	8003a98 <TM_OneWire_Search+0x9c>
						if (last_zero < 9) {
 8003a7c:	2d08      	cmp	r5, #8
 8003a7e:	d800      	bhi.n	8003a82 <TM_OneWire_Search+0x86>
							OneWireStruct->LastFamilyDiscrepancy = last_zero;
 8003a80:	71e5      	strb	r5, [r4, #7]
 8003a82:	46a9      	mov	r9, r5
					OneWireStruct->ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 8003a84:	ea23 0306 	bic.w	r3, r3, r6
 8003a88:	7253      	strb	r3, [r2, #9]
 8003a8a:	e00b      	b.n	8003aa4 <TM_OneWire_Search+0xa8>
						search_direction = (id_bit_number == OneWireStruct->LastDiscrepancy);
 8003a8c:	bf0c      	ite	eq
 8003a8e:	f04f 0801 	moveq.w	r8, #1
 8003a92:	f04f 0800 	movne.w	r8, #0
 8003a96:	e7ee      	b.n	8003a76 <TM_OneWire_Search+0x7a>
					OneWireStruct->ROM_NO[rom_byte_number] |= rom_byte_mask;
 8003a98:	19e2      	adds	r2, r4, r7
 8003a9a:	f04f 0801 	mov.w	r8, #1
 8003a9e:	7a53      	ldrb	r3, [r2, #9]
 8003aa0:	4333      	orrs	r3, r6
 8003aa2:	7253      	strb	r3, [r2, #9]
				TM_OneWire_WriteBit(OneWireStruct, search_direction);
 8003aa4:	4641      	mov	r1, r8
 8003aa6:	4620      	mov	r0, r4
				rom_byte_mask <<= 1;
 8003aa8:	0076      	lsls	r6, r6, #1
				TM_OneWire_WriteBit(OneWireStruct, search_direction);
 8003aaa:	f7ff ff41 	bl	8003930 <TM_OneWire_WriteBit>
				if (rom_byte_mask == 0) {
 8003aae:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
					rom_byte_number++;
 8003ab2:	bf04      	itt	eq
 8003ab4:	3701      	addeq	r7, #1
 8003ab6:	b2ff      	uxtbeq	r7, r7
				id_bit_number++;
 8003ab8:	f105 0501 	add.w	r5, r5, #1
					rom_byte_mask = 1;
 8003abc:	bf08      	it	eq
 8003abe:	2601      	moveq	r6, #1
		} while (rom_byte_number < 8);
 8003ac0:	2f07      	cmp	r7, #7
				id_bit_number++;
 8003ac2:	b2ed      	uxtb	r5, r5
		} while (rom_byte_number < 8);
 8003ac4:	d9b0      	bls.n	8003a28 <TM_OneWire_Search+0x2c>
 8003ac6:	e7bb      	b.n	8003a40 <TM_OneWire_Search+0x44>

08003ac8 <TM_OneWire_First>:
	OneWireStruct->LastDiscrepancy = 0;
 8003ac8:	2200      	movs	r2, #0
 8003aca:	80c2      	strh	r2, [r0, #6]
	OneWireStruct->LastFamilyDiscrepancy = 0;
 8003acc:	7202      	strb	r2, [r0, #8]
	return TM_OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 8003ace:	21f0      	movs	r1, #240	; 0xf0
 8003ad0:	f7ff bf94 	b.w	80039fc <TM_OneWire_Search>

08003ad4 <TM_OneWire_Select>:

uint8_t TM_OneWire_GetROM(TM_OneWire_t* OneWireStruct, uint8_t index) {
	return OneWireStruct->ROM_NO[index];
}

void TM_OneWire_Select(TM_OneWire_t* OneWireStruct, uint8_t* addr) {
 8003ad4:	b570      	push	{r4, r5, r6, lr}
 8003ad6:	460c      	mov	r4, r1
	uint8_t i;
	TM_OneWire_WriteByte(OneWireStruct, ONEWIRE_CMD_MATCHROM);
 8003ad8:	2155      	movs	r1, #85	; 0x55
void TM_OneWire_Select(TM_OneWire_t* OneWireStruct, uint8_t* addr) {
 8003ada:	4606      	mov	r6, r0
	TM_OneWire_WriteByte(OneWireStruct, ONEWIRE_CMD_MATCHROM);
 8003adc:	f7ff ff6c 	bl	80039b8 <TM_OneWire_WriteByte>
 8003ae0:	1e65      	subs	r5, r4, #1
 8003ae2:	3407      	adds	r4, #7
	
	for (i = 0; i < 8; i++) {
		TM_OneWire_WriteByte(OneWireStruct, *(addr + i));
 8003ae4:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8003ae8:	4630      	mov	r0, r6
 8003aea:	f7ff ff65 	bl	80039b8 <TM_OneWire_WriteByte>
	for (i = 0; i < 8; i++) {
 8003aee:	42a5      	cmp	r5, r4
 8003af0:	d1f8      	bne.n	8003ae4 <TM_OneWire_Select+0x10>
	}
}
 8003af2:	bd70      	pop	{r4, r5, r6, pc}

08003af4 <TM_OneWire_SelectWithPointer>:
 8003af4:	f7ff bfee 	b.w	8003ad4 <TM_OneWire_Select>

08003af8 <TM_OneWire_GetFullROM>:
	for (i = 0; i < 8; i++) {
		TM_OneWire_WriteByte(OneWireStruct, *(ROM + i));
	}	
}

void TM_OneWire_GetFullROM(TM_OneWire_t* OneWireStruct, uint8_t *firstIndex) {
 8003af8:	f100 0309 	add.w	r3, r0, #9
 8003afc:	3901      	subs	r1, #1
 8003afe:	3011      	adds	r0, #17
	uint8_t i;
	for (i = 0; i < 8; i++) {
		*(firstIndex + i) = OneWireStruct->ROM_NO[i];
 8003b00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b04:	f801 2f01 	strb.w	r2, [r1, #1]!
	for (i = 0; i < 8; i++) {
 8003b08:	4283      	cmp	r3, r0
 8003b0a:	d1f9      	bne.n	8003b00 <TM_OneWire_GetFullROM+0x8>
	}
}
 8003b0c:	4770      	bx	lr

08003b0e <TM_OneWire_CRC8>:

uint8_t TM_OneWire_CRC8(uint8_t *addr, uint8_t len) {
 8003b0e:	b530      	push	{r4, r5, lr}
 8003b10:	4401      	add	r1, r0
	uint8_t crc = 0, inbyte, i, mix;
 8003b12:	2300      	movs	r3, #0
	
	while (len--) {
 8003b14:	4288      	cmp	r0, r1
 8003b16:	d101      	bne.n	8003b1c <TM_OneWire_CRC8+0xe>
		}
	}
	
	/* Return calculated CRC */
	return crc;
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	bd30      	pop	{r4, r5, pc}
		inbyte = *addr++;
 8003b1c:	f810 4b01 	ldrb.w	r4, [r0], #1
 8003b20:	2208      	movs	r2, #8
			mix = (crc ^ inbyte) & 0x01;
 8003b22:	ea83 0504 	eor.w	r5, r3, r4
			if (mix) {
 8003b26:	f015 0f01 	tst.w	r5, #1
 8003b2a:	ea4f 0353 	mov.w	r3, r3, lsr #1
				crc ^= 0x8C;
 8003b2e:	bf18      	it	ne
 8003b30:	f083 038c 	eorne.w	r3, r3, #140	; 0x8c
 8003b34:	f102 32ff 	add.w	r2, r2, #4294967295
 8003b38:	bf18      	it	ne
 8003b3a:	b2db      	uxtbne	r3, r3
		for (i = 8; i; i--) {
 8003b3c:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
			inbyte >>= 1;
 8003b40:	ea4f 0454 	mov.w	r4, r4, lsr #1
		for (i = 8; i; i--) {
 8003b44:	d1ed      	bne.n	8003b22 <TM_OneWire_CRC8+0x14>
 8003b46:	e7e5      	b.n	8003b14 <TM_OneWire_CRC8+0x6>

08003b48 <TM_RCC_InitSystem>:
 * | OTHER DEALINGS IN THE SOFTWARE.
 * |----------------------------------------------------------------------
 */
#include "tm_stm32_rcc.h"

TM_RCC_Result_t TM_RCC_InitSystem(void) {
 8003b48:	b510      	push	{r4, lr}
 8003b4a:	b094      	sub	sp, #80	; 0x50
	/* Enable D-Cache */
	SCB_EnableDCache();
#endif
	
	/* Enable Power Control clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	4a24      	ldr	r2, [pc, #144]	; (8003be0 <TM_RCC_InitSystem+0x98>)
 8003b50:	9300      	str	r3, [sp, #0]
 8003b52:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8003b54:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8003b58:	6411      	str	r1, [r2, #64]	; 0x40
 8003b5a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003b5c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8003b60:	9200      	str	r2, [sp, #0]
 8003b62:	9a00      	ldr	r2, [sp, #0]

#if !defined(STM32F0xx)
	/* Set voltage scaling */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b64:	4a1f      	ldr	r2, [pc, #124]	; (8003be4 <TM_RCC_InitSystem+0x9c>)
 8003b66:	9301      	str	r3, [sp, #4]
 8003b68:	6811      	ldr	r1, [r2, #0]
 8003b6a:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8003b6e:	6011      	str	r1, [r2, #0]
 8003b70:	6812      	ldr	r2, [r2, #0]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE;
	
	/* Select proper PLL input clock */
	if (RCC_OSCILLATORTYPE == RCC_OSCILLATORTYPE_HSE) {	
		RCC_OscInitStruct.HSEState = RCC_HSE_ON;
		RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8003b72:	930a      	str	r3, [sp, #40]	; 0x28
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b74:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
		RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
#endif
	}
	
	/* Set PLL parameters */
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b78:	2402      	movs	r4, #2
 8003b7a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b7e:	9201      	str	r2, [sp, #4]
		RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003b80:	2001      	movs	r0, #1
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b82:	9a01      	ldr	r2, [sp, #4]
	
#if !defined(STM32F0xx)
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM;
	RCC_OscInitStruct.PLL.PLLN = RCC_PLLN;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP;
 8003b84:	9411      	str	r4, [sp, #68]	; 0x44
		RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003b86:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b8a:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLN = RCC_PLLN;
 8003b8e:	f04f 0c08 	mov.w	ip, #8
 8003b92:	f44f 73b4 	mov.w	r3, #360	; 0x168
		RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003b96:	e9cd 0207 	strd	r0, r2, [sp, #28]
	RCC_OscInitStruct.PLL.PLLN = RCC_PLLN;
 8003b9a:	e9cd c30f 	strd	ip, r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLR = 7;
#endif
#endif
	
	/* Try to init */
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003b9e:	a807      	add	r0, sp, #28
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ;
 8003ba0:	2307      	movs	r3, #7
	RCC_OscInitStruct.PLL.PLLR = 7;
 8003ba2:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003ba6:	f7fd f981 	bl	8000eac <HAL_RCC_OscConfig>
 8003baa:	b110      	cbz	r0, 8003bb2 <TM_RCC_InitSystem+0x6a>

		return TM_RCC_Result_Error;
 8003bac:	2001      	movs	r0, #1
		return TM_RCC_Result_Error;
	}
	
	/* Return OK */
	return TM_RCC_Result_Ok;
}
 8003bae:	b014      	add	sp, #80	; 0x50
 8003bb0:	bd10      	pop	{r4, pc}
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8003bb2:	f7fc fe13 	bl	80007dc <HAL_PWREx_EnableOverDrive>
 8003bb6:	2800      	cmp	r0, #0
 8003bb8:	d1f8      	bne.n	8003bac <TM_RCC_InitSystem+0x64>
	RCC_ClkInitStruct.ClockType |= RCC_CLOCKTYPE_PCLK2;
 8003bba:	230f      	movs	r3, #15
 8003bbc:	9302      	str	r3, [sp, #8]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003bbe:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8003bc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003bc6:	e9cd 4003 	strd	r4, r0, [sp, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003bca:	e9cd 1305 	strd	r1, r3, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK) {
 8003bce:	a802      	add	r0, sp, #8
 8003bd0:	2106      	movs	r1, #6
 8003bd2:	f7fc fe3f 	bl	8000854 <HAL_RCC_ClockConfig>
		return TM_RCC_Result_Error;
 8003bd6:	3000      	adds	r0, #0
 8003bd8:	bf18      	it	ne
 8003bda:	2001      	movne	r0, #1
 8003bdc:	e7e7      	b.n	8003bae <TM_RCC_InitSystem+0x66>
 8003bde:	bf00      	nop
 8003be0:	40023800 	.word	0x40023800
 8003be4:	40007000 	.word	0x40007000

08003be8 <Reset_Handler>:
 8003be8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c20 <LoopFillZerobss+0x14>
 8003bec:	2100      	movs	r1, #0
 8003bee:	e003      	b.n	8003bf8 <LoopCopyDataInit>

08003bf0 <CopyDataInit>:
 8003bf0:	4b0c      	ldr	r3, [pc, #48]	; (8003c24 <LoopFillZerobss+0x18>)
 8003bf2:	585b      	ldr	r3, [r3, r1]
 8003bf4:	5043      	str	r3, [r0, r1]
 8003bf6:	3104      	adds	r1, #4

08003bf8 <LoopCopyDataInit>:
 8003bf8:	480b      	ldr	r0, [pc, #44]	; (8003c28 <LoopFillZerobss+0x1c>)
 8003bfa:	4b0c      	ldr	r3, [pc, #48]	; (8003c2c <LoopFillZerobss+0x20>)
 8003bfc:	1842      	adds	r2, r0, r1
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d3f6      	bcc.n	8003bf0 <CopyDataInit>
 8003c02:	4a0b      	ldr	r2, [pc, #44]	; (8003c30 <LoopFillZerobss+0x24>)
 8003c04:	e002      	b.n	8003c0c <LoopFillZerobss>

08003c06 <FillZerobss>:
 8003c06:	2300      	movs	r3, #0
 8003c08:	f842 3b04 	str.w	r3, [r2], #4

08003c0c <LoopFillZerobss>:
 8003c0c:	4b09      	ldr	r3, [pc, #36]	; (8003c34 <LoopFillZerobss+0x28>)
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d3f9      	bcc.n	8003c06 <FillZerobss>
 8003c12:	f7ff fb55 	bl	80032c0 <SystemInit>
 8003c16:	f000 f811 	bl	8003c3c <__libc_init_array>
 8003c1a:	f7ff f90d 	bl	8002e38 <main>
 8003c1e:	4770      	bx	lr
 8003c20:	20020000 	.word	0x20020000
 8003c24:	08003d04 	.word	0x08003d04
 8003c28:	20000000 	.word	0x20000000
 8003c2c:	20000014 	.word	0x20000014
 8003c30:	20000014 	.word	0x20000014
 8003c34:	200041d4 	.word	0x200041d4

08003c38 <ADC_IRQHandler>:
 8003c38:	e7fe      	b.n	8003c38 <ADC_IRQHandler>
	...

08003c3c <__libc_init_array>:
 8003c3c:	b570      	push	{r4, r5, r6, lr}
 8003c3e:	4e0d      	ldr	r6, [pc, #52]	; (8003c74 <__libc_init_array+0x38>)
 8003c40:	4c0d      	ldr	r4, [pc, #52]	; (8003c78 <__libc_init_array+0x3c>)
 8003c42:	1ba4      	subs	r4, r4, r6
 8003c44:	10a4      	asrs	r4, r4, #2
 8003c46:	2500      	movs	r5, #0
 8003c48:	42a5      	cmp	r5, r4
 8003c4a:	d109      	bne.n	8003c60 <__libc_init_array+0x24>
 8003c4c:	4e0b      	ldr	r6, [pc, #44]	; (8003c7c <__libc_init_array+0x40>)
 8003c4e:	4c0c      	ldr	r4, [pc, #48]	; (8003c80 <__libc_init_array+0x44>)
 8003c50:	f000 f820 	bl	8003c94 <_init>
 8003c54:	1ba4      	subs	r4, r4, r6
 8003c56:	10a4      	asrs	r4, r4, #2
 8003c58:	2500      	movs	r5, #0
 8003c5a:	42a5      	cmp	r5, r4
 8003c5c:	d105      	bne.n	8003c6a <__libc_init_array+0x2e>
 8003c5e:	bd70      	pop	{r4, r5, r6, pc}
 8003c60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c64:	4798      	blx	r3
 8003c66:	3501      	adds	r5, #1
 8003c68:	e7ee      	b.n	8003c48 <__libc_init_array+0xc>
 8003c6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c6e:	4798      	blx	r3
 8003c70:	3501      	adds	r5, #1
 8003c72:	e7f2      	b.n	8003c5a <__libc_init_array+0x1e>
 8003c74:	08003cfc 	.word	0x08003cfc
 8003c78:	08003cfc 	.word	0x08003cfc
 8003c7c:	08003cfc 	.word	0x08003cfc
 8003c80:	08003d00 	.word	0x08003d00

08003c84 <memset>:
 8003c84:	4402      	add	r2, r0
 8003c86:	4603      	mov	r3, r0
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d100      	bne.n	8003c8e <memset+0xa>
 8003c8c:	4770      	bx	lr
 8003c8e:	f803 1b01 	strb.w	r1, [r3], #1
 8003c92:	e7f9      	b.n	8003c88 <memset+0x4>

08003c94 <_init>:
 8003c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c96:	bf00      	nop
 8003c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c9a:	bc08      	pop	{r3}
 8003c9c:	469e      	mov	lr, r3
 8003c9e:	4770      	bx	lr

08003ca0 <_fini>:
 8003ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ca2:	bf00      	nop
 8003ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ca6:	bc08      	pop	{r3}
 8003ca8:	469e      	mov	lr, r3
 8003caa:	4770      	bx	lr
